<html xmlns:MSHelp="http://msdn.microsoft.com/mshelp"><head><META HTTP-EQUIV="Content-Type" CONTENT="text/html; charset=UTF-8" /><title>Reader Class</title><link rel="stylesheet" type="text/css" href="../styles/presentation.css" /><link rel="stylesheet" type="text/css" href="ms-help://Hx/HxRuntime/HxLink.css" /><script type="text/javascript" src="../scripts/script_prototype.js"> </script><script type="text/javascript" src="../scripts/EventUtilities.js"> </script><script type="text/javascript" src="../scripts/StyleUtilities.js"> </script><script type="text/javascript" src="../scripts/SplitScreen.js"> </script><script type="text/javascript" src="../scripts/ElementCollection.js"> </script><script type="text/javascript" src="../scripts/MemberFilter.js"> </script><script type="text/javascript" src="../scripts/CollapsibleSection.js"> </script><script type="text/javascript" src="../scripts/LanguageFilter.js"> </script><script type="text/javascript" src="../scripts/CookieDataStore.js"> </script><meta name="file" content="9a8bf2e6-b158-4467-a1db-040f0990f32d" /><xml xmlns:msxsl="urn:schemas-microsoft-com:xslt"><MSHelp:Attr Name="AssetID" Value="T:ThingMagic.Reader" /><MSHelp:Keyword Index="A" Term="T:ThingMagic.Reader" /><MSHelp:Keyword Index="A" Term="frlrfThingMagicReaderClassTopic" /><MSHelp:Keyword Index="A" Term="frlrfThingMagicReaderMembersTopic" /><MSHelp:Keyword Index="K" Term="Reader class" /><MSHelp:Keyword Index="K" Term="ThingMagic.Reader class" /><MSHelp:Keyword Index="F" Term="Reader" /><MSHelp:Keyword Index="F" Term="ThingMagic.Reader" /><MSHelp:Attr Name="TopicType" Value="apiref" /><MSHelp:Attr Name="TopicType" Value="kbSyntax" /><MSHelp:Attr Name="APIType" Value="Managed" /><MSHelp:Attr Name="APILocation" Value="MercuryAPI.dll" /><MSHelp:Attr Name="APIName" Value="ThingMagic.Reader" /><MSHelp:Attr Name="Locale" Value="en-us" /><MSHelp:Attr Name="Abstract" Value="Abstract base class for ThingMagic RFID reader devices." /></xml></head><body><div id="control"><span class="productTitle">Mercury API</span><br /><span class="topicTitle">Reader Class</span><br /><div id="toolbar"><span id="chickenFeet"><a href="d4648875-d41a-783b-d5f4-638df39ee413.htm">Namespaces</a> ► <a href="3af3f7df-e311-4e3f-9388-449f848a997b.htm">ThingMagic</a> ► <span class="selflink">Reader</span></span><span id="languageFilter"><select id="languageSelector" onchange="var names = this.value.split(' '); toggleVisibleLanguage(names[1]); lfc.switchLanguage(names[0]); store.set('lang',this.value); store.save();"><option value="CSharp cs">C#</option><option value="VisualBasic vb">Visual Basic</option><option value="ManagedCPlusPlus cpp">Visual C++</option></select></span></div></div><div id="main"><span style="color: DarkGray"> </span><div class="summary">
            Abstract base class for ThingMagic RFID reader devices.
            </div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Declaration Syntax</div><div class="sectionContent"><div id="syntaxSection"><table class="filter"><tr class="tabs" id="syntaxTabs"><td class="tab" x-lang="CSharp" onclick="toggleClass('syntaxTabs','x-lang','CSharp','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','CSharp','display','block','none');">C#</td><td class="tab" x-lang="VisualBasic" onclick="toggleClass('syntaxTabs','x-lang','VisualBasic','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','VisualBasic','display','block','none');">Visual Basic</td><td class="tab" x-lang="ManagedCPlusPlus" onclick="toggleClass('syntaxTabs','x-lang','ManagedCPlusPlus','activeTab','tab'); toggleStyle('syntaxBlocks','x-lang','ManagedCPlusPlus','display','block','none');">Visual C++</td></tr></table><div id="syntaxBlocks"><div class="code" x-lang="CSharp"><pre>
<span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="identifier">Reader</span> : <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a></pre></div><div class="code" x-lang="VisualBasic"><pre>
<span class="keyword">Public</span> <span class="keyword">MustInherit</span> <span class="keyword">Class</span> <span class="identifier">Reader</span> _
	<span class="keyword">Inherits</span> <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a></pre></div><div class="code" x-lang="ManagedCPlusPlus"><pre>
<span class="keyword">public</span> <span class="keyword">ref class</span> <span class="identifier">Reader</span> <span class="keyword">abstract</span> : <span class="keyword">public</span> <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a></pre></div></div></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Members</div><div class="sectionContent"><div id="allMembersSection"><table class="filter"><tr class="tabs" id="memberTabs"><td class="tab" value="all" onclick="toggleClass('memberTabs','value','all','activeTab','tab'); processSubgroup('all', 'member'); processList('memberList','filterElement','member');">All Members</td><td class="tab" value="constructor" onclick="toggleClass('memberTabs','value','constructor','activeTab','tab'); processSubgroup('constructor','member');processList('memberList','filterElement','member');">Constructors</td><td class="tab" value="method" onclick="toggleClass('memberTabs','value','method','activeTab','tab'); processSubgroup('method','member'); processList('memberList','filterElement','member');">Methods</td><td class="tab" value="field" onclick="toggleClass('memberTabs','value','field','activeTab','tab'); processSubgroup('field','member'); processList('memberList','filterElement','member');">Fields</td><td class="tab" value="event" onclick="toggleClass('memberTabs','value','event','activeTab','tab'); processSubgroup('event','member'); processList('memberList','filterElement','member');">Events</td></tr><tr><td class="line" colspan="2"><label for="public"><input id="public" type="checkbox" checked="true" onclick="toggleCheckState('public',this.checked); processList('memberList','filterElement','member');" />Public</label><br /><label for="protected"><input id="protected" type="checkbox" checked="true" onclick="toggleCheckState('protected',this.checked); processList('memberList','filterElement','member');" />Protected</label></td><td class="line" colspan="2"><label for="instance"><input id="instance" type="checkbox" checked="true" onclick="toggleCheckState('instance',this.checked); processList('memberList','filterElement','member');" />Instance</label><br /><label for="static"><input id="static" type="checkbox" checked="true" onclick="toggleCheckState('static',this.checked); processList('memberList','filterElement','member');" />Static</label></td><td class="line" colspan="2"><label for="declared"><input id="declared" type="checkbox" checked="true" onclick="toggleCheckState('declared',this.checked); processList('memberList','filterElement','member');" />Declared</label><br /><label for="inherited"><input id="inherited" type="checkbox" checked="true" onclick="toggleCheckState('inherited',this.checked); processList('memberList','filterElement','member');" />Inherited</label></td></tr></table><table class="members" id="memberList"><tr><th class="iconColumn">Icon</th><th class="nameColumn">Member</th><th class="descriptionColumn">Description</th></tr><tr data="constructor; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="4eaefb7f-afd4-9af6-3bb4-449dc1c0665f.htm">Reader<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">Initializes a new instance of the <span class="selflink">Reader</span> class</div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="830c087f-b0ca-18d6-5af8-c37c1af10d17.htm">_exitNow</a></td><td><div class="summary">
            Internal flag to "close reader."
            If true, quit worker thread.
            </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="eaa91a9f-36fc-1179-4c5f-f2a623cc7c17.htm">_runNow</a></td><td><div class="summary">
            Internal flag to enable "tag reading."
            If true, generate tag reads.  If false, stop "reading tags."
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="ee7573ca-8aae-8896-5677-e4cc6466847e.htm">Connect<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Connect reader object to device.
            If object already connected, then do nothing.
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="805b53f5-4029-52d7-54c8-7efb380e7cb8.htm">Create(String)</a></td><td><div class="summary">
            Return an instance of a Reader class associated with a
            serial reader on a particular communication port.
            </div><br /></td></tr><tr data="field; protected; static; declared"><td><img src="../icons/protfield.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="12093eed-edfc-2b31-28a6-47f1b8aa90f2.htm">debug</a></td><td><div class="summary">
            Debug log object for Reader and subclasses
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="fa6f2430-0a77-1fa8-7cce-ebd93cbec9b0.htm">Destroy<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Shuts down the connection with the reader device.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="3d2dcb32-b206-0bcb-17ee-ea87d2b68546.htm">DestroyGivenRead<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Clean up actions given a working Read method
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="124d5145-6c82-0200-07f7-b0b1827ab6f3.htm">Dispose(Boolean)</a></td><td><div class="summary">
            Dispose
            </div> (Overrides <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a>.<a href="3f85d54d-f8b8-918b-fce4-08dcf94c4311.htm">Dispose(Boolean)</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="3d8e9b6f-e2ce-4b90-3452-c0e63b4c7279.htm">Dispose<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Dispose
            </div> (Inherited from <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a>.)<br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="eedbdf6d-2550-b660-3e4e-22f256f05bf2.htm">DoWorkGivenRead<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Logic for asynchronous worker thread given a working Read method
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/bsc2ak47" target="_blank">Equals(Object)</a></td><td><div class="summary">
                    Determines whether the specified <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a> is equal to the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.
                </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="d2e828d3-35d9-2a73-31ba-3694f04b1f06.htm">ExecuteTagOp(TagOp, TagFilter)</a></td><td><div class="summary">
             execute a TagOp
             </div><br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="8cc545a7-ba6e-2a01-4bf3-bf17a23e0a37.htm">Finalize<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Finalizer
            </div> (Inherited from <a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="e26f41dc-fa30-b7da-7eaf-13a489122093.htm">FirmwareLoad(Stream)</a></td><td><div class="summary">
            Load a new firmware image into the device's nonvolatile memory.
            This installs the given image data onto the device and restarts
            it with that image. The firmware must be of an appropriate type
            for the device. Interrupting this operation may damage the
            reader.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="f8d53867-3a1a-6bbc-5e71-81d20d3b643c.htm">FirmwareLoad(Stream, FirmwareLoadOptions)</a></td><td><div class="summary">
            Load a new firmware image into the device's nonvolatile memory.
            This installs the given image data onto the device and restarts
            it with that image. The firmware must be of an appropriate type
            for the device. Interrupting this operation may damage the
            reader.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="7910a2d8-c157-4478-24cb-693ea473d1c3.htm">GetFirstConnectedAntenna<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Pick first available connected antenna
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="d2c09c4c-2cba-186e-0412-4aa16cc0e7bc.htm">GetFirstSupportedProtocol<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Pick first available supported protocol
            </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/zdee4b3y" target="_blank">GetHashCode<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
                    Serves as a hash function for a particular type. 
                </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/dfwy45w9" target="_blank">GetType<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
                    Gets the <a href="http://msdn2.microsoft.com/en-us/library/42892f65" target="_blank">Type</a> of the current instance.
                </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="0e5db500-d3ab-88b2-ebda-764c9a330671.htm">GpiGet<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Get the state of all of the reader's GPI pins. 
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="e3ca0f7a-0d4f-55d7-52a1-90d2d1d61f5c.htm">GpoSet(ICollection<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>GpioPin<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Set the state of some GPO pins.
            </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="10b3a5fa-13c1-88af-1ff3-febc095ffc17.htm">isFastSearch</a></td><td><div class="summary">
            Fast search enable 
            </div><br /></td></tr><tr data="method; protected; static; declared"><td><img src="../icons/protmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="79120a2d-1690-d49c-985b-fbc3cb4f0722.htm">IsMember<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>(T, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>T<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Is requested value a valid value?
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="03bfd338-7c00-0e6a-3906-1d70cf59efb5.htm">KillTag(TagFilter, TagAuthentication)</a></td><td><div class="summary">
            Kill a tag. The first tag seen is killed.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="0ff664fd-8918-e339-54e9-4e1ef0cdcd9e.htm">LockTag(TagFilter, TagLockAction)</a></td><td><div class="summary">
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="305d353a-621a-fe3a-139b-dd4546c1d79e.htm">Log</a></td><td><div class="summary">
            Occurs when debug log message is generated
            </div><br /></td></tr><tr data="method; protected; instance; inherited"><td><img src="../icons/protmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/57ctke0a" target="_blank">MemberwiseClone<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
                    Creates a shallow copy of the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.
                </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="7ee52f1d-0d5e-c65b-062f-a51d9ae9df16.htm">notifyExceptionListeners(ReaderException)</a></td><td><div class="summary">
            Convenience method for delivering reader exceptions to listeners
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="afae4e46-eadd-9df9-26f7-b17ced6a2100.htm">OnLog(String)</a></td><td><div class="summary">
            Generate a debug log message
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="968333ec-51dc-aa22-60ef-6c3a9b725a43.htm">OnReadAuthentication(TagReadData)</a></td><td><div class="summary">
            Reader Authentication message event.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="e99afb59-4135-b519-6ad4-98c522530b48.htm">OnStatsRead(ReaderStatsReport)</a></td><td><div class="summary">
            Reader Stats message event
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="fff6e6fb-98c6-2247-8595-b962248ac6ba.htm">OnStatusRead(<span class="languageSpecificText"><span class="cpp">array&lt;</span></span>StatusReport<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>)</a></td><td><div class="summary">
            Reader Status message event
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="9c8ad6b9-cbe2-66b3-6208-390e43138dea.htm">OnTagRead(TagReadData)</a></td><td><div class="summary">
            Internal accessor to TagRead event.
            Called by members of the Reader class to fire a TagRead event.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="17c1b4dc-3880-d9a0-30c6-05d5bd0a06d1.htm">OnTransport(Boolean, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>Byte<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, Int32)</a></td><td><div class="summary">
            Fire Transport message event
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="d9bcdd89-e97c-b529-a1f1-323b3fb9ea75.htm">ParamAdd(Reader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>Setting)</a></td><td><div class="summary">
            Register a new parameter handler
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="3a90390e-b728-50fc-6a58-e16fc529ff7b.htm">ParamClear<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
             Reset parameter table; e.g., to reprobe hardware afer firmware update
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="e3eecde6-b048-bd30-0461-000e9891a052.htm">ParamGet(String)</a></td><td><div class="summary">
            Get the value of a Reader parameter.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="b5c57002-621b-4f62-484a-2f32407499b9.htm">ParamList<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Get a list of the parameters available
            
            <p>Supported Parameters:
            <ul><li>/reader/antenna/checkPort</li><li>/reader/antenna/connectedPortList</li><li>/reader/antenna/portList</li><li>/reader/antenna/portSwitchGpos</li><li>/reader/antenna/portSwitchGpos not supported</li><li>/reader/antenna/returnLoss</li><li>/reader/antenna/settlingTimeList</li><li>/reader/antenna/txRxMap</li><li>/reader/antennaMode</li><li>/reader/baudRate</li><li>/reader/commandTimeout</li><li>/reader/currentTime</li><li>/reader/description</li><li>/reader/extendedEpc</li><li>/reader/gen2/BLF</li><li>/reader/gen2/accessPassword</li><li>/reader/gen2/bap</li><li>/reader/gen2/q</li><li>/reader/gen2/session</li><li>/reader/gen2/tagEncoding</li><li>/reader/gen2/target</li><li>/reader/gen2/target not supported</li><li>/reader/gen2/tari</li><li>/reader/gen2/writeEarlyExit</li><li>/reader/gen2/writeMode</li><li>/reader/gen2/writeReplyTimeout</li><li>/reader/gpio/inputList</li><li>/reader/gpio/outputList</li><li>/reader/hostname</li><li>/reader/iso180006b/BLF</li><li>/reader/iso180006b/delimiter</li><li>/reader/iso180006b/modulationDepth</li><li>/reader/licenseKey</li><li>/reader/powerMode</li><li>/reader/radio/enablePowerSave</li><li>/reader/radio/enableSJC</li><li>/reader/radio/portReadPowerList</li><li>/reader/radio/portWritePowerList</li><li>/reader/radio/powerMax</li><li>/reader/radio/powerMin</li><li>/reader/radio/readPower</li><li>/reader/radio/temperature</li><li>/reader/radio/writePower</li><li>/reader/read/asyncOffTime</li><li>/reader/read/asyncOnTime</li><li>/reader/read/plan</li><li>/reader/region/hopTable</li><li>/reader/region/hopTime</li><li>/reader/region/id</li><li>/reader/region/lbt/enable</li><li>/reader/region/supportedRegions</li><li>/reader/statistics</li><li>/reader/stats</li><li>/reader/stats is not supported</li><li>/reader/stats/enable</li><li>/reader/stats/enable is not supported</li><li>/reader/status/antennaEnable</li><li>/reader/status/frequencyEnable</li><li>/reader/status/temperatureEnable</li><li>/reader/tagReadData/enableReadFilter</li><li>/reader/tagReadData/enableReadFilter read only</li><li>/reader/tagReadData/readFilterTimeout</li><li>/reader/tagReadData/recordHighestRssi</li><li>/reader/tagReadData/reportRssiInDbm</li><li>/reader/tagReadData/tagopFailures</li><li>/reader/tagReadData/tagopSuccesses</li><li>/reader/tagReadData/uniqueByAntenna</li><li>/reader/tagReadData/uniqueByData</li><li>/reader/tagReadData/uniqueByProtocol</li><li>/reader/tagop/antenna</li><li>/reader/tagop/protocol</li><li>/reader/transportTimeout</li><li>/reader/uri</li><li>/reader/userConfig</li><li>/reader/userMode</li><li>/reader/version/hardware</li><li>/reader/version/model</li><li>/reader/version/productGroup</li><li>/reader/version/productGroupID</li><li>/reader/version/productID</li><li>/reader/version/serial</li><li>/reader/version/software</li><li>/reader/version/supportedProtocols</li></ul></p></div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="06583105-73b0-d4ca-68fb-281ea586695b.htm">ParamSet(String, Object)</a></td><td><div class="summary">
            Set the value of a Reader parameter.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="160a4d3a-9a7a-3a80-2ef9-512d6571a9c4.htm">QueueTagReads(ICollection<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>TagReadData<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Submit tag reads for read listener background processing
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="c17139c0-34e3-90c0-2780-b9e02baecc48.htm">Read(Int32)</a></td><td><div class="summary">
            Read RFID tags for a fixed duration.
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="2c3716b3-bf6c-824f-6b50-fca52f8ce8b9.htm">ReadAuthentication</a></td><td><div class="summary">
            Occurs when 0x604 error is received which indicates the api 
            is waiting for the client to provide the accesspassword of tag.
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="d3f37f35-88ec-b9c0-1f9c-e9ec1ae8bb0f.htm">ReadException</a></td><td><div class="summary">
            Occurs when asynchronous read throws an exception.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="3dde8935-f14c-70ba-338a-a0a13a3fce83.htm">ReadGivenStartStop(Int32)</a></td><td><div class="summary">
            Utility function to implement Read given working StartReading and StopReading methods
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="d6d339b8-abd3-706f-50ad-969d19ab3286.htm">ReadTagMemBytes(TagFilter, Int32, Int32, Int32)</a></td><td><div class="summary">
            Read data from the memory bank of a tag.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="3ae1ea14-363e-e455-1d8d-a8261cdad736.htm">ReadTagMemWords(TagFilter, Int32, Int32, Int32)</a></td><td><div class="summary">
            Read data from the memory bank of a tag.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/privmethod.gif" /></td><td><a href="c163d6dc-7d32-05ae-76e5-61b5c2102cee.htm">ReadTagMemWordsGivenReadTagMemBytes(TagFilter, Int32, Int32, Int32)</a></td><td><div class="summary">
            Implement ReadTagMemWords in terms of ReadTagMemBytes
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="6db968f8-ec1d-506c-435b-db68308d7b81.htm">Reboot<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Reboots the device
            </div><br /></td></tr><tr data="method; public; static; declared"><td><img src="../icons/pubmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="a6c5dcc2-5da7-4c6b-674b-fe310e7842c9.htm">SetSerialTransport(String, Reader<span class="languageSpecificText"><span class="cs">.</span><span class="vb">.</span><span class="cpp">::</span><span class="nu">.</span></span>ReaderFactory)</a></td><td><div class="summary">
            Creates a serial transport dispatch table
             </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="023be2c2-fcbe-fc5c-218e-6c8f385ecc12.htm">SimpleTransportListener(Object, TransportListenerEventArgs)</a></td><td><div class="summary">
            Simple console-output transport listener
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="a9ed984e-287e-0271-05eb-7820fb65f2e5.htm">StartReading<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Start reading RFID tags in the background. The tags found will be
            passed to the registered read listeners, and any exceptions that
            occur during reading will be passed to the registered exception
            listeners. Reading will continue until stopReading() is called.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="48c491f6-f533-c40b-861b-4134428be58b.htm">StartReadingGivenRead<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Utility function to implement StartReading given a working Read method
            </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="1cd80ab0-5381-dc30-7852-786353159567.htm">statFlag</a></td><td><div class="summary">
            Cache reader stats flag
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="608dd535-9dd2-8f07-4bdb-57465ebb8253.htm">StatsListener</a></td><td><div class="summary">
            Occurs when reader status parsing in continuous read 
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="01fedac5-5012-232b-edf2-f307d5d8fdb6.htm">StatusListener</a></td><td><div class="summary">
            Occurs when reader status parsing in continuous read 
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="7691b62d-632a-a3dc-1114-917169bb7728.htm">StopReading<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Stop reading RFID tags in the background.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="a6213d7d-caff-3db8-fd3a-c67bba682567.htm">StopReadingGivenRead<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
            Utility function to implement StopReading given a working Read method
            </div><br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="54c89314-3e0c-8c03-6183-e4a458bb2ed8.htm">TagRead</a></td><td><div class="summary">
            Occurs when each tag is read.
            </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="8a96b225-0aed-5827-773f-ac06b29e97f4.htm">timeEnd</a></td><td><div class="summary">
            Get the time elapsed for processing the tagread data
             </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="b249bd2f-b4ba-af81-808a-e86843a62cd5.htm">timeStart</a></td><td><div class="summary">
            Get the time elapsed for processing the tagread data
             </div><br /></td></tr><tr data="method; public; instance; inherited"><td><img src="../icons/pubmethod.gif" /></td><td><a href="http://msdn2.microsoft.com/en-us/library/7bxwbwt2" target="_blank">ToString<span class="languageSpecificText"><span class="cs">()</span><span class="cpp">()</span><span class="nu">()</span></span></a></td><td><div class="summary">
                    Returns a <a href="http://msdn2.microsoft.com/en-us/library/s1wwdcbf" target="_blank">String</a> that represents the current <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.
                </div> (Inherited from <a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a>.)<br /></td></tr><tr data="event; public; instance; declared"><td><img src="../icons/pubevent.gif" /></td><td><a href="d85b8f53-9cef-c284-3fff-be6709dc1892.htm">Transport</a></td><td><div class="summary">
            Transport message was sent or received
            </div><br /></td></tr><tr data="field; protected; instance; declared"><td><img src="../icons/protfield.gif" /></td><td><a href="86420850-0b63-4260-1389-002d48c13b50.htm">userTransportTimeoutEnable</a></td><td><div class="summary">
            In case user specified the timeout value for connect
            Enable the userTransportTimeoutEnable option
            </div><br /></td></tr><tr data="method; protected; static; declared"><td><img src="../icons/protmethod.gif" /><img src="../icons/static.gif" title="static member" /></td><td><a href="c8ea23a3-d3fa-e8b4-8327-9329ebb085c2.htm">ValidateParameter<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>T<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>(T, <span class="languageSpecificText"><span class="cpp">array&lt;</span></span>T<span class="languageSpecificText"><span class="cpp">&gt;</span><span class="cs">[]</span><span class="vb">()</span><span class="nu">[]</span></span>, String)</a></td><td><div class="summary">
            Is requested value a valid value?
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="c993be24-9a64-86e5-7bc2-af9967460b4c.htm">ValidateParameterKey(String)</a></td><td><div class="summary">
            Check for existence of parameter.  Throw exception if parameter does not exist.
            </div><br /></td></tr><tr data="method; protected; instance; declared"><td><img src="../icons/protmethod.gif" /></td><td><a href="e7926d19-6d67-96a5-911f-e1385721ad5d.htm">ValidateProtocol(TagProtocol)</a></td><td><div class="summary">
            Is requested protocol a valid protcol?
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="6681a193-1127-381f-7f84-7512c004adbd.htm">WriteTag(TagFilter, TagData)</a></td><td><div class="summary">
            Write a new ID to a tag.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="95268e18-54bd-937a-feaa-f99ddea828f6.htm">WriteTagMemBytes(TagFilter, Int32, Int32, ICollection<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>Byte<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Write data to the memory bank of a tag.
            </div><br /></td></tr><tr data="method; public; instance; declared"><td><img src="../icons/pubmethod.gif" /></td><td><a href="da9887fd-9796-ad2e-3064-ec50b6cfb88b.htm">WriteTagMemWords(TagFilter, Int32, Int32, ICollection<span class="languageSpecificText"><span class="cs">&lt;</span><span class="vb">(Of </span><span class="cpp">&lt;</span><span class="nu">(</span></span>UInt16<span class="languageSpecificText"><span class="cs">&gt;</span><span class="vb">)</span><span class="cpp">&gt;</span><span class="nu">)</span></span>)</a></td><td><div class="summary">
            Write data to the memory bank of a tag.
            </div><br /></td></tr></table></div></div></div><div class="section"><div class="sectionTitle" onclick="toggleSection(this.parentNode)"><img src="../icons/collapse_all.gif" /> Inheritance Hierarchy</div><div class="sectionContent"><table cellspacing="0" cellpadding="0"><tr><td colspan="4"><a href="http://msdn2.microsoft.com/en-us/library/e5kfa45b" target="_blank">Object</a></td></tr><tr><td><img src="../icons/LastChild.gif" /></td><td colspan="3"><a href="ad285ce5-64ed-2426-185c-bcc332ca509a.htm">Disposable</a></td></tr><tr><td> </td><td><img src="../icons/LastChild.gif" /></td><td colspan="2"><span class="selflink">Reader</span></td></tr><tr><td> </td><td> </td><td><img src="../icons/NotLastChild.gif" /></td><td><a href="4e875b9f-bad5-e78d-7391-99d9133388fb.htm">LlrpReader</a></td></tr><tr><td> </td><td> </td><td><img src="../icons/NotLastChild.gif" /></td><td><a href="c843f4db-fd64-e3ea-f0a4-085ef0041e1e.htm">RqlReader</a></td></tr><tr><td> </td><td> </td><td><img src="../icons/LastChild.gif" /></td><td><a href="8b45eb30-9733-2ce3-a1fd-3c7adac3124b.htm">SerialReader</a></td></tr></table></div></div><p><div id="footer"><p />Send comments on this topic to
        <a id="HT_MailLink" href="mailto:support%40thingmagic.com?Subject=Mercury API">support@thingmagic.com</a>
        <script type="text/javascript">
        var HT_mailLink = document.getElementById("HT_MailLink");
        var HT_mailLinkText = HT_mailLink.innerHTML;
        HT_mailLink.href += ": " + document.title;
        HT_mailLink.innerHTML = HT_mailLinkText;
        </script> </div>Assembly: <span sdata="assembly">MercuryAPI</span> (Module: MercuryAPI) Version: 1.23.0.20 (1.23.0.20)</p></div></body></html>