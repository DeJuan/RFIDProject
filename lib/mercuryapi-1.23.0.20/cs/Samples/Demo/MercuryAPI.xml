<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MercuryAPI</name>
    </assembly>
    <members>
        <member name="T:ThingMagic.Ata">
            <summary>
            ATA tag-specific constructs
            </summary>
        </member>
        <member name="T:ThingMagic.Ata.TagData">
            <summary>
            ATA specific version of TagData.
            </summary>
        </member>
        <member name="T:ThingMagic.TagData">
            <summary>
            Data relating to the identity and content of a tag.
            </summary>
        </member>
        <member name="T:ThingMagic.TagFilter">
            <summary>
            Specifies a subset of tags; e.g., match on EPC, or select prefixes
            </summary>
        </member>
        <member name="M:ThingMagic.TagFilter.Matches(ThingMagic.TagData)">
            <summary>
            Test if a tag Matches this filter. Only applies to selects based
            on the EPC.
            </summary>
            <param name="t">tag data to screen</param>
            <returns>Return true to allow tag through the filter.
            Return false to reject tag.</returns>
        </member>
        <member name="M:ThingMagic.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="M:ThingMagic.TagData.#ctor(System.String)">
            <summary>
            Create TagData from human-readable EPC
            </summary>
            <param name="epcHexString">EPC value, as hex string; e.g., "1234567890ABCDEF"</param>
        </member>
        <member name="M:ThingMagic.TagData.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>A string representing the current object</returns>
        </member>
        <member name="M:ThingMagic.TagData.Matches(ThingMagic.TagData)">
            <summary>
            Test if a tag Matches this filter. Only applies to selects based
            on the EPC.
            </summary>
            <param name="t">tag data to screen</param>
            <returns>Return true to allow tag through the filter.
            Return false to reject tag.</returns>
        </member>
        <member name="P:ThingMagic.TagData.EpcBytes">
            <summary>
            Tag's EPC
            </summary>
        </member>
        <member name="P:ThingMagic.TagData.EpcString">
            <summary>
            Internally-stored tag EPC
            </summary>
            <summary>
            Tag's EPC, as a human-readable hex string with no prefix or separators; e.g., 0123456789ABCDEF
            </summary>
        </member>
        <member name="P:ThingMagic.TagData.CrcBytes">
            <summary>
            Tag's CRC
            </summary>
        </member>
        <member name="P:ThingMagic.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="M:ThingMagic.Ata.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Ata.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="P:ThingMagic.Ata.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="T:ThingMagic.ByteConv">
            <summary>
            Convert numeric fields within M5e messages
            </summary>
        </member>
        <member name="M:ThingMagic.ByteConv.BytesPerBits(System.Int32)">
            <summary>
            Calculate number of bytes required to hold number of bits
            </summary>
            <param name="bitCount">Number of bits to be held</param>
            <returns>Number of bytes required</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.WordsPerBytes(System.Int32)">
            <summary>
            Calculate number of 16-bit words required to contain number of bytes
            </summary>
            <param name="byteCount">Number of bytes to be contained</param>
            <returns>Number of words required</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.BigsPerSmalls(System.Int32,System.Int32)">
            <summary>
            Calculate number of larger units required to contain number of smaller units.
            For example, a byte contains 8 bits.  1 byte holds 0-8 bits, 2 bytes hold 9-16 bits, ...
            </summary>
            <param name="smallCount">Number of smaller units to be contained.</param>
            <param name="smallsPerBig">Number of smaller units contained within one larger unit; e.g., 8 bits per byte</param>
            <returns>Number of larger units required to contain smallCount smaller units.</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToAscii(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extract ASCII string from byte string
            </summary>
            <param name="bytes">Source byte string</param>
            <param name="offset">Place to start extracting</param>
            <param name="length">Number of bytes to extract</param>
            <returns>ASCII string from byte string</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.EncodeU16(System.UInt16)">
            <summary>
            Create byte array that represents unsigned 16-bit integer
            </summary>
            <param name="value">16-bit integer to encode</param>
            <returns>2-byte encoding of 16-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.EncodeS16(System.Int16)">
            <summary>
            Create byte array that represents signed 16-bit integer
            </summary>
            <param name="value">16-bit integer to encode</param>
            <returns>2-byte encoding of 16-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.FromU16(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Insert unsigned 16-bit integer into big-endian byte string
            </summary>
            <param name="bytes">Target big-endian byte string</param>
            <param name="offset">Location to insert into</param>
            <param name="value">16-bit integer to insert</param>
            <returns>Number of bytes inserted</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.FromS16(System.Byte[],System.Int32,System.Int16)">
            <summary>
            Insert signed 16-bit integer into big-endian byte string
            </summary>
            <param name="bytes">Target big-endian byte string</param>
            <param name="offset">Location to insert into</param>
            <param name="value">16-bit integer to insert</param>
            <returns>Number of bytes inserted</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToU16(System.Byte[],System.Int32@)">
            <summary>
            Extract unsigned 16-bit integer from big-endian byte string
            </summary>
            <param name="bytes">Source big-endian byte string</param>
            <param name="offset">Location to extract from.  Will be updated to post-decode offset.</param>
            <returns>Unsigned 16-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToU16(System.Byte[],System.Int32)">
            <summary>
            Extract unsigned 16-bit integer from big-endian byte string
            </summary>
            <param name="bytes">Source big-endian byte string</param>
            <param name="offset">Location to extract from</param>
            <returns>Unsigned 16-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToU16s(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Convert byte array to u16 array
            </summary>
            <param name="bytes">Input bytes</param>
            <returns>Output words</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.EncodeU32(System.UInt32)">
            <summary>
            Create byte array that represents unsigned 32-bit integer
            </summary>
            <param name="value">32-bit integer to encode</param>
            <returns>4-byte encoding of 32-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.FromU32(System.Byte[],System.Int32,System.UInt32)">
            <summary>
            Insert unsigned 32-bit integer into big-endian byte string
            </summary>
            <param name="bytes">Target big-endian byte string</param>
            <param name="offset">Location to insert into</param>
            <param name="value">32-bit integer to insert</param>
            <returns>Number of bytes inserted</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToU32(System.Byte[],System.Int32)">
            <summary>
            Extract unsigned 32-bit integer from big-endian byte string
            </summary>
            <param name="bytes">Source big-endian byte string</param>
            <param name="offset">Location to extract from</param>
            <returns>Unsigned 32-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.EncodeU64(System.UInt64)">
            <summary>
            Create byte array that represents unsigned 64-bit integer
            </summary>
            <param name="value">64-bit integer to encode</param>
            <returns>4-byte encoding of 64-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.FromU64(System.Byte[],System.Int32,System.UInt64)">
            <summary>
            Insert unsigned 64-bit integer into big-endian byte string
            </summary>
            <param name="bytes">Target big-endian byte string</param>
            <param name="offset">Location to insert into</param>
            <param name="value">64-bit integer to insert</param>
            <returns>Number of bytes inserted</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ToU64(System.Byte[],System.Int32)">
            <summary>
            Extract unsigned 64-bit integer from big-endian byte string
            </summary>
            <param name="bytes">Source big-endian byte string</param>
            <param name="offset">Location to extract from</param>
            <returns>Unsigned 64-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.GetU8(System.Byte[],System.Int32)">
            <summary>
            Extract integer from big-endian byte string
            </summary>
            <param name="data">Source big-endian byte string</param>
            <param name="offset">Location to extract from</param>
            <returns>integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.GetU24(System.Byte[],System.Int32)">
            <summary>
            Extract integer from big-endian byte string
            </summary>
            <param name="data">Source big-endian byte string</param>
            <param name="offset">Location to extract from</param>
            <returns>integer</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.ConvertFromUshortArray(System.UInt16[])">
            <summary>
            convert a ushort array to byte array
            </summary>
            <param name="array">the input ushort array</param>
            <returns>the converted byte array</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.MakeBitMask(System.Int32,System.Int32)">
            <summary>
            Create bitmask with specified position and size; e.g., MakeBitMask(3, 2) returns 0x18
            </summary>
            <param name="offset">Offset of least-significant bit in mask</param>
            <param name="length">Number of bits in mask</param>
            <returns>Bitmask with 1's in specified positions</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.GetBits(System.UInt64,System.Int32,System.Int32)">
            <summary>
            Get bits within an integer;  e.g., GetBits(0x1234, 4, 4) returns 0x3
            </summary>
            <param name="raw">Integer to extract bits from</param>
            <param name="offset">Offset of least-significant bit to modify</param>
            <param name="length">Number of bits to modify</param>
            <returns>Extracted bits</returns>
        </member>
        <member name="M:ThingMagic.ByteConv.SetBits(System.UInt64@,System.Int32,System.Int32,System.UInt64,System.String)">
            <summary>
            Set bits within an integer.
            </summary>
            <param name="raw">Integer to modify</param>
            <param name="offset">Offset of least-significant bit to modify</param>
            <param name="length">Number of bits to modify</param>
            <param name="value">Value to assign to target bits</param>
            <param name="desc">Human-readable description of bits (for error messages)</param>
        </member>
        <member name="M:ThingMagic.ByteConv.SetBits(System.UInt32@,System.Int32,System.Int32,System.UInt32,System.String)">
            <summary>
            Set bits within an integer.
            </summary>
            <param name="raw">Integer to modify</param>
            <param name="offset">Offset of least-significant bit to modify</param>
            <param name="length">Number of bits to modify</param>
            <param name="value">Value to assign to target bits</param>
            <param name="desc">Human-readable description of bits (for error messages)</param>
        </member>
        <member name="M:ThingMagic.ByteConv.SetBits(System.UInt16@,System.Int32,System.Int32,System.UInt16,System.String)">
            <summary>
            Set bits within an integer.
            </summary>
            <param name="raw">Integer to modify</param>
            <param name="offset">Offset of least-significant bit to modify</param>
            <param name="length">Number of bits to modify</param>
            <param name="value">Value to assign to target bits</param>
            <param name="desc">Human-readable description of bits (for error messages)</param>
        </member>
        <member name="T:ThingMagic.ByteFormat">
            <summary>
            Convert byte arrays to and from human-readable strings
            </summary>
        </member>
        <member name="M:ThingMagic.ByteFormat.FromHex(System.String)">
            <summary>
            Convert human-readable hex string to byte array;
            e.g., 123456 or 0x123456 -> {0x12, 0x34, 0x56};
            </summary>
            <param name="hex">Human-readable hex string to convert</param>
            <returns>Byte array</returns>
        </member>
        <member name="M:ThingMagic.ByteFormat.ToHex(System.Byte[])">
            <summary>
            Convert byte array to human-readable hex string; e.g., {0x12, 0x34, 0x56} -> 123456
            </summary>
            <param name="bytes">Byte array to convert</param>
            <returns>Human-readable hex string</returns>
        </member>
        <member name="M:ThingMagic.ByteFormat.ToHex(System.Byte[],System.String,System.String)">
            <summary>
            Convert byte array to human-readable hex string; e.g., {0x12, 0x34, 0x56} -> 123456
            </summary>
            <param name="bytes">Byte array to convert</param>
            <param name="prefix">String to place before byte strings</param>
            <param name="separator">String to place between byte strings</param>
            <returns>Human-readable hex string</returns>
        </member>
        <member name="M:ThingMagic.ByteFormat.ToHex(System.UInt16[])">
            <summary>
            Convert u16 array to human-readable hex string; e.g., {0x1234, 0x5678} -> 12345678
            </summary>
            <param name="words">u16 array to convert</param>
            <returns>Human-readable hex string</returns>
        </member>
        <member name="T:ThingMagic.ByteIO">
            <summary>
            Read numeric fields from binary streams
            </summary>
        </member>
        <member name="M:ThingMagic.ByteIO.ReadU16(System.IO.BinaryReader)">
            <summary>
            Read big-endian Uint16 (e.g., firmware file header) from binary _stream
            </summary>
            <param name="src">Binary input _stream</param>
            <returns>Unsigned 16-bit integer</returns>
        </member>
        <member name="M:ThingMagic.ByteIO.ReadU32(System.IO.BinaryReader)">
            <summary>
            Read big-endian Uint32 (e.g., firmware file header) from binary _stream
            </summary>
            <param name="src">Binary input _stream</param>
            <returns>Unsigned 32-bit integer</returns>
        </member>
        <member name="T:ThingMagic.Iso180006bUcode">
            <summary>
            Iso180006bUcode tag-specific constructs
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006bUcode.TagData">
            <summary>
            ISO specific version of TagData.
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006bUcode.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Iso180006bUcode.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="P:ThingMagic.Iso180006bUcode.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="T:ThingMagic.LlrpFirmwareLoadOptions">
            <summary>
            Fixed reader firmware load options
            </summary>
        </member>
        <member name="T:ThingMagic.FixedReaderFirmwareLoadOptions">
            <summary>
            Firmware load options
            </summary>
        </member>
        <member name="T:ThingMagic.FirmwareLoadOptions">
            <summary>
            Firmware load options
            </summary>
        </member>
        <member name="M:ThingMagic.FixedReaderFirmwareLoadOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.FixedReaderFirmwareLoadOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="eContents">true/false</param>
            <param name="rdSettings">true/false</param>
        </member>
        <member name="M:ThingMagic.FixedReaderFirmwareLoadOptions.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.FixedReaderFirmwareLoadOptions.EraseContents">
            <summary>
            Sets the EraseContents
            </summary>
        </member>
        <member name="P:ThingMagic.FixedReaderFirmwareLoadOptions.RevertDefaultSettings">
            <summary>
            Sets the RevertDefaultSettings
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpFirmwareLoadOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpFirmwareLoadOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="eContents">true/false</param>
            <param name="rdSettings">true/false</param>
        </member>
        <member name="T:ThingMagic.Disposable">
            <summary>
            abstraft class which implements the Dispose Pattern
            </summary>
        </member>
        <member name="M:ThingMagic.Disposable.Finalize">
            <summary>
            Finalizer
            </summary>
        </member>
        <member name="M:ThingMagic.Disposable.Dispose">
            <summary>
            Dispose
            </summary>
        </member>
        <member name="M:ThingMagic.Disposable.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="bDisposing">if the object will be disposed</param>
        </member>
        <member name="T:ThingMagic.FeatureNotSupportedException">
            <summary>
            Non-fatal exception used to signal that a feature is not supported,
            therefore any dependent features should also be disabled.
            </summary>
        </member>
        <member name="T:ThingMagic.ReaderException">
            <summary>
            Reader-related exceptions
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderException.#ctor(System.String)">
            <summary>
            Create reader-related exception
            </summary>
            <param name="message">Message explaining exception</param>
        </member>
        <member name="M:ThingMagic.ReaderException.#ctor(System.String,System.Exception)">
            <summary>
            Create reader-related exception
            </summary>
            <param name="message">Message explaining exception</param>
            <param name="innerException">Underlying exception that triggered this exception</param>
        </member>
        <member name="P:ThingMagic.ReaderException.TagReads">
            <summary>
            Tag data
            </summary>
        </member>
        <member name="M:ThingMagic.FeatureNotSupportedException.#ctor(System.String)">
            <summary>
            Create "Feature not supported" exception
            </summary>
            <param name="message">Message explaining exception</param>
        </member>
        <member name="T:ThingMagic.Gen2">
            <summary>
            Gen2 protocol-specific constructs
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Bank">
            <summary>
            Gen2 memory bank identifiers
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.RESERVED">
            <summary>
            Reserved memory contains kill and access passwords
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.EPC">
            <summary>
            EPC memory contains CRC, PC, EPC
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.TID">
            <summary>
            TID memory contains tag implementation identifiers
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.USER">
            <summary>
            User memory is optional, but exists for user-defined data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.GEN2BANKRESERVEDENABLED">
            <summary>
            Used to enable the read of additional membanks - reserved mem bank
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.GEN2BANKEPCENABLED">
            <summary>
            Used to enable the read of additional membanks - epc mem bank
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.GEN2BANKTIDENABLED">
            <summary>
            Used to enable the read of additional membanks - tid mem bank
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Bank.GEN2BANKUSERENABLED">
            <summary>
            Used to enable the read of additional membanks - user mem bank
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Target">
            <summary>
            Gen2 target settings.
            Includes standard A(0) and B(1), as well as
            ThingMagic reader values of A-then-B, and B-then-A
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Target.A">
            <summary>
            Search for tags in State A
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Target.B">
            <summary>
            Search for tags in State B
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Target.AB">
            <summary>
            Search for tags in State A, then switch to B
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Target.BA">
            <summary>
            Search for tags in State B, then switch to A
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Session">
            <summary>
            Gen2 Session settings. 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Session.S0">
            <summary>
            Session 0.
            </summary>        
        </member>
        <member name="F:ThingMagic.Gen2.Session.S1">
            <summary>
            Session 1.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Session.S2">
            <summary>
            Session 2.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Session.S3">
            <summary>
            Session 3.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.TagEncoding">
            <summary>
            Gen2 Tag Encoding.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TagEncoding.FM0">
            <summary>
            FM0.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TagEncoding.M2">
            <summary>
            M = 2.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TagEncoding.M4">
            <summary>
            M = 4.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TagEncoding.M8">
            <summary>
            M = 8.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.DivideRatio">
            <summary>
            Divide Ratio values
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DivideRatio.DR8">
            <summary>
            Divide by 8
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DivideRatio.DR64_3">
            <summary>
            Divide by 64/3
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.TrExt">
            <summary>
            TRext: Include extended preamble in Tag-to-Reader response?
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TrExt.NOPILOTTONE">
            <summary>
            No extension
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.TrExt.PILOTTONE">
            <summary>
            Add pilot tone
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.LockBits">
            <summary>
            Gen2 lock bits, as used in Action and Mask fields of Gen2 Lock command.
            Not exposed to end user -- use friendlier Gen2LockActions instead.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.NONE">
            <summary>
            No action (empty mask)
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.USER_PERM">
            <summary>
            User memory permalock -- set to disallow changes to user memory lock bit
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.USER">
            <summary>
            User memory [write] lock -- set to disallow writes to user memory, clear to allow writes
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.TID_PERM">
            <summary>
            TID memory permalock -- set to disallow changes to TID memory lock bit
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.TID">
            <summary>
            TID memory [write] lock -- set to disallow writes to TID memory, clear to allow writes
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.EPC_PERM">
            <summary>
            EPC memory permalock -- set to disallow changes to EPC memory lock bit
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.EPC">
            <summary>
            EPC memory [write] lock -- set to disallow writes to EPC memory, clear to allow writes
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.ACCESS_PERM">
            <summary>
            Access password memory permalock -- set to disallow changes to access password memory lock bit
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.ACCESS">
            <summary>
            Access password [read/write] lock -- set to disallow read and write of access password, clear to allow read and write
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.KILL_PERM">
            <summary>
            Kill password memory permalock -- set to disallow changes to kill password memory lock bit
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LockBits.KILL">
            <summary>
            Kill password [read/write] lock -- set to disallow read and write of kill password, clear to allow read and write
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.LinkFrequency">
            <summary>
            Gen2 LinkFrequency
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LinkFrequency.LINK250KHZ">
             <summary>
            LinkFrequency=250KHZ
             </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LinkFrequency.LINK320KHZ">
             <summary>
            LinkFrequency=320KHZ
             </summary>
        </member>
        <member name="F:ThingMagic.Gen2.LinkFrequency.LINK640KHZ">
            <summary>
            LinkFrequency=640KHZ
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Tari">
            <summary>
            Gen2 Tari Value
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Tari.TARI_25US">
            <summary>
            Tari = 25us
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Tari.TARI_12_5US">
            <summary>
            Tari = 12.5us
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Tari.TARI_6_25US">
            <summary>
            Tari = 6.25us
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.WriteMode">
            <summary>
            The mode for write operation
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteMode.WORD_ONLY">
            <summary>
            use the standard write only
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteMode.BLOCK_ONLY">
            <summary>
            use BlockWrite only
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteMode.BLOCK_FALLBACK">
            <summary>
            use BlockWrite first, if fail, use standard write
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Password">
            <summary>
            Stores a 32-bit Gen2 password for use as an access or kill password.
            </summary>
        </member>
        <member name="T:ThingMagic.TagAuthentication">
            <summary>
            The TagAuthentication class is a generic superclass for various
            authentication mechanisms for accessing and killing tags. See the
            per-protocol subclasses for details.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Password._value">
            <summary>
            Raw 32-bit password value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Password.#ctor(System.UInt32)">
            <summary>
            Create a new password object
            </summary>
            <param name="password">32-bit Gen2 password</param>
        </member>
        <member name="M:ThingMagic.Gen2.Password.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.Password.Value">
            <summary>
            Get Gen2 native 32-bit password value (read-only)
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Q">
            <summary>
            Abstract Gen2 Q class.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.DynamicQ">
            <summary>
            Gen2 Dynamic Q subclass.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.DynamicQ.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="T:ThingMagic.Gen2.StaticQ">
            <summary>
            Gen2 Static Q subclass.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.StaticQ.InitialQ">
            <summary>
            The Q value to use
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.StaticQ.#ctor(System.Byte)">
            <summary>
            Create a static Q algorithim instance with a particular value.
            </summary>
            <param name="initQ">Q value</param>
        </member>
        <member name="M:ThingMagic.Gen2.StaticQ.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="T:ThingMagic.Gen2.TagData">
            <summary>
            Gen2-specific version of TagData
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Gen2.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="M:ThingMagic.Gen2.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
            <param name="pcBytes">PC value</param>
        </member>
        <member name="P:ThingMagic.Gen2.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.TagData.PcBytes">
            <summary>
            PC (Protocol Control) bits
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Select">
            <summary>
            Representation of a Gen2 Select operation
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Select.Invert">
            <summary>
            Whether tags that meet the comparison are selected or deselected.
            false: Get matching tags.
            true: Drop matching tags.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Select.Bank">
            <summary>
            The memory bank in which to compare the mask
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Select.BitPointer">
            <summary>
            The location (in bits) at which to begin comparing the mask
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Select.BitLength">
            <summary>
            The length (in bits) of the mask
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Select.Mask">
            <summary>
            The mask value to compare with the specified region of tag
            memory, MSB first
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Select.#ctor(System.Boolean,ThingMagic.Gen2.Bank,System.UInt32,System.UInt16,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create Gen2 Select
            </summary>
            <param name="invert"> false: Get matching tags.  true: Drop matching tags.</param>
            <param name="bank">The memory bank in which to compare the mask</param>
            <param name="bitPointer">The location (in bits) at which to begin comparing the mask</param>
            <param name="bitLength">The length (in bits) of the mask</param>
            <param name="mask">The mask value to compare with the specified region of tag memory, MSB first</param>
        </member>
        <member name="M:ThingMagic.Gen2.Select.Matches(ThingMagic.TagData)">
            <summary>
            Test if a tag Matches this filter. Only applies to selects based
            on the EPC.
            </summary>
            <param name="t">tag data to screen</param>
            <returns>Return true to allow tag through the filter.
            Return false to reject tag.</returns>
        </member>
        <member name="M:ThingMagic.Gen2.Select.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:ThingMagic.Gen2.LockAction">
            <summary>
            Gen2 lock action specifier
            </summary>
        </member>
        <member name="T:ThingMagic.TagLockAction">
            <summary>
            Tag locking descriptor, to be implemented in protocol-specific subclasses,
            since each protocol can have radically different lock architectures.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.LockAction.#ctor(System.UInt16,System.UInt16)">
            <summary>
            Create Gen2.LockAction out of raw mask and action bitmasks
            </summary>
            <param name="mask">Lock bits to act on</param>
            <param name="action">Lock bit values</param>
        </member>
        <member name="M:ThingMagic.Gen2.LockAction.#ctor(ThingMagic.Gen2.LockBits,ThingMagic.Gen2.LockBits)">
            <summary>
            Create Gen2.LockAction out of enum-wrapped mask and action bitmasks
            </summary>
            <param name="mask">Lock bits to act on</param>
            <param name="action">Lock bit values</param>
        </member>
        <member name="M:ThingMagic.Gen2.LockAction.#ctor(ThingMagic.Gen2.LockAction[])">
            <summary>
            Create Gen2.LockAction out of other Gen2.LockActions
            </summary>
            <param name="actions">Lock actions to combine.
            If a data field is repeated, the last one takes precedence; e.g.,
            Gen2.LockAction.USER_LOCK, Gen2.LockAction.USER_UNLOCK
            turns into Gen2.LockAction.USER_UNLOCK.</param>
        </member>
        <member name="M:ThingMagic.Gen2.LockAction.Parse(System.String)">
            <summary>
            Convert the string representation into an equivalent object.
            </summary>
            <param name="value">A string containing the name to convert.
            May be the name of a predefined constant, or a comma-separated list of predefined constant names.
            </param>
            <returns>A LockAction whose value is represented by value.</returns>
        </member>
        <member name="M:ThingMagic.Gen2.LockAction.ToString">
            <summary>
            Convert the value of this instance to its equivalent string representation.
            </summary>
            <returns>A string that represents the current object</returns>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.KILL_LOCK">
            <summary>
            Lock Kill Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.KILL_UNLOCK">
            <summary>
            Unlock Kill Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.KILL_PERMALOCK">
            <summary>
            Permanently Lock Kill Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.KILL_PERMAUNLOCK">
            <summary>
            Permanently Unlock Kill Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.ACCESS_LOCK">
            <summary>
            Lock Access Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.ACCESS_UNLOCK">
            <summary>
            Unlock Access Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.ACCESS_PERMALOCK">
            <summary>
            Permanently Lock Access Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.ACCESS_PERMAUNLOCK">
            <summary>
            Permanently Unlock Access Password
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.EPC_LOCK">
            <summary>
            Lock EPC Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.EPC_UNLOCK">
            <summary>
            Unlock EPC Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.EPC_PERMALOCK">
            <summary>
            Permanently Lock EPC Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.EPC_PERMAUNLOCK">
            <summary>
            Permanently Unlock EPC Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.TID_LOCK">
            <summary>
            Lock TID Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.TID_UNLOCK">
            <summary>
            Unlock TID Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.TID_PERMALOCK">
            <summary>
            Permanently Lock TID Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.TID_PERMAUNLOCK">
            <summary>
            Permanently Unlock TID Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.USER_LOCK">
            <summary>
            Lock User Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.USER_UNLOCK">
            <summary>
            Unlock User Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.USER_PERMALOCK">
            <summary>
            Permanently Lock User Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.USER_PERMAUNLOCK">
            <summary>
            Permanently Unlock User Memory Bank
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.Action">
            <summary>
            Action field for M5e Lock Tag command
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.LockAction.Mask">
            <summary>
            Mask field for M5e Lock Tag command
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.WriteData">
            <summary>
            Embedded Tag Operation: Write Data
            </summary>
        </member>
        <member name="T:ThingMagic.TagOp">
            <summary>
            Tag Operations for GEN2 Embbeded Command
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteData.Bank">
            <summary>
            Gen2 memory bank to write to
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteData.WordAddress">
            <summary>
            Word address to start writing at
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.WriteData.Data">
            <summary>
            Data to write
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.WriteData.#ctor(ThingMagic.Gen2.Bank,System.UInt32,System.UInt16[])">
            <summary>
            Constructor to initialize the parameters of WriteData
            </summary>
            <param name="bank">The memory bank to write</param>
            <param name="wordAddress">Write starting address</param>
            <param name="data">The data to write</param>
        </member>
        <member name="T:ThingMagic.Gen2.ReadData">
            <summary>
            Embedded Tag Operation: Read Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.ReadData.Bank">
            <summary>
            Gen2 memory bank to read from
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.ReadData.WordAddress">
            <summary>
            Word address to start reading at
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.ReadData.Len">
            <summary>
            Number of words to read
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.ReadData.#ctor(ThingMagic.Gen2.Bank,System.UInt32,System.Byte)">
            <summary>
            Constructor to initialize the parameters of ReadData
            </summary>
            <param name="bank">The memory bank to read</param>
            <param name="wordAddress">Read starting address</param>
            <param name="length">The length of data to read</param>
        </member>
        <member name="T:ThingMagic.Gen2.SecureTagType">
            <summary>
            Enum SecureTagType Default, Alien Higgs 3 and Monza 4 QT  
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecureTagType.DEFAULT">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecureTagType.HIGGS3">
            <summary>
            Alien Higgs 3 secure access
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecureTagType.MONZA4">
            <summary>
            Monza 4 secure access.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.SecureReadData">
            <summary>
            Embedded Tag Operation: Secure Read Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecureReadData.type">
            <summary>
            Enum SecureTagType Default, Alien Higgs 3 and Monza 4 QT
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecureReadData.password">
            <summary>
            Password
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.SecureReadData.#ctor(ThingMagic.Gen2.Bank,System.UInt32,System.Byte,ThingMagic.Gen2.SecureTagType,ThingMagic.TagAuthentication)">
            <summary>
            Constructor to initialize the parameters of SecureReadData
            </summary>
            <param name="bank">The memory bank to read</param>
            <param name="wordAddress">Read starting address</param>
            <param name="length">The length of data to read</param>
            <param name="type">Secure tag type</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.SecurePasswordLookup">
            <summary>
            Secure Read Data : SecurePasswordLookup
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecurePasswordLookup.SecureAddressLength">
            <summary>
            Number of bits used to address the AP list (MSB byte - byte 4) 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecurePasswordLookup.SecureAddressOffset">
            <summary>
            EPC word offset (Next MSB byte - byte 3) 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.SecurePasswordLookup.SecureFlashOffset">
            <summary>
            User flash offset, starting from 0x0000 (LSB 2 bytes)
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.SecurePasswordLookup.#ctor(System.Byte,System.Byte,System.UInt16)">
            <summary>
            Constructor to initialize the parameters of SecurePasswordLookup
            </summary>
            <param name="addressLength">address the AP list</param>
            <param name="addressOffset">EPC word offset</param>
            <param name="flashOffset">User flash offset</param>
        </member>
        <member name="T:ThingMagic.Gen2.DenatranIAVWriteCredential">
            <summary>
            Denatran IAV write credential
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DenatranIAVWriteCredential.tagId">
            <summary>
            Tag Identification
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DenatranIAVWriteCredential.dataBuf">
            <summary>
            Credentials written word
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.DenatranIAVWriteCredential.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Constructor to initialize the parameters of DenatranIAVWriteCredential
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.DenatranIAVWriteCredential.TagId">
            <summary>
            Tag Identification
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.DenatranIAVWriteCredential.DataBuf">
            <summary>
            Credentials written word
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.DenatranIAVWriteSecCredential">
            <summary>
            Denatran IAV writesec credential
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DenatranIAVWriteSecCredential.data">
            <summary>
            Challenge
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.DenatranIAVWriteSecCredential.credentials">
            <summary>
            Credentials written word
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.DenatranIAVWriteSecCredential.#ctor(System.Byte[],System.Byte[])">
            <summary>
            Constructor to initialize the parameters of DenatranIAVWriteSecCredential
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.DenatranIAVWriteSecCredential.Data">
            <summary>
            Data
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.DenatranIAVWriteSecCredential.Credentials">
            <summary>
            Credentials written word
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Lock">
            <summary>
            Embedded Tag Operation: Lock
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Lock.AccessPassword">
            <summary>
            Access Password
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Lock.LockAction">
            <summary>
            Gen2 Lock Action
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Lock.#ctor(System.UInt32,ThingMagic.Gen2.LockAction)">
            <summary>
            Constructor to initialize the parameters of Lock
            </summary>
            <param name="accessPassword">The access password</param>
            <param name="lockAction">The Gen2 Lock Action</param>
        </member>
        <member name="T:ThingMagic.Gen2.Kill">
             <summary>
            Embedded Tag Operation: Kill
             </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Kill.KillPassword">
            <summary>
            Kill password to use to kill the tag
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Kill.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of Kill
            </summary>
            <param name="killPassword">Kill password to use to kill the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.BAPParameters">
            <summary>
            BAP timing control parameters
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.BAPParameters.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.BAPParameters.POWERUPDELAY">
            <summary>
            Time delay until transmission of first command after interrogator power-up
            For BAP tags to perform effective duty cycling, this value should be several
            msecs.  This value is specified in microseconds and defaults to 3000.
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.BAPParameters.FREQUENCYHOPOFFTIME">
            <summary>
            Time delay between dwells or time duration for RF field off while frequency 
            hopping . This value is specified in microseconds and defaults to 20000.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.WriteTag">
            <summary>
            Write a new ID to a tag.
            </summary>
            
        </member>
        <member name="F:ThingMagic.Gen2.WriteTag.Epc">
            <summary>
            the new tag ID to write
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.WriteTag.#ctor(ThingMagic.Gen2.TagData)">
            <summary>
            Constructor to initialize the parameters of WriteTag
            </summary>
            <param name="epc">the new tag ID to write</param>
            
        </member>
        <member name="T:ThingMagic.Gen2.BlockWrite">
            <summary>
            BlockWrite
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockWrite.Bank">
            <summary>
            the tag memory bank to write to
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockWrite.WordPtr">
            <summary>
            the word address to start writing to
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockWrite.Data">
            <summary>
            the words to write
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.BlockWrite.#ctor(ThingMagic.Gen2.Bank,System.UInt32,System.UInt16[])">
            <summary>
            Constructor to initialize the parameters of BlockWrite
            </summary>
            <param name="bank">Gen2 memory bank to write to</param>
            <param name="wordPtr">the word address to start writing to</param>
            <param name="data">the data to write</param>
        </member>
        <member name="T:ThingMagic.Gen2.BlockPermaLock">
            <summary>
            BlockPermalock
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockPermaLock.ReadLock">
            <summary>
            Read or Lock?
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockPermaLock.Bank">
            <summary>
            the tag memory bank to lock
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockPermaLock.BlockPtr">
            <summary>
            the staring word address to lock
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockPermaLock.BlockRange">
            <summary>
            number of 16 blocks
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockPermaLock.Mask">
            <summary>
            the Mask
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.BlockPermaLock.#ctor(System.Byte,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt16[])">
            <summary>
            Constructor to initialize the parameters of BlockPermaLock
            </summary>
            <param name="readLock">Read or Lock?</param>
            <param name="bank">Gen2 Memory Bank to perform Lock</param>
            <param name="blockPtr">starting address of the blocks to operate</param>
            <param name="blockRange">number of 16 blocks</param>
            <param name="mask">mask</param>
        </member>
        <member name="T:ThingMagic.Gen2.BlockErase">
            <summary>
            BlockErase
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockErase.Bank">
            <summary>
            the tag memory bank to erase
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockErase.WordPtr">
            <summary>
            the word address to start erase to
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.BlockErase.WordCount">
            <summary>
            no of words to erase
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.BlockErase.#ctor(ThingMagic.Gen2.Bank,System.UInt32,System.Byte)">
            <summary>
            Erase tag specific block
            </summary>
            <param name="bank">the tag memory bank to erase</param>
            <param name="wordPtr">the word address to start erase to</param>
            <param name="wordCount">no of words to erase</param>
        </member>
        <member name="T:ThingMagic.Gen2.Gen2CustomTagOp">
            <summary>
            Gen2CustomTagOp
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Gen2CustomTagOp.ChipType">
            <summary>
            Chip Type
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Alien">
            <summary>
            Alien vendor type
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs2">
            <summary>
            Higgs2
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs2.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage">
            <summary>
            Higgs2PartialLoadImage
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage.AccessPassword">
            <summary>
            The access password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage.KillPassword">
            <summary>
            The kill password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage.Epc">
            <summary>
            The EPC to write to the tag. Maximum of 12 bytes (96 bits)
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage.#ctor(System.UInt32,System.UInt32,System.Byte[])">
            <summary>
            Constructor to initialize the parameters of WriteTag
            </summary>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage">
            <summary>
            Higgs2FullLoadImage
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.AccessPassword">
            <summary>
            The access password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.KillPassword">
            <summary>
            The kill password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.LockBits">
            <summary>
            The lock bits to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.PCWord">
            <summary>
            The PC word to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.Epc">
            <summary>
            The EPC to write to the tag. Maximum of 12 bytes (96 bits)
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs2.FullLoadImage.#ctor(System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.Byte[])">
            <summary>
            Constructor to initialize the parameters of FullLoadImage
            </summary>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="lockBits">the lock bits to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs3">
            <summary>
            Higgs3
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs3.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage">
            <summary>
            Higgs3FastLoadImage
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.CurrentAccessPassword">
            <summary>
            The access password to use to write to the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.AccessPassword">
            <summary>
            The access password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.KillPassword">
            <summary>
            The kill password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.PCWord">
            <summary>
            The PC word to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.Epc">
            <summary>
            The EPC to write to the tag. Maximum of 12 bytes (96 bits)
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs3.FastLoadImage.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[])">
            <summary>
            Constructor to initialize the parameters of FastLoadImage
            </summary>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Must be exactly 12 bytes (96 bits)</param>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs3.LoadImage">
            <summary>
            Higgs3FastLoadImage
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.LoadImage.CurrentAccessPassword">
            <summary>
            The access password to use to write to the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.LoadImage.AccessPassword">
            <summary>
            The access password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.LoadImage.KillPassword">
            <summary>
            The kill password to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.LoadImage.PCWord">
            <summary>
            The PC word to write on the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.LoadImage.EpcAndUserData">
            <summary>
            The EPC to write to the tag. Maximum of 12 bytes (96 bits)
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs3.LoadImage.#ctor(System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[])">
            <summary>
            Constructor to initialize the parameters of FastLoadImage
            </summary>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epcAndUserData">
            the EPC and user data to write to the
            tag. Must be exactly 76 bytes. The pcWord specifies which of this
            is EPC and which is user data.
            </param>
        </member>
        <member name="T:ThingMagic.Gen2.Alien.Higgs3.BlockReadLock">
            <summary>
            Higgs3BlockReadLock
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.BlockReadLock.AccessPassword">
            <summary>
            The access password to use to write to the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Alien.Higgs3.BlockReadLock.LockBits">
            <summary>
            A bitmask of bits to lock. Valid range 0-255
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Alien.Higgs3.BlockReadLock.#ctor(System.UInt32,System.Byte)">
            <summary>
            Constructor to initialize the parameters of Higgs3BlockReadLock
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="lockBits">a bitmask of bits to lock. Valid range 0-255</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS">
            <summary>
            IDS Microchip Custom Gen2 Tag Operations
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A">
            <summary>
            SL900A Sensor Logging Chip Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.CommandCode">
            <summary>
            Custom Command Code
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessPassword">
            <summary>
            Gen2 access password
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Password">
            <summary>
            IDS SL900A Password
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.PasswordLevel">
            <summary>
            Access level to which SL900A password applies
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.#ctor(System.Byte)">
            <summary>
            Default constructor
            <param name="commandCode">Custom command code</param>
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.#ctor(System.Byte,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Constructor to initialize commandcode, password and passwordlevel
            </summary>
            <param name="commandCode">Custom command code</param>
            <param name="passwordLevel">Passwordlevel</param>
            <param name="password">Password</param>                
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.Sensor">
            <summary>
            SL900A sensor type values
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Sensor.TEMP">
            <summary>
            Reserved memory contains kill and access passwords
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Sensor.EXT1">
            <summary>
            EPC memory contains CRC, PC, EPC
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Sensor.EXT2">
            <summary>
            TID memory contains tag implementation identifiers
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Sensor.BATTV">
            <summary>
            User memory is optional, but exists for user-defined data
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.Level">
            <summary>
            SL900A password access level values
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Level.NOT_ALLOWED">
            <summary>
            No access to any protected area
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Level.SYSTEM">
            <summary>
            System area access
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Level.APPLICATION">
            <summary>
            Application area access
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Level.MEASUREMENT">
            <summary>
            Measurement area access
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.LoggingForm">
            <summary>
            Data log format selection
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.DENSE">
            <summary>
            Dense Logging
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.OUTOFLIMITS">
            <summary>
            Log values outside specified limits
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.LIMITSCROSSING">
            <summary>
            Log values at limit crossing points
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.IRQ1">
            <summary>
            Trigger log on EXT1 input
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.IRQ2">
            <summary>
            Trigger log on EXT2 input
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LoggingForm.IRQ1IRQ2">
            <summary>
            Trigger log on EXT1 and EXT2 input
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.StorageRule">
            <summary>
            Logging memory-full behavior
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.StorageRule.NORMAL">
            <summary>
            Stop logging when memory fills
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.StorageRule.ROLLING">
            <summary>
            Roll around (circular buffer) when memory fills
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.DelayMode">
            <summary>
            Data log memory-full behavior
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.DelayMode.TIMER">
            <summary>
            Start logging after delay time
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.DelayMode.EXTSWITCH">
            <summary>
            Start logging on external input
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.BatteryType">
            <summary>
            Request the battery type re-check
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.BatteryType.CHECK">
            <summary>
            Default
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.BatteryType.RECHECK">
            <summary>
            Application requested for the re-check of battery type
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.ApplicationData">
            <summary>
            Logging memory configuration
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ApplicationData.#ctor">
            <summary>
            Create default ApplicationData
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ApplicationData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create ApplicationData
            </summary>
            <param name="reply">Raw reply message</param>
            <param name="offset">Start index of raw value within reply</param>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.ApplicationData.Raw">
            <summary>
            Raw 16-bit protocol value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ApplicationData.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ApplicationData.NumberOfWords">
            <summary>
            Number of user bank memory words to reserve for non-logging purposes 
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ApplicationData.BrokenWordPointer">
            <summary>
            Broken word pointer
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.CalibrationData">
            <summary>
            Calibration parameters
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Raw">
            <summary>
            Raw 56-bit Calibration data value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.CalibrationData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create CalibrationData object from raw 2-byte reply
            </summary>
            <param name="reply">Raw reply message</param>
            <param name="offset">Start index of raw value within reply</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.CalibrationData.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Ad1">
            <summary>
            AD1 lower voltage reference - fine - DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Coarse1">
            <summary>
            AD1 lower voltage reference - coarse
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Ad2">
            <summary>
            AD2 lower voltage reference - fine - DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Coarse2">
            <summary>
            AD2 lower voltage reference - coarse
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.GndSwitch">
            <summary>
            Switches the lower AD voltage reference to ground
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Selp12">
            <summary>
            POR voltage level for 1.5V system
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Adf">
            <summary>
            Main reference voltage calibration -- DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Df">
            <summary>
            RTC oscillator calibration
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.SwExtEn">
            <summary>
            Controlled battery supply for external sensor - the battery voltage is connected to the EXC pin
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Selp22">
            <summary>
            POR voltage level for 3V system
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Irlev">
            <summary>
            Voltage level interrupt level for external sensor -- ratiometric
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.RingCal">
            <summary>
            Main system clock oscillator calibration -- DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.OffInt">
            <summary>
            Temperature conversion offset calibration -- DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.Reftc">
            <summary>
            Bandgap voltage temperature coefficient calibration -- DO NOT MODIFY
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.ExcRes">
            <summary>
            Excitate for resistive sensors without DC
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.CalibrationData.RFU">
            <summary>
             Reserved for Future Use
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SfeParameters">
            <summary>
            Sensor Front End Parameters
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SfeParameters.Raw">
            <summary>
            Raw 16-bit SFE parameters value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SfeParameters.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create SFEParameters object from raw 2-byte reply
            </summary>
            <param name="reply">Raw reply message</param>
            <param name="offset">Start index of raw value within reply</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SfeParameters.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.Rang">
            <summary>
            External sensor 2 range
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.Seti">
            <summary>
            External sensor 1 range
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.Ext1">
            <summary>
            External sensor 1 type
              00 -- linear resistive sensor
              01 -- high impedance input (voltage follower), bridge
              10 -- capacitive sensor with DC
              11 -- capacitive or resistive sensor without DC
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.Ext2">
            <summary>
            External sensor 2 type
              00 -- linear conductive sensor
              01 -- high impedance input (voltage follower), bridge
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.AutorangeDisable">
            <summary>
            Use preset range
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SfeParameters.VerifySensorID">
            <summary>
            Sensor used in limit check
              00 - first selected sensor
              01 -- second selected sensor
              10 -- third selected sensor
              11 -- fourth selected sensor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.CalSfe">
            <summary>
            Combination Calibration Data / SFE Parameters object
            (as received from Get Calibration Data command)
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.CalSfe.Cal">
            <summary>
            Calibration Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.CalSfe.Sfe">
            <summary>
            Sensor Front End Parameters
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.CalSfe.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create Calibration Data / SFE Parameter object from raw 72-bit reply
            </summary>
            <param name="reply"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.CalSfe.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.Delay">
            <summary>
            Delay Time structure for Initialize command
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Delay.Raw">
            <summary>
            Raw 16-bit protocol value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.Delay.#ctor">
            <summary>
            Create default Delay setting
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.Delay.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create Delay setting
            </summary>
            <param name="reply">Raw reply message</param>
            <param name="offset">Start index of raw value within reply</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.Delay.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.Delay.Mode">
            <summary>
            Logging start mode
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.Delay.Time">
            <summary>
            Logging timer delay value (units of 512 seconds)
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.Delay.IrqTimerEnable">
            <summary>
            Trigger log on both timer and external interrupts?
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.LimitCounter">
            <summary>
            Sensor limit excursion counters
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LimitCounter.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create LimitCounter reply object
            </summary>
            <param name="reply">Raw response containing 4-byte Limit Counter string</param>
            <param name="offset">Index of byte where Limit Counter string starts</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LimitCounter.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LimitCounter.ExtremeLower">
            <summary>
            Number of times selected sensor has gone beyond extreme lower limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LimitCounter.Lower">
            <summary>
            Number of times selected sensor has gone beyond lower limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LimitCounter.Upper">
            <summary>
            Number of times selected sensor has gone beyond upper limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LimitCounter.ExtremeUpper">
            <summary>
            Number of times selected sensor has gone beyond extreme upper limit
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.LogState">
            <summary>
            Get Log State reply
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogState.#ctor(System.Byte[])">
            <summary>
            Create Get Log state reply object
            </summary>
            <param name="reply">Raw 9 or 21-bit Get Log State reply</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogState.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.RemainingShelfLife">
            <summary>
            Remaining shelf life
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.ShelfLifeBlock0">
            <summary>
            ShelfLifeBlock0
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.ShelfLifeBlock1">
            <summary>
            ShelfLifeBlock1
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.LimitCount">
            <summary>
            Number of excursions beyond set limits
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.SystemStat">
            <summary>
            Logging system status
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogState.StatFlags">
            <summary>
            Logging status flags
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SensorReading">
            <summary>
            IDS SL900A Get Sensor Value reply value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SensorReading.#ctor(System.UInt16)">
            <summary>
            Create Get Sensor Value reply object
            </summary>
            <param name="reply">Raw 16-bit Get Sensor Value response</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SensorReading.#ctor(System.Byte[])">
            <summary>
            Create Get Sensor Value reply object
            </summary>
            <param name="reply">Raw 16-bit Get Sensor Value response (as 2-byte, big-endian array)</param>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SensorReading.Raw">
            <summary>
            Raw sensor reply
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SensorReading.ADError">
            <summary>
            Did A/D conversion error occur?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SensorReading.RangeLimit">
            <summary>
            5-bit Range/Limit value
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SensorReading.Value">
            <summary>
            10-bit Sensor value
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading">
            <summary>
            IDS SL900A Get Battery Level reply value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.#ctor(System.UInt16)">
            <summary>
            Create Get Battery Level reply object
            </summary>
            <param name="reply">Raw 16-bit Get Battery Level response</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.#ctor(System.Byte[])">
            <summary>
            Create Get Battery Level reply object
            </summary>
            <param name="reply">Raw 16-bit Get Battery Level response (as 2-byte, big-endian array)</param>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.Raw">
            <summary>
            Raw Battery level reply
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.ADError">
            <summary>
            Did A/D conversion error occur?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.BatteryType">
            <summary>
            1-bit Battery Type
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.BatteryLevelReading.Value">
            <summary>
            10-bit Battery Level value
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.StatusFlags">
            <summary>
            Log Status Flags
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.StatusFlags.#ctor(System.Byte)">
            <summary>
            Crate StatusFlags object from raw 1-byte reply
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.StatusFlags.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.Active">
            <summary>
            Logging active?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.Full">
            <summary>
            Measurement area full?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.Overwritten">
            <summary>
            Measurement overwritten?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.ADError">
            <summary>
            A/D error occurred?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.LowBattery">
            <summary>
            Low battery?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.ShelfLifeLow">
            <summary>
            Shelf life low error?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.ShelfLifeHigh">
            <summary>
            Shelf life high error?
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.StatusFlags.ShelfLifeExpired">
            <summary>
            Shelf life expired?
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SystemStatus">
            <summary>
            Logging System Status
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SystemStatus.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create SystemStatus reply object
            </summary>
            <param name="reply">Raw response containing 4-byte System Status string</param>
            <param name="offset">Index of byte where System Status string starts</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SystemStatus.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SystemStatus.MeasurementAddressPointer">
            <summary>
            Measurement Address Pointer
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SystemStatus.NumMemReplacements">
            <summary>
            Number of memory replacements
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SystemStatus.NumMeasurements">
            <summary>
            Number of measurements
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SystemStatus.Active">
            <summary>
            Active
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData">
             <summary>
             Measurement Setup Data object
            (as received from Get Measurement Setup Data command)
             </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.logLimits">
            <summary>
            Log Limits Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.logModeData">
            <summary>
            Log Mode Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.DelayData">
            <summary>
            Delay Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.AppData">
            <summary>
            Application Data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.LogInterval">
            <summary>
            Time (seconds) between log readings
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.StartTime">
            <summary>
            Start Time
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.#ctor(System.Byte[])">
            <summary>
            Create Measurement Setup Data object from raw 16 byte reply
            </summary>
            <param name="reply"></param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create Measurement Setup Data object from raw 16 byte reply
            </summary>
            <param name="reply"></param>
            <param name="offset"></param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.MeasurementSetupData.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.LogLimit">
            <summary>
            Log limit parameters
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.LogLimit.Raw">
            <summary>
            Raw 64 bit data
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogLimit.#ctor">
            <summary>
            Create LogLimit reply object
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogLimit.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create LogLimit reply object
            </summary>
            <param name="reply">Raw reply message</param>
            <param name="offset">Start index of raw value within reply</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogLimit.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogLimit.EXTREMELOWERLIMIT">
            <summary>
            Number of times selected sensor has gone beyond extreme lower limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogLimit.LOWERLIMIT">
            <summary>
            Number of times selected sensor has gone beyond lower limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogLimit.UPPERLIMIT">
            <summary>
            Number of times selected sensor has gone beyond upper limit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogLimit.EXTREMEUPPERLIMIT">
            <summary>
            Number of times selected sensor has gone beyond extreme upper limit
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.GetSensorValue">
            <summary>
            SL900A Get Sensor Value Tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.GetSensorValue.SensorType">
            <summary>
            Which sensor to read
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetSensorValue.#ctor(ThingMagic.Gen2.IDS.SL900A.Sensor)">
            <summary>
            Constructor to initialize the parameters of GetSensorValue
            </summary>
            <param name="sensorType">Which sensor to read</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetSensorValue.#ctor(ThingMagic.Gen2.IDS.SL900A.Sensor,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Constructor to initialize the parameters of GetSensorValue
            </summary>
            <param name="sensorType">Which sensor to read</param>
            <param name="passwordLevel">password level</param>
            <param name="password">password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.AccessFifo">
            <summary>
            SL900A Access FIFO Tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifo.Subcommand">
            <summary>
            AccessFifo subcommand code
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifo.#ctor">
            <summary>
            Create AccessFifo tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifo.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create AccessFifo tagop
            </summary>
            <param name="passwordLevel">password level</param>
            <param name="password">password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.AccessFifo.SubcommandCode">
            <summary>
            AccessFifo subcommand values
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifo.SubcommandCode.READ">
            <summary>
            Read from FIFO
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifo.SubcommandCode.WRITE">
            <summary>
            Write to FIFO
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifo.SubcommandCode.STATUS">
            <summary>
            Get FIFO status
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.AccessFifoStatus">
            <summary>
            AccessFifo "Read Status" tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoStatus.#ctor">
            <summary>
            Create AccessFifo "Read Status" tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoStatus.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create AccessFifo "Read Status" tagop
            </summary>
            <param name="passwordLevel">password level</param>
            <param name="password">password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.AccessFifoRead">
            <summary>
            AccessFifo "Read" tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifoRead.Length">
            <summary>
            Number of bytes to read from FIFO
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoRead.#ctor(System.Byte)">
            <summary>
            Create AccessFifo "Read" tagop
            </summary>
            <param name="length">Number of bytes to read from FIFO</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoRead.#ctor(System.Byte,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create AccessFifo "Read" tagop
            </summary>
            <param name="length">Number of bytes to read from FIFO</param>
            <param name="passwordLevel">password level</param>
            <param name="password">password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.FifoSource">
            <summary>
            Source of FIFO data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.FifoSource.SPI">
            <summary>
            Data from SPI
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.FifoSource.RFID">
            <summary>
            Data from RFID
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.AccessFifoWrite">
            <summary>
            AccessFifo "Write" tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.AccessFifoWrite.Payload">
            <summary>
            Bytes to write to FIFO
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoWrite.#ctor(System.Byte[])">
            <summary>
            Create AccessFifo "Write" tagop
            </summary>
            <param name="payload">Bytes to write to FIFO</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.AccessFifoWrite.#ctor(System.Byte[],ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create AccessFifo "Write" tagop
            </summary>
            <param name="payload">Bytes to write to FIFO</param>
            <param name="passwordLevel">password level</param>
            <param name="password">password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.FifoStatus">
            <summary>
            FIFO Status return value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.FifoStatus.#ctor(System.Byte)">
            <summary>
            Create FifoStatus object from AccessFifo Status return value
            </summary>
            <param name="reply">8-bit reply from AccessFifo "Read Status" command</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.FifoStatus.#ctor(System.Byte[])">
            <summary>
            Create FIFO Status reply object
            </summary>
            <param name="reply">Raw 8-bit FIFO Status response (in byte array)</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.FifoStatus.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.Raw">
            <summary>
            Raw 8-bit response from AccessFifo Status command
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.FifoBusy">
            <summary>
            FIFO Busy bit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.DataReady">
            <summary>
            Data Ready bit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.NoData">
            <summary>
            No Data bit
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.Source">
            <summary>
            Data Source bit (SPI, RFID)
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.FifoStatus.NumValidBytes">
            <summary>
            Number of valid bytes in FIFO register
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetLogMode">
            <summary>
            SL900A Set Log Mode Tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetLogMode.#ctor">
            <summary>
            Create Set Log Mode Tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetLogMode.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create Set Log Mode Tagop
            </summary>
            <param name="passwordLevel">Password level</param> 
            <param name="password">Password</param>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.Form">
            <summary>
            Logging Format
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.Storage">
            <summary>
            Log Memory-Full Behavior
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.Ext1Enable">
            <summary>
            Enable log for EXT1 external sensor
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.Ext2Enable">
            <summary>
            Enable log for EXT2 external sensor
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.TempEnable">
            <summary>
            Enable log for temperature sensor
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogMode.BattEnable">
            <summary>
            Enable log for battery sensor
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.SetLogMode.LogInterval">
            <summary>
            Time (seconds) between log readings
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.Initialize">
            <summary>
            SL900A Initialize Tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.Initialize.#ctor">
            <summary>
             Create Initialize tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.Initialize.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
             Create Initialize tagop
            </summary>
            <param name="passwordLevel">Password level</param> 
            <param name="password">Password</param>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Initialize.DelayTime">
            <summary>
            Log start delay settings
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.Initialize.AppData">
            <summary>
            Log memory configuration
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.StartLog">
            <summary>
            SL900A Start Log tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.StartLog.#ctor(System.DateTime)">
            <summary>
            Create Start Log tagop
            </summary>
            <param name="startTime">Starting time</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.StartLog.#ctor(System.DateTime,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create Start Log tagop
            </summary>
            <param name="startTime">Starting time</param>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>                    
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.StartLog.StartTime">
            <summary>
            Time to initialize log timestamp counter with
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.EndLog">
            <summary>
            SL900A End Log tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.EndLog.#ctor">
            <summary>
            Create EndLog tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.EndLog.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create EndLog tagop
            </summary>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.GetLogState">
            <summary>
            SL900A Get Log State tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetLogState.#ctor">
            <summary>
            Create GetLogState tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetLogState.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create GetLogState tagop
            </summary>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.GetCalibrationData">
            <summary>
            SL900A Get Calibration Data tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetCalibrationData.#ctor">
            <summary>
            Create GetCalibrationData tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetCalibrationData.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create GetCalibrationData tagop
            </summary>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetCalibrationData">
            <summary>
            SL900A Set Calibration Data tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetCalibrationData.Cal">
            <summary>
            Calibration Data
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetCalibrationData.#ctor(ThingMagic.Gen2.IDS.SL900A.CalibrationData)">
            <summary>
            Create SetCalibrationData tagop
            </summary>
            <param name="cal">Calibration data acquired from Get Calibration Data.
            Must read data from tag first to avoid changing "DO NOT MODIFY" fields.</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetCalibrationData.#ctor(ThingMagic.Gen2.IDS.SL900A.CalibrationData,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create SetCalibrationData tagop
            </summary>
            <param name="cal">Calibration data acquired from Get Calibration Data.
            Must read data from tag first to avoid changing "DO NOT MODIFY" fields.</param>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetSfeParameters">
            <summary>
            SL900A Set SFE Parameters tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetSfeParameters.Sfe">
            <summary>
            Calibration Data
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetSfeParameters.#ctor(ThingMagic.Gen2.IDS.SL900A.SfeParameters)">
            <summary>
            Create SetSfeParameters tagop
            </summary>
            <param name="sfe">SFE parameters acquired from Get Calibration Data.
            Must read data from tag first to avoid changing "DO NOT MODIFY" fields.</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetSfeParameters.#ctor(ThingMagic.Gen2.IDS.SL900A.SfeParameters,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create SetSfeParameters tagop
            </summary>
            <param name="sfe">SFE parameters acquired from Get Calibration Data.
            Must read data from tag first to avoid changing "DO NOT MODIFY" fields.</param>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.GetBatteryLevel">
            <summary>
            SL900A Get Battery Level Tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.GetBatteryLevel.batteryType">
            <summary>
            enum BatterType, re-check or default
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetBatteryLevel.#ctor(ThingMagic.Gen2.IDS.SL900A.BatteryType)">
            <summary>
            Constructor to initialize the parameters of GetBatteryLevel
            </summary>
            <param name="batteryType">enum</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetBatteryLevel.#ctor(ThingMagic.Gen2.IDS.SL900A.BatteryType,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Constructor to initialize the parameters of GetBatteryLevel
            </summary>
            <param name="batteryType">enum</param>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.GetMeasurementSetup">
            <summary>
            SL900A Get Measurement Setup Tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetMeasurementSetup.#ctor">
            <summary>
            Create GetMeasurementSetup tagop
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.GetMeasurementSetup.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create GetMeasurementSetup tagop
            </summary>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.LogModeData">
            <summary>
            SL900A  Log Mode Data
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogModeData.#ctor(System.Byte)">
            <summary>
            Create LogModeData object from Measurement Setup Data return value
            </summary>
            <param name="reply">8-bit reply from Measurement Setup Data command</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogModeData.#ctor(System.Byte[])">
            <summary>
            Create LogModeData reply object
            </summary>
            <param name="reply">Raw 8-bit LogModeData response (in byte array)</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.LogModeData.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.Raw">
            <summary>
            Raw 8-bit response from Measurement Setup Data command
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.Form">
            <summary>
            Logging Format
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.Storage">
            <summary>
            Log Memory-Full Behavior
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.Ext1Enable">
            <summary>
            Enable log for EXT1 external sensor
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.Ext2Enable">
            <summary>
            Enable log for EXT2 external sensor
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.TempEnable">
            <summary>
            Enable log for temperature sensor
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.LogModeData.BattEnable">
            <summary>
            Enable log for battery sensor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetPassword">
            <summary>
            SL900A Set Password Tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetPassword.newPassword">
            <summary>
            IDS SL900A Password
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetPassword.newPasswordLevel">
            <summary>
            Access level to which SL900A password applies
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetPassword.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
             Create Set password
            </summary>
            <param name="passwordLevel">New password level to be written on the tag</param>
            <param name="password">New password to be written on the tag</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetPassword.#ctor(ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
             Create Set password
            </summary>
            <param name="currentPasswordLevel">Current password level on the tag</param>
            <param name="currentPassword">Current password on the tag</param>
            <param name="passwordLevel">New password level to be written on the tag</param>
            <param name="password">New password to be written on the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetLogLimit">
            <summary>
            SL900A Set log limit tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetLogLimit.LogLimits">
            <summary>
            Log limits data
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetLogLimit.#ctor(ThingMagic.Gen2.IDS.SL900A.LogLimit)">
            <summary>
            Create SetLogLimit tagop
            </summary>
            /// <param name="logLimits">Log limits data</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetLogLimit.#ctor(ThingMagic.Gen2.IDS.SL900A.LogLimit,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Create SetLogLimit tagop
            </summary>
            <param name="logLimits">Log limits data</param>
            <param name="passwordLevel">Password level</param>
            <param name="password">Password</param>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0">
            <summary>
            ShelfLifeBlock0 values are intended as reference information purpose for the interrogator.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.Raw">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create ShelfLifeBlock0 reply object
            </summary>
            <param name="value">Raw response containing 4-byte ShelfLifeBlock0</param>
            <param name="offset">Index of byte where ShelfLifeBlock0 starts</param>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.TMAX">
            <summary>
            Maximum temperature for the product
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.TMIN">
            <summary>
            Minimum temperature for the product
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.TSTD">
            <summary>
            Normal temperature
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0.EA">
            <summary>
            Activation energy
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1">
            <summary>
            ShelfLifeBlock1 holds the information on the initial shelf life and initial temperature.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.Raw">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.#ctor">
            <summary>
            Default Constructor
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.#ctor(System.Byte[],System.Int32)">
            <summary>
            Create ShelfLifeBlock1 reply object
            </summary>
            <param name="value">Raw response containing 4-byte ShelfLifeBlock1</param>
            <param name="offset">Index of byte where ShelfLifeBlock1 starts</param>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.SLINIT">
            <summary>
            Initial shelf life
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.TINIT">
            <summary>
            Initial temperature used in shelf life calculation
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.SENSORID">
            <summary>
            Sensor used for shelf life calculation
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.ENABLENEGATIVE">
            <summary>
            Enables negative value for shelf life
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.ENABLEALGORITHM">
            <summary>
            Enables shelf life algorithm
            </summary>
        </member>
        <member name="P:ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1.RFU">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.IDS.SL900A.SetShelfLife">
            <summary>
            SL900A Get Battery Level Tagop
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetShelfLife.shelfLifeBlock0">
            <summary>
            
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.IDS.SL900A.SetShelfLife.shelfLifeBlock1">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetShelfLife.#ctor(ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0,ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1)">
            <summary>
            Constructor to initialize the parameters of ShelfLife
            </summary>
            <param name="slBlock0">ShelfLifeBlock0</param>
            <param name="slBlock1">ShelfLifeBlock1</param>
        </member>
        <member name="M:ThingMagic.Gen2.IDS.SL900A.SetShelfLife.#ctor(ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock0,ThingMagic.Gen2.IDS.SL900A.ShelfLifeBlock1,ThingMagic.Gen2.IDS.SL900A.Level,System.UInt32)">
            <summary>
            Constructor to initialize the parameters of ShelfLife
            </summary>
            <param name="slBlock0">ShelfLifeBlock0</param>
            <param name="slBlock1">ShelfLifeBlock1</param>
            <param name="passwordLevel">PasswordLevel</param>
            <param name="password">Password</param>                    
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp">
            <summary>
            NXP Gen2 Tag Operation
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NxpGen2TagOp.AccessPassword">
            <summary>
            The access password to use to write to the tag
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.#ctor">
            <summary>
            Default constructor to initialize the parameters
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp.SetReadProtect">
            <summary>
            NxpSetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.SetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpSetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>            
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp.ResetReadProtect">
            <summary>
            NxpSetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.ResetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>          
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp.ChangeEas">
            <summary>
            NxpChangeEas
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NxpGen2TagOp.ChangeEas.Reset">
            <summary>
            EAS
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.ChangeEas.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect 9676398256
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="reset">true to reset the EAS, false to set it</param>             
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp.EasAlarm">
            <summary>
            NxpChangeEas
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NxpGen2TagOp.EasAlarm.DivideRatio">
            <summary>
            Gen2 divide ratio
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NxpGen2TagOp.EasAlarm.TagEncoding">
            <summary>
            Gen2 TagEncoding 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NxpGen2TagOp.EasAlarm.TrExt">
            <summary>
            Gen2 TrExt value
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.EasAlarm.#ctor(ThingMagic.Gen2.DivideRatio,ThingMagic.Gen2.TagEncoding,ThingMagic.Gen2.TrExt)">
            <summary>
            Constructor to initialize the parameters of NxpEasAlarm
            </summary>
            <param name="dr">Gen2 divide ratio to use</param>
            <param name="m">Gen2 M parameter to use</param>
            <param name="trExt">Gen2 TrExt value to use</param>
        </member>
        <member name="T:ThingMagic.Gen2.NxpGen2TagOp.Calibrate">
            <summary>
            NxpCalibrate
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NxpGen2TagOp.Calibrate.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpCalibrate
            </summary>
            <param name="accessPassword">the access password</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP">
            <summary>
            NXP vendor type
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X">
            <summary>
            G2X class
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X.SetReadProtect">
            <summary>
            SetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.SetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpSetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>            
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X.ResetReadProtect">
            <summary>
            ResetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.ResetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X.ChangeEas">
            <summary>
            ChangeEas
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.ChangeEas.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect 9676398256
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="reset">true to reset the EAS, false to set it</param>             
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X.EasAlarm">
            <summary>
            EasAlarm
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.EasAlarm.#ctor(ThingMagic.Gen2.DivideRatio,ThingMagic.Gen2.TagEncoding,ThingMagic.Gen2.TrExt)">
            <summary>
            Constructor to initialize the parameters of NxpEasAlarm
            </summary>
            <param name="dr">Gen2 divide ratio to use</param>
            <param name="m">Gen2 M parameter to use</param>
            <param name="trExt">Gen2 TrExt value to use</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2X.Calibrate">
            <summary>
            NxpCalibrate
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2X.Calibrate.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpCalibrate
            </summary>
            <param name="accessPassword">the access password</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I">
            <summary>
            G2I class
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.SetReadProtect">
            <summary>
            SetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.SetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpSetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>            
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.ResetReadProtect">
            <summary>
            ResetReadProtect
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ResetReadProtect.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.ChangeEas">
            <summary>
            ChangeEas
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ChangeEas.#ctor(System.UInt32,System.Boolean)">
            <summary>
            Constructor to initialize the parameters of NxpResetReadProtect 9676398256
            </summary>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="reset">true to reset the EAS, false to set it</param>             
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.EasAlarm">
            <summary>
            EasAlarm
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.EasAlarm.#ctor(ThingMagic.Gen2.DivideRatio,ThingMagic.Gen2.TagEncoding,ThingMagic.Gen2.TrExt)">
            <summary>
            Constructor to initialize the parameters of NxpEasAlarm
            </summary>
            <param name="dr">Gen2 divide ratio to use</param>
            <param name="m">Gen2 M parameter to use</param>
            <param name="trExt">Gen2 TrExt value to use</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.Calibrate">
            <summary>
            NxpCalibrate
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.Calibrate.#ctor(System.UInt32)">
            <summary>
            Constructor to initialize the parameters of NxpCalibrate
            </summary>
            <param name="accessPassword">the access password</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.ChangeConfig">
            <summary>
            NXP Config Change
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ChangeConfig.ConfigWord">
            <summary>
            configuration word
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ChangeConfig.#ctor(System.UInt32,ThingMagic.Gen2.NXP.G2I.ConfigWord)">
            <summary>
            Constructor to initialize parameters of NxpConfigChange
            </summary>
            <param name="accessPassword">the access password</param>
            <param name="configWord">Config Word</param>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ChangeConfig.SetConfigWord(ThingMagic.Gen2.NXP.G2I.ConfigWord)">
            <summary>
            Format the config word
            </summary>
            <param name="inputData">input data</param>
        </member>
        <member name="T:ThingMagic.Gen2.NXP.G2I.ConfigWord">
            <summary>
            ConfigWord
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.PsfAlarm">
            <summary>PSF alarm flag (Permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ReadProtectTID">
            <summary>Read protect TID bank (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ReadProtectEPC">
            <summary>Read protect EPC bank (Permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ReadProtectUser">
            <summary>Read protect User memory bank (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.PrivacyMode">
            <summary>Read range reduction on/off (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.DigitalOutput">
            <summary>Digital output (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.MaxBackscatterStrength">
            <summary>Maximum backscatter strength (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ConditionalReadRangeReduction_openShort">
            <summary>Conditional Read Range Reduction open/short (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ConditionalReadRangeReduction_onOff">
            <summary>Conditional Read Range Reduction on/off (permanently stored in tag memory)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.DataMode">
            <summary>Transparent mode data/raw (reset at power up)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.TransparentMode">
            <summary>Transparent mode on/off (reset at power up)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.InvertDigitalOutput">
            <summary>Invert digital output (reset at power up)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.RFU3">
            <summary>RFU 3/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.RFU2">
            <summary>RFU 2/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.ExternalSupply">
            <summary>External supply flag digital input (read only)/// </summary>
        </member>
        <member name="F:ThingMagic.Gen2.NXP.G2I.ConfigWord.TamperAlarm">
            <summary>Tamper alarm flag (Read only)/// </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ConfigWord.#ctor">
            <summary>
            Constructor
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.NXP.G2I.ConfigWord.GetConfigWord(System.UInt16)">
            <summary>
            Retrieve configuration word
            </summary>
            <param name="inputData"></param>
            <returns></returns>
        </member>
        <member name="T:ThingMagic.Gen2.Impinj">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Impinj.Monza4">
            <summary>
            
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Impinj.Monza4.QTReadWrite">
            <summary>
            Monza4 QTReadWrite
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTReadWrite.AccessPassword">
            <summary>
            The access password to use to write to the tag
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTReadWrite.ControlByte">
            <summary>
            control byte 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTReadWrite.PayloadWord">
            <summary>
            Payload word
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Impinj.Monza4.QTReadWrite.#ctor(System.UInt32,ThingMagic.Gen2.Impinj.Monza4.QTPayload,ThingMagic.Gen2.Impinj.Monza4.QTControlByte)">
            <summary>
            Constructor to initialize the parameters QTReadWrite
            </summary>
            <param name="accessPassword">the access password</param>
            <param name="payLoad">comprises of qtSR - Bit 15 (MSB) is first transmitted bit of the
            payload field and qtMEM - Tag uses Public/Private Memory Map
            </param>
            <param name="controlByte">comprises of qtReadWrite - The Read/Write field indicates whether the tag
            reads or writes QT control data and
            </param>
        </member>
        <member name="T:ThingMagic.Gen2.Impinj.Monza4.QTControlByte">
            <summary>
             Monza4 QT Control Byte
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_TM0">
            <summary>
             The following bits are Reserved for Future Use. And will be ignored.
            RFU_TM's are ThingMagic specific RFU bits
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_TM1">
            <summary>
             The following bits are Reserved for Future Use. And will be ignored.
            RFU_TM's are ThingMagic specific RFU bits
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_TM2">
            <summary>
             The following bits are Reserved for Future Use. And will be ignored.
            RFU_TM's are ThingMagic specific RFU bits
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_TM3">
            <summary>
             The following bits are Reserved for Future Use. And will be ignored.
            RFU_TM's are ThingMagic specific RFU bits
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_Impinj4">
            <summary>
             RFU_Impinj bits are as per the Monza4 specification.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.RFU_Impinj5">
            <summary>
             RFU_Impinj bits are as per the Monza4 specification.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.Persistence">
            <summary>
            If Read/Write=1, the Persistence field indicates whether the QT control is
            written to nonvolatile (NVM) or volatile memory.
            Persistence=0 means write to volatile memory. Persistence=1 means write to NVM memory
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTControlByte.QTReadWrite">
            <summary>
            The Read/Write field indicates whether the tag reads or writes QT control data.
            Read/Write=0 means read the QT control bits in cache.
            Read/Write=1 means write the QT control bits
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Impinj.Monza4.QTPayload">
            <summary>
            Monza QT Payload
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.QTSR">
            <summary>
            Bit 15 (MSB) is first transmitted bit of the payload field.
            Bit # Name Description
            1: Tag reduces range if in or about to be in OPEN or SECURED state
            0: Tag does not reduce range
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.QTMEM">
            <summary>
            Bit 14 (MSB) is first transmitted bit of the payload field.
            1:Tag uses Public Memory Map (see Table 2-10)
            0: Tag uses Private Memory Map (see Table 2-9)
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU13">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU12">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU11">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU10">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU9">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU8">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU7">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU6">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU5">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU4">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU3">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU2">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU1">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Impinj.Monza4.QTPayload.RFU0">
            <summary>
            Reserved for future use. Tag will return these bits as zero.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran">
            <summary>
            IAVDenatran secure tag operations.
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV">
            <summary>
            Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.Mode">
            <summary>
            IAVDenatran secure tagop type
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.Payload">
            <summary>
            PayLoad byte
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.WritePtr">
            <summary>
            WordAddress pointer to the USER data
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.WordData">
            <summary>
            User data to be written
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.WriteCredentials">
            <summary>
            Data credentials written word
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.WriteSecCredentials">
            <summary>
            Data credentials written word
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType">
            <summary>
            Enum IAVDenatran secure tag operation 
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.ACTIVATESECUREMODE">
            <summary>
            ActivateSecureMode - PA Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.AUTHENTICATEOBU">
            <summary>
            AuthenticateOBU - PA Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.ACTIVATESINIAVMODE">
            <summary>
            ACTIVATESINIAVMODE - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.OBUAUTHID">
            <summary>
            OBUAUTHID - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.AUTHENTICATEOBUFULLPASS1">
            <summary>
            AUTHENTICATEOBUFULLPASS1 - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.AUTHENTICATEOBUFULLPASS2">
            <summary>
            AUTHENTICATEOBUFULLPASS2 - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.OBUREADFROMMEMMAP">
            <summary>
            OBUREADFROMMEMMAP - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.OBUWRITETOMEMMAP">
            <summary>
            OBUWRITETOMEMMAP - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.AUTHENTICATEOBUFULLPASS">
            <summary>
            AUTHENTICATEOBUFULLPASS - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.GETTOKENID">
            <summary>
            GETTOKENID - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.READSEC">
            <summary>
            READSEC - IP63 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.SecureTagOpType.WRITESEC">
            <summary>
            WRITESEC - IP63 Protocol
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.ActivateSiniavMode">
            <summary>
            Activate Siniav mode - G0 Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Gen2.Denatran.IAV.ActivateSiniavMode.Token">
            <summary>
            64 bits of token number to activate the tag
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.ActivateSiniavMode.#ctor(System.Byte)">
            <summary>
            Constructor
            <param name="payLoadbyte">payload 1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits]</param>
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.ActivateSiniavMode.#ctor(System.Byte,System.Byte[])">
            <summary>
            Constructor
            </summary>
            <param name="payLoadbyte">payload 1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits]</param>
            <param name="token">64 bits of token number to activate the tag</param>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUAuthID">
            <summary>
            G0 Protocol - Unilateral OBU authentication and identification.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUAuthID.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass1">
            <summary>
            G0 Protocol - Unilateral OBU Authentication with full read of page 1 of USER memory, pass 1.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass1.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass2">
            <summary>
            G0 Protocol - Unilateral OBU Authentication with full read of page 1 of USER memory, pass 2.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass2.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUReadFromMemMap">
            <summary>
            G0 Protocol - OBUReadFromMemMap
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUReadFromMemMap.#ctor(System.Byte,System.UInt16)">
            <summary>
            Constructor:
            </summary>
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits] + 2bytes->[MMWordPtr (Word pointer) 16 bits].</param>
            <param name="wordAddress">WordAddress pointer to the USER data</param>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUWriteToMemMap">
            <summary>
            G0 Protocol - OBUWriteToMemMap
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUWriteToMemMap.#ctor(System.Byte,System.UInt16,System.UInt16,ThingMagic.Gen2.DenatranIAVWriteCredential)">
            <summary>
            Constructor:
            </summary>
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits] + 2bytes->[MMWordPtr (Word pointer) 16 bits] + 2bytes->[Word (Word to be write) 16 bits] + 16bytes->[Write-Credentials 128 bits].</param>
            <param name="wordAddress">WordAddress pointer to the USER data</param>
            <param name="word">User data to be written</param>
            <param name="writeCredential">Data credentials written word</param>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.ActivateSecureMode">
            <summary>
            PA Protocol - Activate secure mode
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.ActivateSecureMode.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits]. </param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.AuthenticateOBU">
            <summary>
            PA Protocol - Authenticate OBU
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.AuthenticateOBU.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass">
            <summary>
            G0 Protocol - Unilateral OBU Authentication with full read of page 1 of USER memory, full pass.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.OBUAuthFullPass.#ctor(System.Byte)">
            <summary>
            Constructor:
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.GetTokenId">
            <summary>
            G0 Protocol - Get TokedId.
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.GetTokenId.#ctor">
            <summary>
            Constructor:
            </summary>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.ReadSec">
            <summary>
            IP63 Protocol - ReadSec
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.ReadSec.#ctor(System.Byte,System.UInt16)">
            <summary>
            Constructor:
            </summary>
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            <param name="wordAddress">WordAddress pointer to the USER data</param>
        </member>
        <member name="T:ThingMagic.Gen2.Denatran.IAV.WriteSec">
            <summary>
             IP63 Protocol - WriteSec
            </summary>
        </member>
        <member name="M:ThingMagic.Gen2.Denatran.IAV.WriteSec.#ctor(System.Byte,ThingMagic.Gen2.DenatranIAVWriteSecCredential)">
            <summary>
            Constructor:
            </summary>
            <param name="payLoadbyte">1byte->[TC(Transmission Count) 1bit + RFFU(Reserved For Furture Use) 7bits].</param>
            <param name="writeSecCredential">Data credentials written word</param>
        </member>
        <member name="T:ThingMagic.GpioPin">
            <summary>
            Class representing GPIO pin number and state
            </summary>
        </member>
        <member name="M:ThingMagic.GpioPin.#ctor(System.Int32,System.Boolean)">
            <summary>
            Create a GpioPin object
            </summary>
            <param name="id">GPIO pin number</param>
            <param name="high">True for pin high, False for pin low</param>
        </member>
        <member name="M:ThingMagic.GpioPin.#ctor(System.Int32,System.Boolean,System.Boolean)">
            <summary>
            Create a GpioPin object with direction
            </summary>
            <param name="id">GPIO pin number</param>
            <param name="high">True for pin high, False for pin low</param>
            <param name="output">True for output pin, False for input pin</param>
        </member>
        <member name="M:ThingMagic.GpioPin.Equals(System.Object)">
            <summary>
            Determines whether the specified Object is equal to the current Object.
            </summary>
            <param name="obj">The Object to compare with the current Object.</param>
            <returns>true if the specified Object is equal to the current Object; otherwise, false.</returns>
        </member>
        <member name="M:ThingMagic.GpioPin.GetHashCode">
            <summary>
            Serves as a hash function for a particular type.
            </summary>
            <returns>A hash code for the current Object.</returns>
        </member>
        <member name="M:ThingMagic.GpioPin.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="P:ThingMagic.GpioPin.Id">
            <summary>
            GPIO pin number
            </summary>
        </member>
        <member name="P:ThingMagic.GpioPin.High">
            <summary>
            GPIO state: True=high, False=low
            </summary>
        </member>
        <member name="P:ThingMagic.GpioPin.Output">
            <summary>
            GPIO direction: True = output, False = Input
            </summary>
        </member>
        <member name="T:ThingMagic.IntUtil">
            <summary>
            Integer conversion routines
            </summary>
        </member>
        <member name="M:ThingMagic.IntUtil.StrToLong(System.String)">
            <summary>
            Parse string to integer, like C strtol function.
            </summary>
            <param name="str">Integer-representing string; e.g.,
            256 (decimal),
            0x400 (hexadecimal)</param>
            <returns>Integer represented by string</returns>
        </member>
        <member name="T:ThingMagic.Ipx64">
            <summary>
            Iso tag-specific constructs
            </summary>
        </member>
        <member name="T:ThingMagic.Ipx64.TagData">
            <summary>
            iPx specific version of TagData.
            </summary>
        </member>
        <member name="M:ThingMagic.Ipx64.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Ipx64.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="P:ThingMagic.Ipx64.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="T:ThingMagic.Ipx256">
            <summary>
            ISO tag-specific constructs for Ipx256
            </summary>
        </member>
        <member name="T:ThingMagic.Ipx256.TagData">
            <summary>
            The data structure holding the data read from tag
            </summary>
        </member>
        <member name="M:ThingMagic.Ipx256.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Ipx256.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="P:ThingMagic.Ipx256.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b">
            <summary>
            Iso tag-specific constructs
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.LinkFrequency">
            <summary>
            enum to define link frequency options
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.LinkFrequency.LINK160KHZ">
            <summary>
            160kHz link frequency
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.LinkFrequency.LINK40KHZ">
            <summary>
            40kHz link frequency
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.ModulationDepth">
            <summary>
            Iso180006b Modulation Depth Value
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.ModulationDepth.DEPTH99PERCENT">
            <summary>
            Depth = 99%
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.ModulationDepth.DEPTH11PERCENT">
            <summary>
            Depth = 11%
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.Delimiter">
            <summary>
            Iso180006b Delimiter Value
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Delimiter.DELIMITER1">
            <summary>
            Delimiter = 1
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Delimiter.DELIMITER4">
            <summary>
            Delimiter = 4
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.SelectOp">
            <summary>
            enum to define select options
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.SelectOp.EQUALS">
            <summary>
            Select Tags that match the select criteria
            </summary>            
        </member>
        <member name="F:ThingMagic.Iso180006b.SelectOp.NOTEQUALS">
            <summary>
            Select Tags that do not match the select criteria
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.SelectOp.LESSTHAN">
            <summary>
            Select Tags that match select data that are less less than the select criteria
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.SelectOp.GREATERTHAN">
            <summary>
            Select Tags that match select data that are greated than the select criteria
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.TagData">
            <summary>
            ISO specific version of TagData.
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData with blank CRC
            </summary>
            <param name="epcBytes">EPC value</param>
        </member>
        <member name="M:ThingMagic.Iso180006b.TagData.#ctor(System.Collections.Generic.ICollection{System.Byte},System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Create TagData
            </summary>
            <param name="epcBytes">EPC value</param>
            <param name="crcBytes">CRC value</param>
        </member>
        <member name="P:ThingMagic.Iso180006b.TagData.Protocol">
            <summary>
            Tag's RFID protocol
            </summary>
        </member>
        <member name="T:ThingMagic.Iso180006b.LockAction">
            <summary>
            Iso180006B lockAction
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.LockAction.Address">
            <summary>
            The address of the byte to lock.
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.LockAction.#ctor(System.Byte)">
            <summary>
            Create a lock action for the given address
            </summary>
            <param name="address">Memory address to lock</param>
        </member>
        <member name="T:ThingMagic.Iso180006b.Select">
            <summary>
            Representation of a ISO Select Operation.
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Select.Invert">
            <summary>
            Whether to invert the selection (deselect tags that meet the comparison and vice versa).
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Select.Op">
            <summary>
            The select option to provide
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Select.Address">
            <summary>
            The select address
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Select.Mask">
            <summary>
            A bitmask of which of the eight provided bytes to compare
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.Select.Data">
            <summary>
            The data to compare. Exactly eight bytes.
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.Select.#ctor(System.Boolean,ThingMagic.Iso180006b.SelectOp,System.Byte,System.Byte,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Select constructor.
            </summary>
            <param name="invert">invert the selection</param>
            <param name="op">select options</param>
            <param name="address">starting mask address</param>
            <param name="mask">the select mask</param>
            <param name="data">the data for comparison</param>
        </member>
        <member name="M:ThingMagic.Iso180006b.Select.Matches(ThingMagic.TagData)">
            <summary>
            Predicate for post-processing filters.
            </summary>
            <param name="t">tag data to screen</param>
            <returns>Return true to allow tag through the filter.
            Return false to reject tag.</returns>
        </member>
        <member name="M:ThingMagic.Iso180006b.Select.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:ThingMagic.Iso180006b.LockTag">
            <summary>
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.LockTag.Address">
            <summary>
            the address to lock tag
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.LockTag.#ctor(System.Byte)">
            <summary>
            Constructor to initialize the parameters of LockTag
            </summary>
            <param name="address">the address to lock tag</param>
        </member>
        <member name="T:ThingMagic.Iso180006b.WriteData">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            
        </member>
        <member name="F:ThingMagic.Iso180006b.WriteData.Address">
            <summary>
            the byte address to start writing to
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.WriteData.Data">
            <summary>
            the bytes to write
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.WriteData.#ctor(System.Byte,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Constructor to initialize the parameters of WriteData
            </summary>
            <param name="address">the byte address to start writing to</param>
            <param name="data">the bytes to write</param>
            
        </member>
        <member name="T:ThingMagic.Iso180006b.ReadData">
            <summary>
            Read data from the memory bank of a tag.
            </summary>    
        </member>
        <member name="F:ThingMagic.Iso180006b.ReadData.byteAddress">
            <summary>
            the byte address to start reading at
            </summary>
        </member>
        <member name="F:ThingMagic.Iso180006b.ReadData.length">
            <summary>
            the number of bytes to read
            </summary>
        </member>
        <member name="M:ThingMagic.Iso180006b.ReadData.#ctor(System.Byte,System.Byte)">
            <summary>
            Constructor to initialize the parameters of ReadData
            </summary>
            <param name="byteAddress">the byte address to start reading at</param>
            <param name="length">the number of bytes to read</param>
        </member>
        <member name="T:ThingMagic.LlrpReader">
            <summary>
            The RqlReader class is an implementation of a Reader object that 
            communicates with a ThingMagic fixed RFID reader via the Low level reader protocol.
            
            Instances of the Llrp class are created with the Reader.create()method with a 
            "llrp" URI or a generic "tmr" URI that references a network device.
            </summary>
        </member>
        <member name="T:ThingMagic.Reader">
            <summary>
            Abstract base class for ThingMagic RFID reader devices.
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.debug">
            <summary>
            Debug log object for Reader and subclasses
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.releaseCallBackMethod">
            <summary>
            Wait till ThreadPoolCallBack method finishes its execution
            </summary>
        </member>
        <member name="F:ThingMagic.Reader._backgroundNotifierCallbackCount">
            <summary>
            Track doneness of ThreadPool callbacks
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderFactoryDispatchTable">
            <summary>
            Creates  a Dictionary with string and object as key value pair.
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.tagReadQueue">
            <summary>
            Queue for BackGroundReader and BackGroundNotifier
            </summary>
        </member>
        <member name="F:ThingMagic.Reader._runNow">
            <summary>
            Internal flag to enable "tag reading."
            If true, generate tag reads.  If false, stop "reading tags."
            </summary>
        </member>
        <member name="F:ThingMagic.Reader._exitNow">
            <summary>
            Internal flag to "close reader."
            If true, quit worker thread.
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.timeStart">
             <summary>
            Get the time elapsed for processing the tagread data
             </summary>
        </member>
        <member name="F:ThingMagic.Reader.timeEnd">
             <summary>
            Get the time elapsed for processing the tagread data
             </summary>
        </member>
        <member name="F:ThingMagic.Reader.userTransportTimeoutEnable">
            <summary>
            In case user specified the timeout value for connect
            Enable the userTransportTimeoutEnable option
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.isFastSearch">
            <summary>
            Fast search enable 
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.statFlag">
            <summary>
            Cache reader stats flag
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.OnLog(System.String)">
            <summary>
            Generate a debug log message
            </summary>
            <param name="message">log message content</param>
        </member>
        <member name="M:ThingMagic.Reader.Connect">
            <summary>
            Connect reader object to device.
            If object already connected, then do nothing.
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.Reboot">
            <summary>
            Reboots the device
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.Destroy">
            <summary>
            Shuts down the connection with the reader device.
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.Read(System.Int32)">
            <summary>
            Read RFID tags for a fixed duration.
            </summary>
            <param name="timeout">the time to spend reading tags, in milliseconds</param>
            <returns>the tags read</returns>
        </member>
        <member name="M:ThingMagic.Reader.StartReading">
            <summary>
            Start reading RFID tags in the background. The tags found will be
            passed to the registered read listeners, and any exceptions that
            occur during reading will be passed to the registered exception
            listeners. Reading will continue until stopReading() is called.
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.StopReading">
            <summary>
            Stop reading RFID tags in the background.
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.FirmwareLoad(System.IO.Stream)">
            <summary>
            Load a new firmware image into the device's nonvolatile memory.
            This installs the given image data onto the device and restarts
            it with that image. The firmware must be of an appropriate type
            for the device. Interrupting this operation may damage the
            reader.
            </summary>
            <param name="firmware">a data _stream of the firmware contents</param>
        </member>
        <member name="M:ThingMagic.Reader.FirmwareLoad(System.IO.Stream,ThingMagic.FirmwareLoadOptions)">
            <summary>
            Load a new firmware image into the device's nonvolatile memory.
            This installs the given image data onto the device and restarts
            it with that image. The firmware must be of an appropriate type
            for the device. Interrupting this operation may damage the
            reader.
            </summary>
            <param name="firmware">a data _stream of the firmware contents</param>
            <param name="flOptions">firmware load options</param>
        </member>
        <member name="M:ThingMagic.Reader.GpiGet">
            <summary>
            Get the state of all of the reader's GPI pins. 
            </summary>
            <returns>array of GpioPin objects representing the state of all input pins</returns>
        </member>
        <member name="M:ThingMagic.Reader.GpoSet(System.Collections.Generic.ICollection{ThingMagic.GpioPin})">
            <summary>
            Set the state of some GPO pins.
            </summary>
            <param name="state">array of GpioPin objects</param>
        </member>
        <member name="M:ThingMagic.Reader.ExecuteTagOp(ThingMagic.TagOp,ThingMagic.TagFilter)">
             <summary>
             execute a TagOp
             </summary>
             <param name="tagOP">Tag Operation</param>
             <param name="target">Tag filter</param>
            <returns>the return value of the tagOp method if available</returns>
        </member>
        <member name="M:ThingMagic.Reader.KillTag(ThingMagic.TagFilter,ThingMagic.TagAuthentication)">
            <summary>
            Kill a tag. The first tag seen is killed.
            </summary>
            <param name="target">the tag to kill, or null</param>
            <param name="password">the authentication needed to kill the tag</param>
        </member>
        <member name="M:ThingMagic.Reader.LockTag(ThingMagic.TagFilter,ThingMagic.TagLockAction)">
            <summary>
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </summary>
            <param name="target">the tag to lock, or null</param>
            <param name="action">the locking action to take</param>
        </member>
        <member name="M:ThingMagic.Reader.ReadTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag to read from, or null</param>
            <param name="bank">the tag memory bank to read from</param>
            <param name="byteAddress">the word address to start reading from</param>
            <param name="byteCount">the number of words to read</param>
            <returns>the words read</returns>
        </member>
        <member name="M:ThingMagic.Reader.ReadTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag to read from, or null</param>
            <param name="bank">the tag memory bank to read from</param>
            <param name="wordAddress">the word address to start reading from</param>
            <param name="wordCount">the number of words to read</param>
            <returns>the words read</returns>
        </member>
        <member name="M:ThingMagic.Reader.WriteTag(ThingMagic.TagFilter,ThingMagic.TagData)">
            <summary>
            Write a new ID to a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="epc">the new tag ID to write</param>
        </member>
        <member name="M:ThingMagic.Reader.WriteTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="bank">the tag memory bank to write to</param>
            <param name="address">the byte address to start writing to</param>
            <param name="data">the bytes to write</param>
        </member>
        <member name="M:ThingMagic.Reader.WriteTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="bank">the tag memory bank to write to</param>
            <param name="address">the word address to start writing to</param>
            <param name="data">the words to write</param>
        </member>
        <member name="M:ThingMagic.Reader.SetSerialTransport(System.String,ThingMagic.Reader.ReaderFactory)">
             <summary>
            Creates a serial transport dispatch table
             </summary>
        </member>
        <member name="M:ThingMagic.Reader.Create(System.String)">
            <summary>
            Return an instance of a Reader class associated with a
            serial reader on a particular communication port.
            </summary>
            <param name="uriString">Identifies the reader to connect to with a URI
            syntax. The scheme can be "eapi" for the embedded module
            protocol, "rql" for the request query language, or "tmr" to
            guess. The remainder of the string identifies the _stream that the
            protocol will be spoken over, either a local host serial port
            device or a TCP network port.
            Examples include: 
              "eapi:///dev/ttyUSB0"
              "eapi:///com1"
              "eapi://modproxy.example.com:2500/"
              "rql://reader.example.com/"
              "tmr:///dev/ttyS0"
              "tmr://192.168.1.101:80/"
            </param>
            <remarks>Set autoConnect to false if you need to reconfigure the reader object before opening any physical interfaces
            (e.g., attach a transport listener to monitor the init sequence, set a nonstandard baud rate or transport timeout.)
            If autoConnect is false, Create will just create the reader object, which may then be configured
            before the actual connection is made by calling its Connect method.</remarks>
            <returns>Reader object associated with device</returns>
        </member>
        <member name="M:ThingMagic.Reader.Dispose(System.Boolean)">
            <summary>
            Dispose
            </summary>
            <param name="bDisposing">is Disposing?</param>
            <returns>void</returns>
        </member>
        <member name="M:ThingMagic.Reader.ValidateParameterKey(System.String)">
            <summary>
            Check for existence of parameter.  Throw exception if parameter does not exist.
            </summary>
            <param name="key">Parameter name</param>
            <returns>Setting if key is valid.  Otherwise, throws ArgumentException.</returns>
        </member>
        <member name="M:ThingMagic.Reader.ParamAdd(ThingMagic.Reader.Setting)">
            <summary>
            Register a new parameter handler
            </summary>
            <param name="handler">Parameter handler.
            Get method will be called -- parameter will only be added if get succeeds.</param>
        </member>
        <member name="M:ThingMagic.Reader.ParamClear">
            <summary>
             Reset parameter table; e.g., to reprobe hardware afer firmware update
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.probeSetting(ThingMagic.Reader.Setting)">
            <summary>
            Probe if the parameter exists in the module.
            </summary>
            <param name="s">the parameter setting</param>
            <returns>the boolean value representing the existence of the parameter in the module</returns>
        </member>
        <member name="M:ThingMagic.Reader.ParamGet(System.String)">
            <summary>
            Get the value of a Reader parameter.
            </summary>
            <param name="key">the parameter name</param>
            <returns>the value of the parameter, as an Object</returns>
        </member>
        <member name="M:ThingMagic.Reader.ParamList">
            <summary>
            Get a list of the parameters available
            
            <para>Supported Parameters:
            <list type="bullet">
            <item><term>/reader/antenna/checkPort</term></item>
            <item><term>/reader/antenna/connectedPortList</term></item>
            <item><term>/reader/antenna/portList</term></item>
            <item><term>/reader/antenna/portSwitchGpos</term></item>
            <item><term>/reader/antenna/portSwitchGpos not supported</term></item>
            <item><term>/reader/antenna/returnLoss</term></item>
            <item><term>/reader/antenna/settlingTimeList</term></item>
            <item><term>/reader/antenna/txRxMap</term></item>
            <item><term>/reader/antennaMode</term></item>
            <item><term>/reader/baudRate</term></item>
            <item><term>/reader/commandTimeout</term></item>
            <item><term>/reader/currentTime</term></item>
            <item><term>/reader/description</term></item>
            <item><term>/reader/extendedEpc</term></item>
            <item><term>/reader/gen2/BLF</term></item>
            <item><term>/reader/gen2/accessPassword</term></item>
            <item><term>/reader/gen2/bap</term></item>
            <item><term>/reader/gen2/q</term></item>
            <item><term>/reader/gen2/session</term></item>
            <item><term>/reader/gen2/tagEncoding</term></item>
            <item><term>/reader/gen2/target</term></item>
            <item><term>/reader/gen2/target not supported</term></item>
            <item><term>/reader/gen2/tari</term></item>
            <item><term>/reader/gen2/writeEarlyExit</term></item>
            <item><term>/reader/gen2/writeMode</term></item>
            <item><term>/reader/gen2/writeReplyTimeout</term></item>
            <item><term>/reader/gpio/inputList</term></item>
            <item><term>/reader/gpio/outputList</term></item>
            <item><term>/reader/hostname</term></item>
            <item><term>/reader/iso180006b/BLF</term></item>
            <item><term>/reader/iso180006b/delimiter</term></item>
            <item><term>/reader/iso180006b/modulationDepth</term></item>
            <item><term>/reader/licenseKey</term></item>
            <item><term>/reader/powerMode</term></item>
            <item><term>/reader/radio/enablePowerSave</term></item>
            <item><term>/reader/radio/enableSJC</term></item>
            <item><term>/reader/radio/portReadPowerList</term></item>
            <item><term>/reader/radio/portWritePowerList</term></item>
            <item><term>/reader/radio/powerMax</term></item>
            <item><term>/reader/radio/powerMin</term></item>
            <item><term>/reader/radio/readPower</term></item>
            <item><term>/reader/radio/temperature</term></item>
            <item><term>/reader/radio/writePower</term></item>
            <item><term>/reader/read/asyncOffTime</term></item>
            <item><term>/reader/read/asyncOnTime</term></item>
            <item><term>/reader/read/plan</term></item>
            <item><term>/reader/region/hopTable</term></item>
            <item><term>/reader/region/hopTime</term></item>
            <item><term>/reader/region/id</term></item>
            <item><term>/reader/region/lbt/enable</term></item>
            <item><term>/reader/region/supportedRegions</term></item>
            <item><term>/reader/statistics</term></item>
            <item><term>/reader/stats</term></item>
            <item><term>/reader/stats is not supported</term></item>
            <item><term>/reader/stats/enable</term></item>
            <item><term>/reader/stats/enable is not supported</term></item>
            <item><term>/reader/status/antennaEnable</term></item>
            <item><term>/reader/status/frequencyEnable</term></item>
            <item><term>/reader/status/temperatureEnable</term></item>
            <item><term>/reader/tagReadData/enableReadFilter</term></item>
            <item><term>/reader/tagReadData/enableReadFilter read only</term></item>
            <item><term>/reader/tagReadData/readFilterTimeout</term></item>
            <item><term>/reader/tagReadData/recordHighestRssi</term></item>
            <item><term>/reader/tagReadData/reportRssiInDbm</term></item>
            <item><term>/reader/tagReadData/tagopFailures</term></item>
            <item><term>/reader/tagReadData/tagopSuccesses</term></item>
            <item><term>/reader/tagReadData/uniqueByAntenna</term></item>
            <item><term>/reader/tagReadData/uniqueByData</term></item>
            <item><term>/reader/tagReadData/uniqueByProtocol</term></item>
            <item><term>/reader/tagop/antenna</term></item>
            <item><term>/reader/tagop/protocol</term></item>
            <item><term>/reader/transportTimeout</term></item>
            <item><term>/reader/uri</term></item>
            <item><term>/reader/userConfig</term></item>
            <item><term>/reader/userMode</term></item>
            <item><term>/reader/version/hardware</term></item>
            <item><term>/reader/version/model</term></item>
            <item><term>/reader/version/productGroup</term></item>
            <item><term>/reader/version/productGroupID</term></item>
            <item><term>/reader/version/productID</term></item>
            <item><term>/reader/version/serial</term></item>
            <item><term>/reader/version/software</term></item>
            <item><term>/reader/version/supportedProtocols</term></item>
            </list>
            </para>
            </summary>
            <returns>an array of the parameter names</returns>
        </member>
        <member name="M:ThingMagic.Reader.ParamSet(System.String,System.Object)">
            <summary>
            Set the value of a Reader parameter.
            </summary>
            <remarks>See <see>ParamGet</see> for list of supported parameters.</remarks>
            <param name="key">the parameter name</param>
            <param name="value">value of the parameter, as an Object</param>
        </member>
        <member name="M:ThingMagic.Reader.ReadGivenStartStop(System.Int32)">
            <summary>
            Utility function to implement Read given working StartReading and StopReading methods
            </summary>
            <param name="milliseconds">Number of milliseconds to keep reading.</param>
            <returns>the read tag data collection</returns>
        </member>
        <member name="M:ThingMagic.Reader.StartReadingGivenRead">
            <summary>
            Utility function to implement StartReading given a working Read method
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.StopReadingGivenRead">
            <summary>
            Utility function to implement StopReading given a working Read method
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.DoWorkGivenRead">
            <summary>
            Logic for asynchronous worker thread given a working Read method
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.notifyExceptionListeners(ThingMagic.ReaderException)">
            <summary>
            Convenience method for delivering reader exceptions to listeners
            </summary>
            <param name="ex"></param>
        </member>
        <member name="M:ThingMagic.Reader.QueueTagReads(System.Collections.Generic.ICollection{ThingMagic.TagReadData})">
            <summary>
            Submit tag reads for read listener background processing
            </summary>
            <param name="reads">List of tag reads</param>
        </member>
        <member name="M:ThingMagic.Reader.DestroyGivenRead">
            <summary>
            Clean up actions given a working Read method
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.ReadTagMemWordsGivenReadTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Implement ReadTagMemWords in terms of ReadTagMemBytes
            </summary>
            <param name="target">Tag to read</param>
            <param name="bank">Memory bank identifier</param>
            <param name="wordAddress">Word address to start reading at</param>
            <param name="wordCount">Number of words to read</param>
            <returns>Words read</returns>
        </member>
        <member name="M:ThingMagic.Reader.SimpleTransportListener(System.Object,ThingMagic.TransportListenerEventArgs)">
            <summary>
            Simple console-output transport listener
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.OnTagRead(ThingMagic.TagReadData)">
            <summary>
            Internal accessor to TagRead event.
            Called by members of the Reader class to fire a TagRead event.
            </summary>
            <param name="tagReadData">Data from a single tag read</param>
        </member>
        <member name="M:ThingMagic.Reader.OnTransport(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            Fire Transport message event
            </summary>
            <param name="tx">Message direction: True=host to reader, False=reader to host</param>
            <param name="data">Message contents, including framing and checksum bytes</param>
            <param name="timeout">Transport timeout setting (milliseconds) when message was sent or received</param>
        </member>
        <member name="M:ThingMagic.Reader.OnStatusRead(ThingMagic.StatusReport[])">
            <summary>
            Reader Status message event
            </summary>
            <param name="sReports">array of status reports</param>
        </member>
        <member name="M:ThingMagic.Reader.OnStatsRead(ThingMagic.ReaderStatsReport)">
            <summary>
            Reader Stats message event
            </summary>
            <param name="sReport">array of status reports</param>
        </member>
        <member name="M:ThingMagic.Reader.OnReadAuthentication(ThingMagic.TagReadData)">
            <summary>
            Reader Authentication message event.
            </summary>
            <param name="tagReadData">Data from a single tag read</param>
        </member>
        <member name="M:ThingMagic.Reader.GetFirstConnectedAntenna">
            <summary>
            Pick first available connected antenna
            </summary>
            <returns>First connected antenna, or 0, if none connected.
            (Assumes 0 is never a valid antenna number.)</returns>
        </member>
        <member name="M:ThingMagic.Reader.GetFirstSupportedProtocol">
            <summary>
            Pick first available supported protocol
            </summary>
            <returns>First supported protocol.  Throws exception if none supported.</returns>
        </member>
        <member name="M:ThingMagic.Reader.ValidateProtocol(ThingMagic.TagProtocol)">
            <summary>
            Is requested protocol a valid protcol?
            </summary>
            <param name="req">Requested protocol</param>
            <returns>req if it is valid, else throws ArgumentException</returns>
        </member>
        <member name="M:ThingMagic.Reader.ValidateParameter``1(``0,``0[],System.String)">
            <summary>
            Is requested value a valid value?
            </summary>
            <typeparam name="T">the parameter data type</typeparam>
            <param name="req">Requested value</param>
            <param name="valids">Array of valid parameters (will be sorted, hope you don't mind.)</param>
            <param name="errmsg">Message to use for invalid values; e.g., "Invalid antenna" -> "Invalid antenna: 3"</param>
            <returns>Value if valid.  Throws ReaderException if invalid.</returns>
        </member>
        <member name="M:ThingMagic.Reader.IsMember``1(``0,``0[])">
            <summary>
            Is requested value a valid value?
            </summary>
            <typeparam name="T"> the member type</typeparam>
            <param name="req">Requested value</param>
            <param name="valids">Array of valid parameters (will be sorted, hope you don't mind.)</param>
            <returns>True if value is member of list.  False otherwise.</returns>
        </member>
        <member name="E:ThingMagic.Reader.TagRead">
            <summary>
            Occurs when each tag is read.
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.Transport">
            <summary>
            Transport message was sent or received
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.ReadException">
            <summary>
            Occurs when asynchronous read throws an exception.
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.StatusListener">
            <summary>
            Occurs when reader status parsing in continuous read 
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.StatsListener">
            <summary>
            Occurs when reader status parsing in continuous read 
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.ReadAuthentication">
            <summary>
            Occurs when 0x604 error is received which indicates the api 
            is waiting for the client to provide the accesspassword of tag.
            </summary>
        </member>
        <member name="E:ThingMagic.Reader.Log">
            <summary>
            Occurs when debug log message is generated
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.DebugLog">
            <summary>
            Debug logging interface for Reader and subclasses
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.DebugLog.Log(System.String)">
            <summary>
            Log a message to disk
            </summary>
            <param name="message">Message to log</param>
        </member>
        <member name="T:ThingMagic.Reader.DiskLog">
            <summary>
            Send debug log to disk
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.DiskLog.#ctor(System.String)">
            <summary>
            Create a disk-based (persistent) debug log
            </summary>
            <param name="filename"></param>
        </member>
        <member name="M:ThingMagic.Reader.DiskLog.Log(System.String)">
            <summary>
            Log a message to disk
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ThingMagic.Reader.DummyDebugLog">
            <summary>
            Dummy DiskLog class for disabling logging without removing debug statements
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.DummyDebugLog.#ctor">
            <summary>
            Create a logger that outputs to nowhere
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.DummyDebugLog.Log(System.String)">
            <summary>
            Log a message to nowhere
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ThingMagic.Reader.SettingFilter">
            <summary>
            Parameter setting filter.  Modifies parameter value on the way in or out of the Setting object.
            </summary>
            <param name="value">Input parameter:
            For get, this comes from Setting.Value.
            For set, this is the input argument to the Set method.</param>
            <returns>Filtered parameter:
            For get, this object will be presented to the user.
            For set, this object will be saved in Setting.Value.</returns>
        </member>
        <member name="T:ThingMagic.Reader.Region">
            <summary>
            RFID regulatory regions
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.UNSPEC">
            <summary>
            Region not set
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.NA">
            <summary>
            North America
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.EU">
            <summary>
            Europe, version 1 (LBT)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.KR">
            <summary>
            Korea
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.IN">
            <summary>
            India
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.JP">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.PRC">
            <summary>
            People's Republic of China (mainland)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.EU2">
            <summary>
            Europe, version 2 (??)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.EU3">
            <summary>
            Europe, version 3 (no LBT)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.KR2">
            <summary>
            Korea (revised)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.PRC2">
            <summary>
            PRC with 875KHZ
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.AU">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.NZ">
            <summary>
            New Zealand !!EXPERIMENTAL!!
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Region.OPEN">
            <summary>
            Unrestricted access to full hardware range
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.ReaderStatusFlag">
            <summary>
            Reader Status Flag enum
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderStatusFlag.NOISE_FLOOR">
            <summary>
            Noise Floor
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderStatusFlag.FREQUENCY">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderStatusFlag.TEMPERATURE">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderStatusFlag.CURRENT_ANTENNAS">
            <summary>
            Current Antenna Ports
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.ReaderStatusFlag.ALL">
            <summary>
            All
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.PowerMode">
            <summary>
            enum to define different power modes.
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.INVALID">
            <summary>
            Invalid Power Mode
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.FULL">
            <summary>
            Full Power Mode
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.MINSAVE">
            <summary>
            Minimal Saving Mode
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.MEDSAVE">
            <summary>
            Medium Saving Mode
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.MAXSAVE">
            <summary>
            Maximum Saving Mode
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.PowerMode.SLEEP">
            <summary>
            Maximum Saving Mode
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.TagReadCallback">
            <summary>
            ThreadPool-compatible wrapper for servicing asynchronous reads
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.TagReadCallback.#ctor(ThingMagic.Reader,System.Collections.Generic.ICollection{ThingMagic.TagReadData})">
            <summary>
            Create ThreadPool-compatible wrapper
            </summary>
            <param name="rdr">Reader object that will service TagReadData event</param>
            <param name="reads">TagReadData event to servic e</param>
        </member>
        <member name="M:ThingMagic.Reader.TagReadCallback.ThreadPoolCallBack(System.Object)">
            <summary>
            ThreadPool-compatible callback to be passed to ThreadPool.QueueUserWorkItem
            </summary>
            <param name="threadContext">Identifier of thread that is servicing this callback</param>
        </member>
        <member name="T:ThingMagic.Reader.Setting">
            <summary>
            Parameter object
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.Setting.#ctor(System.String,System.Type,System.Object,System.Boolean)">
            <summary>
            Create a parameter object, which includes parameter value and metadata.
            </summary>
            <param name="name">Name of parameter</param>
            <param name="type">Data type; e.g., typeof(int)</param>
            <param name="value">Stored value</param>
            <param name="writeable">Allow write access?</param>
        </member>
        <member name="M:ThingMagic.Reader.Setting.#ctor(System.String,System.Type,System.Object,System.Boolean,ThingMagic.Reader.SettingFilter,ThingMagic.Reader.SettingFilter)">
            <summary>
            Create a parameter object, which includes parameter value and metadata.
            </summary>
            <param name="name">Name of parameter</param>
            <param name="type">Data type; e.g., typeof(int)</param>
            <param name="value">Stored value</param>
            <param name="writeable">Allow write access?</param>
            <param name="getfilter">Filter to use on ParamGet.  NOTE: If value is mutable, always make a copy in getfilter to prevent unintentional modifications.</param>
            <param name="setfilter">Filter to use on ParamSet.</param>
        </member>
        <member name="M:ThingMagic.Reader.Setting.#ctor(System.String,System.Type,System.Object,System.Boolean,ThingMagic.Reader.SettingFilter,ThingMagic.Reader.SettingFilter,System.Boolean)">
            <summary>
            Create a parameter object, which includes parameter value and metadata.
            </summary>
            <param name="name">Name of parameter</param>
            <param name="type">Data type; e.g., typeof(int)</param>
            <param name="value">Stored value</param>
            <param name="writeable">Allow write access?</param>
            <param name="getfilter">Filter to use on ParamGet.  NOTE: If value is mutable, always make a copy in getfilter to prevent unintentional modifications.</param>
            <param name="setfilter">Filter to use on ParamSet.</param>
            <param name="confirmed">If the parameter is Confirmed </param>
        </member>
        <member name="M:ThingMagic.Reader.Setting.#ctor(System.String,System.Type,System.Object,System.Boolean,ThingMagic.Reader.SettingFilter,ThingMagic.Reader.SettingFilter,System.Boolean,System.Boolean)">
            <summary>
            Create a parameter object, which includes parameter value and metadata.
            </summary>
            <param name="name">Name of parameter</param>
            <param name="type">Data type; e.g., typeof(int)</param>
            <param name="value">Stored value</param>
            <param name="writeable">Allow write access?</param>
            <param name="getfilter">Filter to use on ParamGet.  NOTE: If value is mutable, always make a copy in getfilter to prevent unintentional modifications.</param>
            <param name="setfilter">Filter to use on ParamSet.</param>
            <param name="confirmed">If the parameter is Confirmed </param>
            <param name="cacheGetValue">store the value of the parameter in paramGet</param>
        </member>
        <member name="T:ThingMagic.Reader.Stat">
            <summary>
            Reader stats object.
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.RESETREADERSTATS">
            <summary>
            Reset reader stats
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.Stat.PerAntennaValues">
            <summary>
            Per Antenna stats
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.PerAntennaValues.Antenna">
            <summary>
            Antenna ID
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.PerAntennaValues.RfOnTime">
            <summary>
            Current RF on time (since start of search) (milliseconds)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.PerAntennaValues.NoiseFloor">
            <summary>
            Noise Floor (TX on, all connected antennas) (dBm)
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.Stat.Values">
            <summary>
            Reader stats values
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.valid">
            <summary>
            Cache stats flag
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.temperature">
            <summary>
            Current temperature (degrees C)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.protocol">
            <summary>
            Current tag protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.antenna">
            <summary>
            Current antenna
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.frequency">
            <summary>
            Current RF carrier frequency (KHZ)
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.connectedAntennas">
            <summary>
            Current connected antennas
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.Values.perAntenna">
            <summary>
            Per-antenna values
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.Stat.Values.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.VALID">
            <summary>
            Cache stats flag
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.TEMPERATURE">
            <summary>
            Current temperature (degrees C)
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.PROTOCOL">
            <summary>
            Current tag protocol
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.ANTENNA">
            <summary>
            Current antenna
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.FREQUENCY">
            <summary>
            Current RF carrier frequency (KHZ)
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.CONNECTEDANTENNA">
            <summary>
            Current connected antennas
            </summary>
        </member>
        <member name="P:ThingMagic.Reader.Stat.Values.PERANTENNA">
            <summary>
            Per-antenna values
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.Stat.StatsFlag">
            <summary>
            Reader Stats Flag Enum - 
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.NONE">
            <summary>
            None
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.RFONTIME">
            <summary>
            Total time the port has been transmitting, in milliseconds. Resettable
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.NOISEFLOORSEARCHRXTXWITHTXON">
            <summary>
            Noise floor with the TX on for the antennas were last configured for searching
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.FREQUENCY">
            <summary>
            Current frequency in uints of Khz
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.TEMPERATURE">
            <summary>
            Current temperature of the device in units of Celcius
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.ANTENNAPORTS">
            <summary>
            Current antenna
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.PROTOCOL">
            <summary>
            Current protocol
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.CONNECTEDANTENNAS">
            <summary>
            Current connected antennas
            </summary>
        </member>
        <member name="F:ThingMagic.Reader.Stat.StatsFlag.ALL">
            <summary>
            ALL
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.ReaderFactory">
            <summary>
            Creates  a Reader factory method.
            </summary>
        </member>
        <member name="T:ThingMagic.Reader.LogHandler">
            <summary>
            Target pattern for debug log messages
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ThingMagic.Reader.ReadExceptionPublisher">
            <summary>
            Publishes ReadException
            </summary>
        </member>
        <member name="M:ThingMagic.Reader.ReadExceptionPublisher.#ctor(ThingMagic.Reader,ThingMagic.ReaderException)">
            <summary>
            Constructor for ReadExceptionPublisher
            </summary>
            <param name="reader">Reader object</param>
            <param name="ex">ReaderException object</param>
        </member>
        <member name="M:ThingMagic.Reader.ReadExceptionPublisher.OnReadException">
            <summary>
            Internal accessor to ReadException event.
            Called by members of the Reader class to fire a ReadException event.
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.endOfAISpec">
            <summary>
            Status will be changed on end of AI Spec
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ROSpecFlags">
            <summary>
            Bitmask of "Is this ROSpec ended?" bits.
            Works as long as we never use more than ROSpecs 1-64.
            e.g., if (RoSpecFlags[ROSpecID-1]), then ROSpecID is active
            To wait for all ROSpecs to end, check for 0==ROSpecFlags
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ROSpecFlagsZeroed">
            <summary>
            Set when 0==ROSpecFlags; i.e., no ROSpecs are active (i.e., all ROSpecs have ended)
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ROSpecFlagsSet">
            <summary>
            Set when 0!=ROSpecFlags; i.e., ROSpecs are active (i.e., ROSpecs have started)
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.#ctor(System.String,System.Int32)">
            <summary>
            Connect to LLRP reader on default port (5084)
            </summary>
            <param name="host">hostName of llrp reader</param>
            <param name="port">Port Number of llrp reader</param>        
        </member>
        <member name="M:ThingMagic.LlrpReader.#ctor(System.String)">
            <summary>
            Connect to LLRP reader on default port (5084)
            </summary>
            <param name="host">hostName of llrp reader</param>               
        </member>
        <member name="M:ThingMagic.LlrpReader.Connect">
            <summary>
            Connect reader object to device.
            If object already connected, then do nothing.
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.Reboot">
            <summary>
            Reboots the reader device
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.IsLlrpReader">
            <summary>
            Checks the reader is RQL reader or Llrp Reader
            </summary>
            <returns>true/false</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.Destroy">
            <summary>
            Shuts down the connection with the reader device.
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.Read(System.Int32)">
            <summary>
            Read RFID tags for a fixed duration.
            </summary>
            <param name="timeout">the read timeout</param>
            <returns>the read tag data collection</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.WaitForSearchEnd(System.Int32)">
            <summary>
            Wait for search end. For sync read, this method accepts readtimeout as
            timeout and for async read, accepts zero as timeout.
            </summary>
            <param name="readTimeout">timeout need to be added to transport 
            time to block the current thread until the current TagQueueEmptyEvent 
            or ROSpecFlagsZeroed instances receives a signal.</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.UpdateROReport(Org.LLRP.LTK.LLRPV1.MSG_RO_ACCESS_REPORT)">
            <summary>
            Parsing ro access report
            </summary>
            <param name="msg">Ro access report</param>
        </member>
        <member name="F:ThingMagic.LlrpReader.TagQueueAddedEvent">
            <summary>
            Set TagQueueAddedEvent when a new report is added to the tag queue.
            The parser thread will wait on this event when it finds the queue empty,
            so it doesn't have to consume resources while waiting for a new report to appear.
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.TagQueueEmptyEvent">
            <summary>
            The parser thread sets TagQueueEmptyEvent when it finds tag queue empty
            and resets it when the tag queue fills again.  This event is to be used
            by threads that know the flow of reports to the tag queue has been shut
            down and wish to block until the parser thread is finished processing
            the outstanding ones.
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.ParseTagOpSpecResultType(Org.LLRP.LTK.LLRPV1.UNION_AccessCommandOpSpecResult,ThingMagic.TagReadData@)">
            <summary>
            Parse tag opspec result type
            </summary>
            <param name="opSpecResult"></param>
            <param name="tag"></param>
        </member>
        <member name="M:ThingMagic.LlrpReader.ParseCustomTagOpSpecResultType(Org.LLRP.LTK.LLRPV1.thingmagic.ENUM_ThingMagicCustomTagOpSpecResultType)">
            <summary>
            Parse custom tag op spec result type
            </summary>
            <param name="result"></param>
        </member>
        <member name="M:ThingMagic.LlrpReader.StartReading">
            <summary>
            Start reading RFID tags in the background. The tags found will be
            passed to the registered read listeners, and any exceptions that
            occur during reading will be passed to the registered exception
            listeners. Reading will continue until stopReading() is called.
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.StopReading">
            <summary>
            Stop reading RFID tags in the background.
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.FirmwareLoad(System.IO.Stream)">
            <summary>
            Loads firmware on the Reader.
            </summary>
            <param name="firmware">Firmware IO stream</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.FirmwareLoad(System.IO.Stream,ThingMagic.FirmwareLoadOptions)">
            <summary>
            Loads firmware on the Reader.
            </summary>
            <param name="firmware">Firmware IO stream</param>
            <param name="flOptions">firmware load options</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.GpiGet">
            <summary>
            Get the state of all of the reader's GPI pins. 
            </summary>
            <returns>array of GpioPin objects representing the state of all input pins</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GpoSet(System.Collections.Generic.ICollection{ThingMagic.GpioPin})">
            <summary>
            Set the state of some GPO pins.
            </summary>
            <param name="state">array of GpioPin objects</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.ExecuteTagOp(ThingMagic.TagOp,ThingMagic.TagFilter)">
             <summary>
             execute a TagOp
             </summary>
             <param name="tagOP">Tag Operation</param>
             <param name="target">Tag filter</param>
            <returns>the return value of the tagOp method if available</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.KillTag(ThingMagic.TagFilter,ThingMagic.TagAuthentication)">
            <summary>
            Kill a tag. The first tag seen is killed.
            </summary>
            <param name="target">the tag target</param>
            <param name="password">the kill password</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.LockTag(ThingMagic.TagFilter,ThingMagic.TagLockAction)">
            <summary>
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="action">the tag lock action</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.WriteTag(ThingMagic.TagFilter,ThingMagic.TagData)">
            <summary>
            Write a new ID to a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="epc">the tag ID to write</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.WriteTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="byteAddress">the starting memory address to write</param>
            <param name="data">the data to write</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.WriteTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="address">the memory address to write</param>
            <param name="data">the data to write</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.ReadTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="address">the reading starting byte address</param>
            <param name="byteCount">the bytes to read</param>
            <returns>the bytes read</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.ReadTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="wordAddress">the read starting word address</param>
            <param name="wordCount">the number of words to read</param>
            <returns>the read words</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SimpleTransportListener(System.Object,ThingMagic.TransportListenerEventArgs)">
            <summary>
            Simple console-output transport listener
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetReaderDescription(System.Object)">
            <summary>
            Get Reader Description
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetReaderDescription(System.Object)">
            <summary>
            Set Reader Description
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetReaderHostName(System.Object)">
            <summary>
            Get Reader HostName
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetReaderHostName(System.Object)">
            <summary>
            Set Reader HostName
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetConnectedPortList(System.Object)">
            <summary>
            Get Connected Port List
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetReadTransmitPowerList(System.Object)">
            <summary>
            Get Read Transmit PowerList
            </summary>
            <returns>Object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetVersionSerial(System.Object)">
            <summary>
            Get Serial Version
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetVersionHardware(System.Object)">
            <summary>
            Get Hardware Version
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetCurrentTime(System.Object)">
            <summary>
            Get Current Time
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetThingMagicDeDuplicationFields(System.Object,ThingMagic.LlrpReader.ThingMagicDeDuplication)">
            <summary>
            Get ThingMagic DeDuplication fields such as RecordHighestRssi, UniqueByAntenna and UniqueByData.  
            </summary>
            <param name="val"></param>
            <param name="deDuplicationfield"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetThingMagicDeDuplicationFields(System.Object,ThingMagic.LlrpReader.ThingMagicDeDuplication)">
            <summary>
            Set ThingMagic DeDuplication fields such as RecordHighestRssi, UniqueByAntenna and UniqueByData.  
            </summary>
            <param name="val"></param>
            <param name="deDuplicationfield"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetReaderModuleTemperature(System.Object)">
            <summary>
            Get reader module temperature
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetGen2Param(System.String)">
            <summary>
            Get Gen2Param such as Gen2 LinkFrequency and TagEncoding.
            </summary>
            <param name="param"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetAntennaDetection(System.Object)">
            <summary>
            Get Antenna CheckPort
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetAsyncOffTime(System.Object)">
            <summary>
            Get Async Off Time
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetTagEncoding(System.Object)">
            <summary>
            Set TagEncoding
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetGen2BLF(System.Object)">
            <summary>
            Set Gen2BLF
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetAntennaDetection(System.Object)">
            <summary>
            Set Antenna CheckPort
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetAsyncOffTime(System.Object)">
            <summary>
            Set async off time
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetSession(System.Object)">
            <summary>
            Get session
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetThingMagicLicenseKey(System.Object)">
            <summary>
            Set License Key
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetSupportedProtocols(System.Object)">
            <summary>
            Get Supported Protocols
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetGen2Q(System.Object)">
            <summary>
            Get Gen2q
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetCustomGen2Q(System.Object)">
            <summary>
            Set Gen2Q
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetWriteTransmitPowerList(System.Object)">
            <summary>
            Set write transmit power list
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetCustomGen2Target(System.Object)">
            <summary>
            Set Gen2Target
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetCustomGen2Target(System.Object)">
            <summary>
            Get Gen2Target
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetSession(System.Object)">
            <summary>
            Set Session
            </summary>
            <param name="val"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetCustomISO18K6BProtocolConfigurationParams(ThingMagic.LlrpReader.ISO18K6BProtocolConfigurationParams)">
            <summary>
            Get ISO18K6BProtocolConfigurationParams
            </summary>
            <param name="val">enum</param>
            <returns>int</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetCustomISO18K6BProtocolConfigurationParams(ThingMagic.LlrpReader.ISO18K6BProtocolConfigurationParams,System.Object)">
            <summary>
            Set ISO18K6BProtocolConfigurationParams
            </summary>
            <param name="val"></param>
            <param name="type">enum</param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetReaderConfigResponse(Org.LLRP.LTK.LLRPV1.ENUM_GetReaderConfigRequestedData)">
            <summary>
            Get reader configuration response.
            </summary>
            <param name="requestData">ENUM_GetReaderConfigRequestedData</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetCustomReaderConfigResponse(Org.LLRP.LTK.LLRPV1.thingmagic.ENUM_ThingMagicControlConfiguration)">
            <summary>
            Get custom reader configuration response.
            </summary>
            <param name="requestData">ENUM_ThingMagicControlConfiguration</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetCustomReaderCapabilitiesResponse(Org.LLRP.LTK.LLRPV1.thingmagic.ENUM_ThingMagicControlCapabilities)">
            <summary>
            Get Custom Reader Capabilities Response
            </summary>
            <param name="requestData">ENUM_GetReaderCapabilitiesRequestedData</param>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetRFControl(Org.LLRP.LTK.LLRPV1.PARAM_C1G2RFControl)">
            <summary>
            Set RF Control
            </summary>
            <param name="rfControl"></param>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetLinkFrequency(System.Object)">
            <summary>
            Get Link Frequency
            </summary>
            <param name="frequency"></param>
            <returns>Gen2.LinkFrequency</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.SetTari(System.Object)">
            <summary>
            Set Tari
            </summary>
            <param name="tari"></param>
            <returns>object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.DeleteAccessSpecs">
            <summary>
            Delete all AccessSpecs from the reader
            </summary>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildReadOpSpec(ThingMagic.Gen2.ReadData)">
            <summary>
            Create a OpSpec that reads from user memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_C1G2Read</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildWriteDataOpSpec(ThingMagic.TagOp)">
            <summary>
            Create a OpSpec that write into Gen2 memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_C1G2Write</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildWriteTagOpSpec(ThingMagic.TagOp)">
            <summary>
            Create a OpSpec that write epc into Gen2 memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_ThingMagicWriteTag</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildBlockWriteTagOpSpec(ThingMagic.Gen2.BlockWrite)">
            <summary>
            Create a OpSpec that Write a block of data into Gen2 memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_C1G2BlockWrite</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildLockTagOpSpec(ThingMagic.Gen2.Lock)">
            <summary>
            Create a OpSpec to Lock the Gen2 memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_C1G2Lock</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.GetC1G2Payload(ThingMagic.Gen2.LockAction)">
            <summary>
            Build C1G2PayLoad
            </summary>
            <param name="lckAction"></param>
            <returns>PARAM_C1G2LockPayload</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildKillTagOpSpec(ThingMagic.Gen2.Kill)">
            <summary>
            Create a OpSpec that kills the tag
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_C1G2Kill</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildBlockPermaLockTagOpSpec(ThingMagic.Gen2.BlockPermaLock)">
            <summary>
            Create a OpSpec that blocks permanently Gen2 memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_ThingMagicBlockPermalock</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildBlockEraseOpSpec(ThingMagic.Gen2.BlockErase)">
            <summary>
            Create a opspec that erase a block of data
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_C1G2BlockErase</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildHiggs2PartialLoadImage(ThingMagic.Gen2.Alien.Higgs2.PartialLoadImage)">
            <summary>
            Create a opspec for alien higgs2 partial load image 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicHiggs2PartialLoadImage</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildHiggs2FullLoadImage(ThingMagic.Gen2.Alien.Higgs2.FullLoadImage)">
            <summary>
            Create a opspec for alien higgs2 full load image 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicHiggs2FullLoadImage</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildHiggs3FastLoadImage(ThingMagic.Gen2.Alien.Higgs3.FastLoadImage)">
            <summary>
            Create a opspec for alien higgs3 fast load image 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicHiggs3FastLoadImage</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildHiggs3LoadImage(ThingMagic.Gen2.Alien.Higgs3.LoadImage)">
            <summary>
            Create a opspec for alien higgs3 load image 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicHiggs3LoadImage</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildHiggs3BlockReadLock(ThingMagic.Gen2.Alien.Higgs3.BlockReadLock)">
            <summary>
            Create a opspec for alien higgs3 block read lock 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicHiggs3BlockReadLock</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpGen2SetReadProtect(ThingMagic.Gen2.NxpGen2TagOp.SetReadProtect)">
            <summary>
            Create a opspec for nxp gen2 set read protect 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpGen2ResetReadProtect(ThingMagic.Gen2.NxpGen2TagOp.ResetReadProtect)">
            <summary>
            Create a opspec for nxp gen2 reset read protect 
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpGen2ChangeEAS(ThingMagic.Gen2.NxpGen2TagOp.ChangeEas)">
            <summary>
            Create a opspec for nxp gen2 change EAS
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpGen2Calibrate(ThingMagic.Gen2.NxpGen2TagOp.Calibrate)">
            <summary>
            Create a opspec for nxp gen2 Calibrate
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpGen2EASAlarm(ThingMagic.Gen2.NxpGen2TagOp.EasAlarm)">
            <summary>
            Create a opspec for nxp gen2 EAS alarm
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildNxpG2IChangeConfig(ThingMagic.Gen2.NXP.G2I.ChangeConfig)">
            <summary>
            Create a opspec for nxp gen2i change config
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_Custom</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildMonza4QTReadWrite(ThingMagic.Gen2.Impinj.Monza4.QTReadWrite)">
            <summary>
            Create a opspec for Impinj monza4 qtreadwrite
            </summary>
            <param name="tagOperation"></param>
            <returns>PARAM_ThingMagicImpinjMonza4QTReadWrite</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIso180006bReadDataOpSpec(ThingMagic.Iso180006b.ReadData)">
            <summary>
            Create a OpSpec that reads tag memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_ThingMagicISO180006BRead</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIso180006bWriteTagDataOpSpec(ThingMagic.Iso180006b.WriteData)">
            <summary>
            Create a OpSpec that writes on to the iso18k6b tag memory
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_ThingMagicISO180006BWrite</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIso180006bLockTagOpSpec(ThingMagic.Iso180006b.LockTag)">
            <summary>
            Create a OpSpec that Lock a byte of memory on an ISO180006B tag 
            </summary>
            <param name="tagOperation"> Tag operation</param>
            <returns>PARAM_ThingMagicISO180006BLock</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aCommandRequest(ThingMagic.Gen2.IDS.SL900A)">
            <summary>
            Build IDsSl900A common header
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ACommandRequest</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetCalibrationDataTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetCalibrationData)">
            <summary>
             Create a OpSpec writes the calibration block
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASetCalibrationData</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aEndLogTagOpSpec(ThingMagic.Gen2.IDS.SL900A.EndLog)">
            <summary>
            Create a OpSpec that stops the logging procedure
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AEndLog</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aInitializeTagOpSpec(ThingMagic.Gen2.IDS.SL900A.Initialize)">
            <summary>
            Create a OpSpec that sets the delay time and application Data fields
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AInitialize</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetLogModeTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetLogMode)">
            <summary>
            Create a OpSpec that sets the logging form
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASetLogMode</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aStartLogTagOpSpec(ThingMagic.Gen2.IDS.SL900A.StartLog)">
            <summary>
            Create a OpSpec that starts the logging process
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AStartLog</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetSFEParamsTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetSfeParameters)">
            <summary>
            Create a OpSpec that writes the sensor front end parameters to the memory
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASetSFEParams</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetLogLimitsTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetLogLimit)">
            <summary>
            Create a OpSpec that writes 4 log limits
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASetLogLimits</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetIDSPasswordTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetPassword)">
            <summary>
            Create a OpSpec that writes 32bit password
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASetIDSPassword</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSensorValueTagOpSpec(ThingMagic.Gen2.IDS.SL900A.GetSensorValue)">
            <summary>
            Create a OpSpec that gets the sensor value - internal, external1 or external2
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900ASensorValue</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aBatteryLevelTagOpSpec(ThingMagic.Gen2.IDS.SL900A.GetBatteryLevel)">
            <summary>
            Create a OpSpec that gets the voltage level of the battery
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AGetBatteryLevel</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aGetCalibrationDataTagOpSpec(ThingMagic.Gen2.IDS.SL900A.GetCalibrationData)">
            <summary>
            Create a OpSpec reads the calibration field and the SFE parameter field
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AGetCalibrationData</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aLoggingFormTagOpSpec(ThingMagic.Gen2.IDS.SL900A.GetLogState)">
            <summary>
            Create a OpSpec that reads the status of the logging process
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AGetLogState</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDSsL900aGetMeasurementSetupTagOpSpec(ThingMagic.Gen2.IDS.SL900A.GetMeasurementSetup)">
            <summary>
            Create a OpSpec that reads the current system setup of the chip
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSL900AGetMeasurementSetup</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aAccessFifoTagOpSpec(ThingMagic.Gen2.IDS.SL900A.AccessFifo)">
            <summary>
            Create a OpSpec that reads and write data from FIFO
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_Custom Object</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.BuildIDsSL900aSetShelfLifeTagOpSpec(ThingMagic.Gen2.IDS.SL900A.SetShelfLife)">
            <summary>
            buildIDSSL900ASetShelfLife
            </summary>
            <param name="tagOperation">Tag Operation</param>
            <returns>PARAM_ThingMagicIDSSetShelfLife</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.ToSL900aTime(System.DateTime)">
            <summary>
            Convert DateTime to SL900A time
            </summary>
            <param name="dt">DateTime object</param>
            <returns>32-bit SL900A time value</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.AddAccessSpec(Org.LLRP.LTK.LLRPV1.PARAM_AccessSpec)">
            <summary>
            Add the AccessSpec to the reader.
            </summary>
            <param name="accessSpec">AccessS pec</param>
            <returns>true/false</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.EnableAccessSpec(System.UInt32)">
            <summary>
            Enable the AccessSpec
            </summary>
            <param name="accessSpecID">accessSpecID</param>
            <returns>true/false</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.DisableROSpec(System.UInt32)">
            <summary>
            Disable the ROSpec.
            </summary>
            <param name="roSpecId">Ro spec id to disable</param>
            <returns>true/false</returns>
        </member>
        <member name="M:ThingMagic.LlrpReader.ValidateAntenna(System.Int32)">
            <summary>
            Is requested antenna a valid antenna?
            </summary>
            <param name="reqAnt">Requested antenna</param>
            <returns>reqAnt if it is in the set of valid antennas, else throws ArgumentException</returns>
        </member>
        <member name="T:ThingMagic.LlrpReader.ThingMagicPower">
            <summary>
            ThingMagicPower
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ThingMagicPower.PortReadPowerList">
            <summary>
            Port Read Power List
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ThingMagicPower.ReadPower">
            <summary>
            Global Read Power
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ThingMagicPower.PortWritePowerList">
            <summary>
            Port Write Power List
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.ThingMagicPower.WritePower">
            <summary>
            Global Write Power
            </summary>
        </member>
        <member name="T:ThingMagic.LlrpReader.PowerIndex">
            <summary>
            Power index
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.PowerIndex.PowerValue">
            <summary>
            Power Value
            </summary>
        </member>
        <member name="F:ThingMagic.LlrpReader.PowerIndex.IndexValue">
            <summary>
            Power Index
            </summary>
        </member>
        <member name="T:ThingMagic.MultiFilter">
            <summary>
            This represents an ordered sequence of filter operations.
            </summary>
        </member>
        <member name="M:ThingMagic.MultiFilter.#ctor(System.Collections.Generic.ICollection{ThingMagic.TagFilter})">
            <summary>
            Create ordered sequence of filters
            </summary>
            <param name="filters">List of filters</param>
        </member>
        <member name="M:ThingMagic.MultiFilter.Matches(ThingMagic.TagData)">
            <summary>
            Test if a tag Matches this filter. Only applies to selects based
            on the EPC.
            </summary>
            <param name="t">tag data to screen</param>
            <returns>Return true to allow tag through the filter.
            Return false to reject tag.</returns>
        </member>
        <member name="M:ThingMagic.MultiFilter.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:ThingMagic.MultiReadPlan">
            <summary>
            ReadPlan containing a list of read plans to be executed sequentially
            with time divided according to relative weights.
            </summary>
        </member>
        <member name="T:ThingMagic.ReadPlan">
            <summary>
            Tag read (search) constraints
            </summary>
        </member>
        <member name="F:ThingMagic.ReadPlan.DEFAULT_WEIGHT">
            <summary>
            Default for Weight
            </summary>
        </member>
        <member name="F:ThingMagic.ReadPlan.Weight">
            <summary>
            Relative weight for time allocation against other read plans
            </summary>
        </member>
        <member name="M:ThingMagic.ReadPlan.#ctor">
            <summary>
            Create read plan with default weight
            </summary>
        </member>
        <member name="M:ThingMagic.ReadPlan.#ctor(System.Int32)">
            <summary>
            Create read plan
            </summary>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="F:ThingMagic.MultiReadPlan.Plans">
            <summary>
            List of read plans
            </summary>
        </member>
        <member name="F:ThingMagic.MultiReadPlan.TotalWeight">
            <summary>
            Sum of contained ReadPlan weights
            </summary>
        </member>
        <member name="M:ThingMagic.MultiReadPlan.#ctor(System.Collections.Generic.ICollection{ThingMagic.ReadPlan})">
            <summary>
            Create MultiReadPlan
            </summary>
            <param name="plans">List of read plans</param>
        </member>
        <member name="M:ThingMagic.MultiReadPlan.#ctor(System.Collections.Generic.ICollection{ThingMagic.ReadPlan},System.Int32)">
            <summary>
            Create MultiReadPlan
            </summary>
            <param name="plans">List of read plans</param>
            <param name="weight">Relative weight of MultiReadPlan</param>
        </member>
        <member name="M:ThingMagic.MultiReadPlan.ToString">
            <summary>
            Returns a String that represents the current Object.
            </summary>
            <returns>A String that represents the current Object.</returns>
        </member>
        <member name="T:ThingMagic.ReadAuthenticationEventArgs">
            <summary>
            Read Authentication Event Args class
            </summary>
        </member>
        <member name="M:ThingMagic.ReadAuthenticationEventArgs.#ctor(ThingMagic.TagReadData)">
            <summary>
            Read Authentication EventArgs Constructor
            </summary>
            <param name="tagReadData">the tag read data</param>
        </member>
        <member name="P:ThingMagic.ReadAuthenticationEventArgs.TagReadData">
            <summary>
            Tag Read Data
            </summary>
        </member>
        <member name="T:ThingMagic.ReaderCodeException">
            <summary>
            Thrown when an error code is recieved from a reader device
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderCodeException.#ctor(System.String,System.Int32)">
            <summary>
            Create ReaderCodeException
            </summary>
            <param name="code">Numeric error code (ThingMagic fault code)</param>
            <param name="message">Human-readable description of error</param>
        </member>
        <member name="P:ThingMagic.ReaderCodeException.Code">
            <summary>
            ThingMagic fault code
            </summary>
        </member>
        <member name="T:ThingMagic.ReaderCommException">
            <summary>
            Reader communication exception
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderCommException.#ctor(System.String)">
            <summary>
            Create ReaderCommException with no underlying reader message
            </summary>
            <param name="message">Human-readable description of error</param>
        </member>
        <member name="M:ThingMagic.ReaderCommException.#ctor(System.String,System.Byte[])">
            <summary>
            Create ReaderCommException
            </summary>
            <param name="message">Human-readable description of error</param>
            <param name="readerMessage">Copy of raw message that triggered the error</param>
        </member>
        <member name="P:ThingMagic.ReaderCommException.ReaderMessage">
            <summary>
            Copy of raw message that triggered the error
            </summary>
        </member>
        <member name="T:ThingMagic.ReaderExceptionEventArgs">
            <summary>
            Reader Exception Event Args class
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderExceptionEventArgs.#ctor(ThingMagic.ReaderException)">
            <summary>
            Reader Exception EventArgs Constructor
            </summary>
        </member>
        <member name="P:ThingMagic.ReaderExceptionEventArgs.ReaderException">
            <summary>
            Reader Exception
            </summary>
        </member>
        <member name="T:ThingMagic.ReaderFatalException">
            <summary>
            Thrown when there is an error that cannot be recovered from
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderFatalException.#ctor(System.String)">
            <summary>
            Create ReaderFatalException
            </summary>
            <param name="message">Human-readable description of error</param>
        </member>
        <member name="T:ThingMagic.ReaderParseException">
            <summary>
            Thrown when there is an error parsing a message returned from the device
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderParseException.#ctor(System.String)">
            <summary>
            Create ReaderParseException
            </summary>
            <param name="message">Human-readable description of error</param>
        </member>
        <member name="M:ThingMagic.ReaderUtil.MakeWebReq(System.String,System.String)">
            <summary>
            Create web request, using readers' default username and password
            </summary>
            <param name="uripath"></param>
            <param name="hostName"></param>
            <returns></returns>
        </member>
        <member name="T:ThingMagic.RqlFirmwareLoadOptions">
            <summary>
            Fixed reader firmware load options
            </summary>
        </member>
        <member name="M:ThingMagic.RqlFirmwareLoadOptions.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.RqlFirmwareLoadOptions.#ctor(System.Boolean,System.Boolean)">
            <summary>
            Constructor with arguments
            </summary>
            <param name="eContents">true/false</param>
            <param name="rdSettings">true/false</param>
        </member>
        <member name="T:ThingMagic.RqlReader">
            <summary>
            The RqlReader class is an implementation of a Reader object that 
            communicates with a ThingMagic fixed RFID reader via the RQL network protocol.
            
            Instances of the RQL class are created with the Reader.create()method with a 
            "rql" URI or a generic "tmr" URI that references a network device.
            </summary>
        </member>
        <member name="F:ThingMagic.RqlReader._txPower">
            <summary>
            Reader's native TX power setting
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.#ctor(System.String,System.Int32)">
            <summary>
            Connect to RQL reader on default port (8080)
            </summary>
            <param name="host">_hostname of RQL reader</param>
            <param name="port">Port Number of RQL reader</param>        
        </member>
        <member name="M:ThingMagic.RqlReader.CmdSetPowerMode(ThingMagic.Reader.PowerMode)">
            <summary>
            Set the current power mode of the device.
            </summary>
            <param name="powermode">the mode to set</param>
        </member>
        <member name="M:ThingMagic.RqlReader.CmdGetAvailableProtocols">
            <summary>
            Get the list of RFID protocols supported by the device.
            </summary>
            <returns>an array of supported protocols</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.Connect">
            <summary>
            Connect reader object to device.
            If object already connected, then do nothing.
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.Reboot">
            <summary>
            Reboots the reader device
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.Destroy">
            <summary>
            Shuts down the connection with the reader device.
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.SimpleTransportListener(System.Object,ThingMagic.TransportListenerEventArgs)">
            <summary>
            Simple console-output transport listener
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.CmdGetParam(System.String)">
            <summary>
            Get RQL parameter
            </summary>
            <param name="field">RQL parameter name</param>
            <returns>RQL parameter value</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.CmdSetParam(System.String,System.String)">
            <summary>
            Set RQL parameter
            </summary>
            <param name="field">RQL parameter name</param>
            <param name="value">RQL parameter value</param>
        </member>
        <member name="M:ThingMagic.RqlReader.StartReading">
            <summary>
            Start reading RFID tags in the background. The tags found will be
            passed to the registered read listeners, and any exceptions that
            occur during reading will be passed to the registered exception
            listeners. Reading will continue until stopReading() is called.
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.StopReading">
            <summary>
            Stop reading RFID tags in the background.
            </summary>
        </member>
        <member name="M:ThingMagic.RqlReader.Read(System.Int32)">
            <summary>
            Read RFID tags for a fixed duration.
            </summary>
            <param name="milliseconds">the read timeout</param>
            <returns>the read tag data collection</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.GenerateRql(ThingMagic.ReadPlan,System.Int32,System.Collections.Generic.List{System.Int32}@)">
            <summary>
            Convert ReadPlan to RQL SELECT statements
            </summary>
            <param name="rp">ReadPlan to convert</param>
            <param name="milliseconds">Total number of milliseconds to allocate to ReadPlan</param>
            <param name="subTimeouts">Optional output of milliseconds allocated to each RQL subquery</param>
            <returns>List of RQL subqueries</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.GpiGet">
            <summary>
            Get the state of all of the reader's GPI pins. 
            </summary>
            <returns>array of GpioPin objects representing the state of all input pins</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.GpoSet(System.Collections.Generic.ICollection{ThingMagic.GpioPin})">
            <summary>
            Set the state of some GPO pins.
            </summary>
            <param name="state">array of GpioPin objects</param>
        </member>
        <member name="M:ThingMagic.RqlReader.ExecuteTagOp(ThingMagic.TagOp,ThingMagic.TagFilter)">
             <summary>
             execute a TagOp
             </summary>
             <param name="tagOP">Tag Operation</param>
             <param name="target">Tag filter</param>
            <returns>the return value of the tagOp method if available</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.KillTag(ThingMagic.TagFilter,ThingMagic.TagAuthentication)">
            <summary>
            Kill a tag. The first tag seen is killed.
            </summary>
            <param name="target">the tag target</param>
            <param name="password">the kill password</param>
        </member>
        <member name="M:ThingMagic.RqlReader.LockTag(ThingMagic.TagFilter,ThingMagic.TagLockAction)">
            <summary>
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="action">the tag lock action</param>
        </member>
        <member name="M:ThingMagic.RqlReader.Iso180006bLockTag(ThingMagic.TagFilter,System.Byte)">
            <summary>
            Lock a byte of memory on an ISO180006B tag 
            </summary>
            <param name="filter">a specification of the air protocol filtering to perform</param> 
            <param name="address">Indicates the address of tag memory to be (un)locked.</param>  
        </member>
        <member name="M:ThingMagic.RqlReader.ReadTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="address">the reading starting byte address</param>
            <param name="byteCount">the bytes to read</param>
            <returns>the bytes read</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.ReadTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="wordAddress">the read starting word address</param>
            <param name="wordCount">the number of words to read</param>
            <returns>the read words</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.WriteTag(ThingMagic.TagFilter,ThingMagic.TagData)">
            <summary>
            Write a new ID to a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="epc">the tag ID to write</param>
        </member>
        <member name="M:ThingMagic.RqlReader.WriteTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="byteAddress">the starting memory address to write</param>
            <param name="data">the data to write</param>
        </member>
        <member name="M:ThingMagic.RqlReader.WriteTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag target to operate on</param>
            <param name="bank">the tag memory bank</param>
            <param name="address">the memory address to write</param>
            <param name="data">the data to write</param>
        </member>
        <member name="M:ThingMagic.RqlReader.FirmwareLoad(System.IO.Stream)">
            <summary>
            Loads firmware on the Reader.
            </summary>
            <param name="firmware">Firmware IO stream</param>
        </member>
        <member name="M:ThingMagic.RqlReader.FirmwareLoad(System.IO.Stream,ThingMagic.FirmwareLoadOptions)">
            <summary>
            Loads firmware on the Reader.
            </summary>
            <param name="firmware">Firmware IO stream</param>
            <param name="rflOptions">firmware load options</param>
        </member>
        <member name="M:ThingMagic.RqlReader.Query(System.String,System.Int32,System.Boolean)">
            <summary>
            Perform RQL query
            </summary>
            <param name="cmd">Text of query to send</param>
            <param name="cmdTimeout">Number milliseconds to allow query to execute.
            The ultimate comm timeout will be this number plus the transportTimeout.</param>
            <param name="permitEmptyResponse">If true, then first line of RQL response may be empty -- keep looking for response terminator (which is also an empty line.)
            If false, stop receiving response at first empty line.</param>
            <returns>Query response, parsed into individual lines.
            Includes terminating empty line.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.ReceiveBatch(System.Int32,System.Boolean)">
            <summary>
            Receive multi-line response (terminated by empty line)
            </summary>
            <param name="cmdTimeout">Milliseconds of inactivity allowed before timing out receive</param>
            <param name="permitEmptyResponse"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.RqlReader.CleanLeadingNewline(System.Collections.Generic.List{System.String})">
            <summary>
            RQL quirkiness can result in an extra newline being prepended to a response.
            
            If auto mode is active and we issue RESET, the currently-running cursor remains active
            and emits a newline when it's done.  Our receive code ends up tacking this asynchronous newline
            onto the beginning of the next response.
            
            Strip off the leading newline, if present, but not in the case of a legitimate "empty response".
            An empty response occurs when trying to fetch a non-existent field from the params table.
            This response consists of two consecutive newlines: the first represents an empty (i.e., null) value,
            and the second is the response terminator.  This should have been better designed in RQL, but now
            we're stuck with it.
            </summary>
            <param name="response">List of response lines (not including newlines)</param>
        </member>
        <member name="M:ThingMagic.RqlReader.GetField(System.String,System.String)">
            <summary>
            Retrieve an RQL parameter (row from a single-field table).
            Throws exception on empty values -- use only for parameters that aren't allowed to be empty
            (e.g., Reader parameters)
            </summary>
            <param name="name">Parameter name</param>
            <param name="table">Table name</param>
            <returns>Parameter value, or throws ReaderParseException if field has empty value.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.AntennaToRql(System.Int32)">
            <summary>
            Create RQL representing a single antenna
            </summary>
            <param name="ant">Antenna identifiers</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.AntennasToWhereClause(System.Int32[])">
            <summary>
            Create RQL representing a list of antennas
            </summary>
            <param name="ants">List of antenna identifiers</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.ReadPlanToWhereClause(ThingMagic.ReadPlan)">
            <summary>
            Create WHERE clauses representing a ReadPlan
            </summary>
            <param name="readPlan">Read plan</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.TagFilterToWhereClause(ThingMagic.TagFilter)">
            <summary>
            Create WHERE clauses representing a tag filter
            </summary>
            <param name="tagFilter">Tag filter</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.TagProtocolsToWhereClause(ThingMagic.TagProtocol[])">
            <summary>
            Create WHERE clauses representing a list of tag protocols
            </summary>
            <param name="tp">Tag protocols</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.TagProtocolToWhereClause(ThingMagic.TagProtocol)">
            <summary>
            Create WHERE clauses representing a tag protocol
            </summary>
            <param name="tp">Tag protocol</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.MakeTagopWheres">
            <summary>
            Create list of WHERE clauses representing tagop reader configuration (e.g., TagopAntenna, TagopProtocol)
            </summary>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.MakeTagopWheres(ThingMagic.TagFilter)">
            <summary>
            Create list of WHERE clauses representing tagop reader configuration (e.g., /reader/tagop/antenna, /reader/tagop/protocol)
            </summary>
            <param name="filt">Tags to target for tagop</param>
            <returns>List of strings to be incorporated into "WHERE ... AND ..." phrase.
            List may be empty.</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.MakeAccessPasswordWheres">
            <summary>
            Makes Where clause for Access Password
            </summary>
            <returns>List of string with either no elements or the access password WHERE clause</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.CodeToProtocol(System.String)">
            <summary>
             Translate RQL protocol IDs to TagProtocols
            </summary>
            <param name="rqlproto"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.RqlReader.ValidateAntenna(System.Int32)">
            <summary>
            Is requested antenna a valid antenna?
            </summary>
            <param name="reqAnt">Requested antenna</param>
            <returns>reqAnt if it is in the set of valid antennas, else throws ArgumentException</returns>
        </member>
        <member name="M:ThingMagic.RqlReader.ConvertValueToBool(System.String)">
            <summary>
            Convert strin value to bool
            </summary>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.RqlReader.SetParamBoolValue(System.String,System.Boolean)">
            <summary>
            
            </summary>
            <param name="paramName"></param>
            <param name="value"></param>
        </member>
        <member name="T:ThingMagic.RqlReader.MaskedBits">
            <summary>
            Value plus mask; i.e., selectively modify bits within a register, arbitrarily setting them to 0 or 1
            </summary>
        </member>
        <member name="T:ThingMagic.SerialFirmwareLoadOptions">
            <summary>
            Serial reader firmware load options
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader">
            <summary>
            The SerialReader class is an implementation of a Reader object
            that communicates with a ThingMagic embedded RFID module via the embedded module serial protocol. 
            In addition to the Reader interface, direct access to the commands of the embedded module 
            serial protocol is supported.
            
            
            Instances of the SerialReader class are created with the {@link
            #com.thingmagic.Reader.create} method with a "eapi" URI or a
            generic "tmr" URI that references a local serial port.
            </summary>  
        </member>
        <member name="F:ThingMagic.SerialReader.isBAPEnabled">
            <summary>
            Enable/disable BAP feature
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.enableStreaming">
            <summary>
            The switch to turn on/off the tag read streaming
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.allMeta">
            <summary>
            Metadata flags
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader._version">
            <summary>
            Reader version information returned by M5e library
            </summary>
            <remarks>DO NOT use _supportedProtocols directly!  The numbers don't match --
            they're in M5e serial protocol format, not ThingMagic.TagProtocol.</remarks>
        </member>
        <member name="F:ThingMagic.SerialReader.transportType">
            <summary>
            Transport type enum
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.isCRCEnabled">
            <summary>
            To enable or disable crc calculations
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.#ctor(System.String)">
            <summary>
            Make a serial reader with default transport
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.#ctor(System.String,ThingMagic.SerialTransport)">
            <summary>
            Connect to a reader
            </summary>
            <param name="readerUri">URI-style path to serial device; e.g., /COM1</param>
            <param name="transport">Serial transport object</param>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeDefaultTxRxMap">
            <summary>
            Create default TxRxMap
            </summary>
            <returns>Default TxRxMap
             * All connected ports in monostatic mode
             * Logical antenna number equals TX port number
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.Connect">
            <summary>
            Connect reader object to device.
            If object already connected, then do nothing.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.Reboot">
            <summary>
            Reboots the reader device
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.Destroy">
            <summary>
            Shuts down the connection with the reader device.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.SimpleTransportListener(System.Object,ThingMagic.TransportListenerEventArgs)">
            <summary>
            Simple console-output transport listener
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.SetComPort(System.String)">
            <summary>
            Select serial port
            </summary>
            <param name="comport">COM Port</param>
        </member>
        <member name="M:ThingMagic.SerialReader.SetSerialBaudRate(System.Int32)">
             <summary>
             Set the baud rate of the serial port in use.  
            
             NOTE: This is a low-level command and should only be used in
             conjunction with CmdSetBaudRate() or CmdBootBootloader()
             below. For changing the rate used by the API in general, see the
             "/reader/baudRate" parameter.
             </summary>
             <param name="rate">New serial port speed (bits per second)</param>
        </member>
        <member name="M:ThingMagic.SerialReader.ChangeBaudRate(System.Int32)">
            <summary>
            Change serial speed on both module and host sides
            </summary>
            <param name="rate">New serial port speed (bits per second)</param>
        </member>
        <member name="M:ThingMagic.SerialReader.OpenSerialPort(System.String)">
            <summary>
            Initializes Reader Serial Port.
            </summary>
            <param name="comPort">Reader COM Port</param>        
            This function opens the COM port passed as a parameter by the user.
            If the setBaudRate() function is called before Open(), it will use the new baudrate set in the 
            setBaudRate() function.
        </member>
        <member name="M:ThingMagic.SerialReader.SendTimeout(System.Collections.Generic.ICollection{System.Byte},System.Int32)">
            <summary>
            Send command to M5e and get response
            </summary>
            <param name="data">Command to send to M5e, without framing (no SOH, no length, no CRC -- just opcode and arguments)</param>
            <param name="timeout">Command timeout -- how long we expect the command itself to take (milliseconds)</param>
            <returns>M5e response as byte array, including framing (SOH, length, status, CRC)</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.SendTimeoutUnchecked(System.Collections.Generic.ICollection{System.Byte},System.Int32)">
            <summary>
            Send message and receive response.
            </summary>
            <param name="data">Command to send to M5e, without framing (no SOH, no length, no CRC -- just opcode and arguments)</param>
            <param name="timeout">Command timeout -- how long we expect the command itself to take (milliseconds)</param>
            <returns>M5e response as byte array, including framing (SOH, length, status, CRC)</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.sendMessage(System.Collections.Generic.ICollection{System.Byte},System.Byte@,System.Int32)">
            <summary>
            Send message: the transmitting part in "SendTimeoutUnchecked".
            </summary>
            <param name="data">Command to send to M5e, without framing (no SOH, no length, no CRC -- just opcode and arguments)</param>
            <param name="opcode">opcode</param>
            <param name="timeout">Command timeout -- how long we expect the command itself to take (milliseconds)</param>
        </member>
        <member name="M:ThingMagic.SerialReader.receiveMessage(System.Byte,System.Int32)">
            <summary>
            Receive message: the receiving part in "SendTimeoutUnchecked".
            </summary>
            <param name="opcode">opcode</param>
            <param name="timeout">Command timeout -- how long we expect the command itself to take (milliseconds)</param>
            <returns>M5e response as byte array, including framing (SOH, length, status, CRC)</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ReadAll(ThingMagic.SerialTransport,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read from serial port until all requested bytes have arrived.
            </summary>
            <param name="ser"></param>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.DebugMode(System.Int32)">
            <summary>
            Select debugging level
            </summary>
            <param name="onOff">1 for on, 0 for off</param>
        </member>
        <member name="M:ThingMagic.SerialReader.BuildM5eMessage(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Builds M5e Message by adding SOF, Length and CRC.
            </summary>
            <param name="data">Byte array of M5e Opcode and Data</param>
            <returns>Byte Array of the full message with SOF, Length, OpCode, Data and CRC</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetDataFromM5eResponse(System.Byte[])">
            <summary>
            Strips the Data from the M5e response byte array.
            </summary>
            <param name="response">Complete Response array returned by the M5e including header, Length, OpCode,
            status, CRC</param>
            <returns>Data without header, Length, OpCode, status, CRC</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.FirmwareLoad(System.IO.Stream)">
            <summary>
            Load a new firmware image into the device's nonvolatile memory.
            This installs the given image data onto the device and restarts
            it with that image. The firmware must be of an appropriate type
            for the device. Interrupting this operation may damage the
            reader.
            </summary>
            <param name="firmware">a data _stream of the firmware contents</param>
        </member>
        <member name="M:ThingMagic.SerialReader.FirmwareLoad(System.IO.Stream,ThingMagic.FirmwareLoadOptions)">
            <summary>
            Loads firmware on the Reader.
            </summary>
            <param name="firmware">Firmware IO stream</param>
            <param name="flOptions">firmware load options</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdBootFirmware">
            <summary>
            Tell the boot loader to verify the application firmware and execute it.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetGen2WriteResponseWaitTime">
            <summary>
            Parse get gen2 writeresponse wait time response
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetGen2WriteResponseWaitTime(System.Object,System.Object)">
            <summary>
            Set gen2 writeresponse wait time
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdBootBootloader">
            <summary>
            Quit running the application and execute the bootloader. Note
            that this changes the reader's baud rate to 9600; the user is
            responsible for changing the local serial sort speed.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetBaudRate(System.UInt32)">
            <summary>
            Tell the device to change the baud rate it uses for
            communication. Note that this does not affect the host side of
            the serial interface; it will need to be changed separately.
            </summary>
            <param name="bps">the new baud rate to use.</param>
            Initially the UniversalBaudRate is 9600 which is the default on the reader when the application is loaded.
            After setBaudRate() function is called, the embedded reader is set to the new baudrate and the 
            UniversalBaudRate is set to the new baudrate. Subsequent commands to the embedded reader will now use
            the new baudrate. m5e.Baudrate is set to the new baudrate.
        </member>
        <member name="M:ThingMagic.SerialReader.CmdEraseFlash(System.Byte,System.UInt32)">
            <summary>
            Erase a sector of the device's flash.
            </summary>
            <param name="sector">the flash sector, as described in the embedded module user manual</param>
            <param name="password">the erase password for the sector</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdWriteFlash(System.Byte,System.UInt32,System.UInt32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to a previously erased region of the device's flash.
            </summary>
            <param name="sector">the flash sector, as described in the embedded module user manual</param>
            <param name="address">the byte address to start writing from</param>
            <param name="password">the write password for the sector</param>
            <param name="length">the amount of data to write. Limited to 240 bytes.</param>
            <param name="data">the data to write (from offset to offset + length - 1)</param>
            <param name="offset">the index of the data to be writtin in the data array</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdModifyFlash(System.Byte,System.UInt32,System.UInt32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Write data to the device's flash, erasing if necessary.
            </summary>
            <param name="sector">the flash sector, as described in the embedded module user manual</param>
            <param name="address">the byte address to start writing from</param>
            <param name="password">the write password for the sector</param>
            <param name="length">the amount of data to write. Limited to 240 bytes.</param>
            <param name="data">the data to write (from offset to offset + length - 1)</param>
            <param name="offset">the index of the data to be writtin in the data array</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadFlash(System.Byte,System.UInt32,System.Byte)">
            <summary>
            Read the contents of flash from the specified address in the specified flash sector.
            </summary>
            <param name="sector">the flash sector, as described in the embedded module user manual</param>
            <param name="address">the byte address to start reading from</param>
            <param name="length">the number of bytes to read. Limited to 248 bytes.</param>
            <returns>the read data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetSectorSize(System.Byte)">
            <summary>
            Return the size of a flash sector of the device.
            </summary>
            <param name="sector">the flash sector, as described in the embedded module user manual</param>
            <returns>Size of the Sector</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdVerifyImage">
            <summary>
            Verify that the application image in flash has a valid checksum.
            The device will report an invalid checksum with a error code
            response, which would normally generate a ReaderCodeException;
            this routine traps that particular exception and simply returns
            "false".
            </summary>
            <returns>whether the image is valid</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetHardwareVersion(System.Byte,System.Byte)">
            <summary>
            Get a block of hardware version information. This information is
            an opaque data block.        
            </summary>
            <param name="option">opaque option argument</param>
            <param name="flags">opaque flags option</param>
            <returns>the version block</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetSerialNumber">
            <summary>
            Get reader serial number       
            </summary>
            <returns>The module serial number</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetCurrentProgram">
            <summary>
            Return the identity of the program currently running on the
            device (bootloader or application).
            </summary>
            <returns>Current Program code.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTemperature">
            <summary>
            Get the current temperature of the device.
            </summary>
            <returns>the temperature, in degrees C</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdRaw(System.Int32,System.Byte[])">
             <summary>
            Send a raw message to the serial reader.@throws ReaderCommException in the event of a timeout (failure torecieve a complete message in the specified time) or a CRC error.Does not generate exceptions for non-zero status responses.This function not intended for general use.If you really need to use raw reader commands, see the source for further instructions.
             </summary>
             <param name="timeout">the duration in milliseconds to wait for a response</param>
             <param name="message">The bytes of the message to send to the reader,starting with the opcode. The message header, length, and trailing CRC are not included. The message can not be empty, or longer than 251 bytes.</param>
             <returns>The bytes of the response, from the opcode to the end of the message. Header, length, and CRC are not included.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdVersion">
            <summary>
            Get the version information about the device.
            </summary>
            <returns>the VersionInfo structure describing the device.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseVersionResponse(System.Byte[])">
            <summary>
            Parse Get Version response into data structure
            </summary>
            <param name="rsp">Get Version response data bytes</param>
            <returns>Parsed version data structure</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetConnectedPortDict">
            <summary>
            Make set of connected ports
            </summary>
            <returns>Dictionary containing each connected port number as a key.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetLogicalAntennas">
            <summary>
            Get list of logical antenna numbers, as defined in TxRxMap
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetLogicalConnectedAntennas">
            <summary>
            Get list of connected antennas, using logical antenna numbers
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTxRxPorts">
            <summary>
            Get the currently set Tx and Rx antenna port.
            </summary>
            <returns>a two-element array: {tx port, rx port}</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAntennaConfiguration">
            <summary>
            Get the current Tx and Rx antenna port, the number of physical
            ports, and a list of ports where an antenna has been detected.
            </summary>
            <returns>an object containing the antenna port information</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAntennaSearchList">
            <summary>
            Gets the search list of logical antenna ports.
            </summary>
            <returns>
            an array of 2-element arrays of integers interpreted as
            (tx port, rx port) pairs. Example, representing a monostatic
            antenna on port 1 and a bistatic antenna pair on ports 3 and 4:
            {{1, 1}, {3, 4}}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAntennaPortPowers">
            <summary>
            Gets the transmit powers of each antenna port.
            </summary>
            <returns>Returns Antenna associated Read and Write Power
            an array of 3-element arrays of integers interpreted as
            (tx port, read power in centidbm, write power in centidbm)
            triples. Example, with read power levels of 30 dBm and write
            power levels of 25 dBm : {{1, 3000, 2500}, {2, 3000, 2500}}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAntennaPortPowersAndSettlingTime">
            <summary>
            Gets the transmit powers and settling time of each antenna port.
            </summary>
            <returns>an array of 4-element arrays of integers interpreted as
            (tx port, read power in centidbm, write power in centidbm,
            settling time in microseconds) tuples.  An example with two
            antenna ports, read power levels of 30 dBm, write power levels of
            25 dBm, and 500us settling times:
            {{1, 3000, 2500, 500}, {2, 3000, 2500, 500}}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdAntennaDetect">
            <summary>
            Enumerate the logical antenna ports and report the antenna
            detection status of each one.
            </summary>
            <returns>
            an array of 2-element arrays of integers which are
            (logical antenna port, detected) pairs. An example, where logical
            ports 1 and 2 have detected antennas and 3 and 4 do not:
            {{1, 1}, {2, 1}, {3, 0}, {4, 0}}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAntennaReturnLoss">
            <summary>
            Gets the antenna return loss of logical antenna ports.
            </summary>
            <returns>
            an array of 2-element arrays of integers interpreted as
            (tx port, returnloss) pairs.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetTxRxPorts(System.Int32,System.Int32)">
            <summary>
            Sets the Tx and Rx antenna port. Port numbers range from 1-255.
            </summary>
            <param name="txPort">the logical antenna port to use for transmitting</param>
            <param name="rxPort">the logical antenna port to use for receiving</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetAntennaSearchList(System.Byte[][])">
            <summary>
            Sets the search list of logical antenna ports. Port numbers range
            from 1-255.
            </summary>
            <param name="list">
            the ordered search list. An array of 2-element arrays
            of integers interpreted as (tx port, rx port) pairs. Example,
            representing a monostatic antenna on port 1 and a bistatic
            antenna pair on ports 3 and 4: {{1, 1}, {3, 4}}
            </param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetAntennaPortPowers(System.UInt16[][])">
            <summary>
            Sets the transmit powers of each antenna port. Note that setting
            a power level to 0 will cause the corresponding global power
            level to be used. Port numbers range from 1-255; power levels
            range from 0-65535.
            </summary>
            <param name="list">
            an array of 3-element arrays of integers interpreted as
            (tx port, read power in centidbm, write power in centidbm)
            triples. Example, with read power levels of 30 dBm and write
            power levels of 25 dBm : {{1, 3000, 2500}, {2, 3000, 2500}}
            </param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetAntennaPortPowersAndSettlingTime(System.Int16[][])">
            <summary>
            Sets the transmit powers and settling times of each antenna
            port. Note that setting a power level to 0 will cause the
            corresponding global power level to be used. Port numbers range
            from 1-255; power levels range from 0-65535; settling time ranges
            from 0-65535.
            </summary>
            <param name="list">
            an array of 4-element arrays of integers interpreted as
            (tx port, read power in centidbm, write power in centidbm,
            settling time in microseconds) tuples.  An example with two
            antenna ports, read power levels of 30 dBm, write power levels of
            25 dBm, and 500us settling times:
            {{1, 3000, 2500, 500}, {2, 3000, 2500, 500}}
            </param>
        </member>
        <member name="M:ThingMagic.SerialReader.ValidateAntenna(System.Int32)">
            <summary>
            Is requested antenna a valid antenna?
            </summary>
            <param name="reqAnt">Requested antenna</param>
            <returns>reqAnt if it is in the set of valid antennas, else throws ArgumentException</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdAuthReqResponse(System.UInt32)">
            <summary>
            Send new message to tag with secure accesspassword corresponding with tag epc 
            </summary>
            <param name="password">secure accesspassword to read tag data</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAvailableRegions">
            <summary>
            Get the list of regulatory regions supported by the device.
            </summary>
            <returns>an array of supported regions</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetRegion">
            <summary>
            Gets the current region the device is configured to use.
            </summary>
            <returns>the region</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetRegion(ThingMagic.Reader.Region)">
            <summary>
            Set the current regulatory region for the device. Resets region-specific 
            configuration, such as the frequency hop table.
            </summary>
            <param name="region">the region to set</param>        
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetRegionLbt(ThingMagic.Reader.Region,System.Boolean)">
            <summary>
            Set the current regulatory region for the device.
            Resets region-specific configuration, such as the frequency hop table.
            </summary>
            <param name="region">Region code</param>        
            <param name="lbt">Enable LBT?</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetRegionConfiguration(ThingMagic.SerialReader.RegionConfiguration)">
            <summary>
            Get the value of a region-specific configuration setting.
            </summary>
            <param name="key">the setting</param>
            <returns>
            Object with the setting value. The type of the object depends on the key.
            See the RegionConfiguration class for details.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseRegion(System.Byte)">
            <summary>
            Convert byte to region code
            </summary>
            <param name="b"></param>
            <returns>Region code</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseSerialRegions(System.Byte[])">
            <summary>
            Convert array of bytes into list of region codes
            </summary>
            <param name="bs">Array of bytes representing region codes</param>
            <returns>List of regions</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.RegionToM5e(ThingMagic.Reader.Region)">
            <summary>
            Convert Region to M5eLibrary.Region
            </summary>
            <param name="tmreg">Region</param>
            <returns>M5eLibrary.Region</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.RegionToTM(ThingMagic.SerialReader.SerialRegion)">
            <summary>
            Convert M5eLibrary.Region to Region
            </summary>
            <param name="m5ereg">M5eLibrary.Region</param>
            <returns>Region</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.RegionsToTM(ThingMagic.SerialReader.SerialRegion[])">
            <summary>
            Convert M5eLibrary.Region[] to Region[]
            </summary>
            <param name="inreg">M5eLibrary.Region</param>
            <returns>Region</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetReadTxPower">
            <summary>
            Get the current global Tx power setting for read operations.
            </summary>
            <returns>the power setting, in centidbm</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetReadTxPowerWithLimits">
            <summary>
            Get the current global Tx power setting for read operations, and the
            minimum and maximum power levels supported.
            </summary>
            <returns>
            a three-element array: {tx power setting in centidbm,
            maximum power, minimum power}. Example: {2500, 3000, 500}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetReadTxPower(System.Int16)">
            <summary>
            Set the current global Tx power setting for read operations.
            </summary>
            <param name="power">the power level</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetWriteTxPower">
            <summary>
            Get the current global Tx power setting for write operations.
            </summary>
            <returns>the power setting, in centidbm</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetWriteTxPowerWithLimits">
            <summary>
            Get the current global Tx power setting for write operations, and the
            minimum and maximum power levels supported.
            </summary>
            <returns>
            a three-element array: {tx power setting in centidbm,
            maximum power, minimum power}. Example: {2500, 3000, 500}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetWriteTxPower(System.Int16)">
            <summary>
            Set the current global Tx power setting for write operations.
            </summary>
            <param name="power">the power level.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetPowerMode">
            <summary>
            Gets the current power mode of the device.
            </summary>
            <returns>the power mode</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetPowerMode(ThingMagic.Reader.PowerMode)">
            <summary>
            Set the current power mode of the device.
            </summary>
            <param name="powermode">the mode to set</param>
        </member>
        <member name="M:ThingMagic.SerialReader.ParsePowerMode(System.Byte)">
            <summary>
            Parses byte value returned by the m5e to a valid PowerMode
            </summary>
            <param name="b">Byte value of Power Mode</param>
            <returns>Valid Power Mode</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetUserMode">
            <summary>
            Gets the current user mode of the device.
            </summary>
            <returns>the user mode</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetUserMode(ThingMagic.SerialReader.UserMode)">
            <summary>
            Set the current user mode of the device.
            </summary>
            <param name="usermode">the mode to set</param>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseUserMode(System.Byte)">
            <summary>
            Parses byte value returned by the M5e to a valid User Mode.
            </summary>
            <param name="b">Byte value of the User Mode</param>
            <returns>Valid User Mode</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetTarget">
            <summary>
            Get Gen2 Target
            </summary>
            <returns>Target Value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.SetTarget(ThingMagic.Gen2.Target)">
            <summary>
            Set Gen2 Target
            </summary>
            <param name="value">Target to set</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetReaderConfiguration(ThingMagic.SerialReader.Configuration)">
            <summary>
            Gets the value of a device configuration setting.
            </summary>
            <param name="key">the setting</param>
            <returns>
            an object with the setting value. The type of the object
            is dependant on the key; see the Configuration class for details.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetReaderConfiguration(ThingMagic.SerialReader.Configuration,System.Object)">
            <summary>
            Sets the value of a device configuration setting.
            </summary>
            <param name="key">the setting</param>
            <param name="value">
            an object with the setting value. The type of the object
            is dependant on the key; see the Configuration class for details.
            </param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetProtocolLicenseKey(System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            set protocol license key
            </summary>
            <param name="key">the license key</param>
            <returns> the supported protocol bit mask</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetProtocolLicenseKey(System.Collections.Generic.ICollection{System.Byte},ThingMagic.SerialReader.SetProtocolLicenseOption)">
            <summary>
            set protocol license key
            </summary>
            <param name="key">the license key</param>        
            <param name="lkOption">Set/erase license key</param>
            <returns> the supported protocol bit mask</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseReaderConfigurationValueToObject(ThingMagic.SerialReader.Configuration,System.Byte)">
            <summary>
            Parses the byte value of the reader configuration value.
            </summary>
            <param name="key">Key whose corresponding value is to be found.</param>
            <param name="b">Byte value of the corresponding Value</param>
            <returns>Bool or Byte value of the corresponding Value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseReaderConfigurationValueToObject(ThingMagic.SerialReader.Configuration,System.Byte[])">
            <summary>
            Parse multi-byte reader configuration value
            </summary>
            <param name="key">Key whose corresponding value is to be found.</param>
            <param name="b">Byte value of the corresponding Value</param>
            <returns>Parsed value, with key-specific type</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseReaderConfigurationValueToByte(ThingMagic.SerialReader.Configuration,System.Object)">
            <summary>
            Parses the object value of the reader configuration value.
            </summary>
            <param name="key">Key whose corresponding value is to be found.</param>
            <param name="b">Bool or Byte value of the corresponding Value</param>
            <returns>Byte value of the corresponding Value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetUserProfile(ThingMagic.SerialReader.UserConfigOperation,ThingMagic.SerialReader.UserConfigCategory,ThingMagic.SerialReader.UserConfigType)">
            <summary>
            Save/Restore/Verify/Clear the configurations.
            </summary>
            <param name="option">the operation option</param>
            <param name="key">the setting</param>
            <param name="val">the value</param>
        </member>
        <member name="M:ThingMagic.SerialReader.cmdGetUserProfile(System.Byte[])">
            <summary>
            Get the configurations from flash.
            </summary>
            <param name="opCode">the opcode</param>
            <returns> The value of the profile parameter</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetAvailableProtocols">
            <summary>
            Get the list of RFID protocols supported by the device.
            </summary>
            <returns>an array of supported protocols</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetProtocol(ThingMagic.TagProtocol)">
            <summary>
            Set the current RFID protocol for the device to use.
            </summary>
            <param name="proto">the protocol to use</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetProtocol">
            <summary>
            Get the current RFID protocol the device is configured to use.
            </summary>
            <returns>the current protocol</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetProtocolConfiguration(ThingMagic.TagProtocol,ThingMagic.SerialReader.ProtocolConfiguration)">
            <summary>
            Gets the value of a protocol configuration setting.
            </summary>
            <param name="protocol">the protocol of the setting</param>
            <param name="key">the setting</param>
            <returns>
            an object with the setting value. The type of the object
            is dependant on the key; see the ProtocolConfiguration class for details.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetProtocolConfiguration(ThingMagic.TagProtocol,ThingMagic.SerialReader.ProtocolConfiguration,System.Object)">
            <summary>
            Set Protocol Configuration.
            </summary>
            <param name="protocol">Protocol</param>
            <param name="key">Protocol Configuration Key</param>
            <param name="value">Protocol Configuration Value</param>
        </member>
        <member name="M:ThingMagic.SerialReader.TranslateProtocol(ThingMagic.SerialReader.SerialTagProtocol)">
            <summary>
            Translate tag protocol codes from M5e internal to ThingMagic external representation.
            </summary>
            <param name="intProt">Internal M5e tag protocol code</param>
            <returns>External ThingMagic protocol code</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.TranslateProtocol(ThingMagic.TagProtocol)">
            <summary>
            Translate tag protocol codes from M5e internal to ThingMagic external representation.
            </summary>
            <param name="intProt">Internal M5e tag protocol code</param>
            <returns>External ThingMagic protocol code</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetGen2ProtocolConfigObjectFromByte(ThingMagic.SerialReader.ProtocolConfiguration,System.Byte[])">
            <summary>
            private function to convert bytes to protocol configuration based objects
            </summary>
            <param name="key">Protocol configuration key</param>
            <param name="value">Value in bytes</param>
            <returns>Protocol configuration object</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.Gen2ProtocolConfigObjectToByte(ThingMagic.SerialReader.ProtocolConfiguration,System.Object)">
            <summary>
            Private function to convert Protocol Configuration Object to Byte array.
            </summary>
            <param name="key">Protocol Configuration Key</param>
            <param name="value">Protocol Configuration Value</param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.Iso180006bProtocolConfigObjectToByte(ThingMagic.SerialReader.ProtocolConfiguration,System.Object)">
            <summary>
            Private function to convert Protocol Configuration Object to Byte array.
            </summary>
            <param name="key">Protocol Configuration Key</param>
            <param name="value">Protocol Configuration Value</param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetIso180006bProtocolConfigObjectFromByte(ThingMagic.SerialReader.ProtocolConfiguration,System.Byte[])">
            <summary>
            private function to convert bytes to protocol configuration based objects
            </summary>
            <param name="key">Protocol configuration key</param>
            <param name="value">Value in bytes</param>
            <returns>Protocol configuration object</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetFrequencyHopTable">
            <summary>
            Gets the frequencies in the current hop table
            </summary>
            <returns>an array of the frequencies in the hop table, in kHz</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetFrequencyHopTime">
            <summary>
            Gets the interval between frequency hops.
            </summary>
            <returns>the hop interval, in milliseconds</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetFrequencyHopTable(System.UInt32[])">
            <summary>
            Set the frequency hop table.
            </summary>
            <param name="frequency">A list of frequencies, in kHz. The list may be at most 62 elements.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetFrequencyHopTime(System.UInt32)">
            <summary>
            Set the interval between frequency hops. The valid range for this
            interval is region-dependent.
            </summary>
            <param name="hopTime">the hop interval, in milliseconds</param>
        </member>
        <member name="M:ThingMagic.SerialReader.Read(System.Int32)">
            <summary>
            Read RFID tags for a fixed duration.
            </summary>
            <param name="timeout">the time to spend reading tags, in milliseconds</param>
            <returns>the tags read</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CompareAntennas(ThingMagic.ReadPlan[])">
            <summary>
            Compare antenna list in readplans list, return true if antenna
            list are consistent across the entire set of read plans.
            </summary>
            <param name="readPlanList"> Accepts readplans list</param>
            <returns>True, if antennalist are consistent across the entire
            set of read plans else return false </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseResponseByte(System.Byte,ThingMagic.SerialReader.BoolResponse)">
            <summary>
            Internal method to parse response byte in the 22h command response
            </summary>
            <param name="responseByte">responseByte</param>
            <param name="br"></param>
            <returns>true/false</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.StartReading">
            <summary>
            Start reading RFID tags in the background. The tags found will be
            passed to the registered read listeners, and any exceptions that
            occur during reading will be passed to the registered exception
            listeners. Reading will continue until stopReading() is called.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.StopReading">
            <summary>
            Stop reading RFID tags in the background.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.KillTag(ThingMagic.TagFilter,ThingMagic.TagAuthentication)">
            <summary>
            Kill a tag. The first tag seen is killed.
            </summary>
            <param name="target">the tag to kill, or null</param>
            <param name="password">the authentication needed to kill the tag</param>
        </member>
        <member name="M:ThingMagic.SerialReader.LockTag(ThingMagic.TagFilter,ThingMagic.TagLockAction)">
            <summary>
            Perform a lock or unlock operation on a tag. The first tag seen
            is operated on - the singulation parameter may be used to control
            this. Note that a tag without an access password set may not
            accept a lock operation or remain locked.
            </summary>
            <param name="target">the tag to lock, or null</param>
            <param name="action">the locking action to take</param>
        </member>
        <member name="M:ThingMagic.SerialReader.ReadTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag. 
            </summary>
            <param name="target">the tag to read from, or null</param>
            <param name="bank">the tag memory bank to read from</param>
            <param name="byteAddress">the byte address to start reading at</param>
            <param name="byteCount">the number of bytes to read</param>
            <returns>the bytes read</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ReadTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Int32)">
            <summary>
            Read data from the memory bank of a tag.
            </summary>
            <param name="target">the tag to read from, or null</param>
            <param name="bank">the tag memory bank to read from</param>
            <param name="wordAddress">the word address to start reading from</param>
            <param name="wordCount">the number of words to read</param>
            <returns>the words read</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.WriteTag(ThingMagic.TagFilter,ThingMagic.TagData)">
            <summary>
            Write a new ID to a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="epc">the new tag ID to write</param>
        </member>
        <member name="M:ThingMagic.SerialReader.WriteTagMemBytes(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="bank">the tag memory bank to write to</param>
            <param name="address">the byte address to start writing to</param>
            <param name="data">the bytes to write</param>
        </member>
        <member name="M:ThingMagic.SerialReader.WriteTagMemWords(ThingMagic.TagFilter,System.Int32,System.Int32,System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            Write data to the memory bank of a tag.
            </summary>
            <param name="target">the tag to write to, or null</param>
            <param name="bank">the tag memory bank to write to</param>
            <param name="address">the word address to start writing to</param>
            <param name="data">the words to write</param>
        </member>
        <member name="M:ThingMagic.SerialReader.BlockWrite(ThingMagic.TagFilter,ThingMagic.Gen2.Bank,System.UInt32,System.Collections.Generic.ICollection{System.UInt16})">
            <summary>
            BlockWrite
            </summary>
            <param name="bank">the Gen2 memory bank to write to</param>
            <param name="wordPtr">the word address to start writing to</param>
            <param name="data">the data to write</param>
            <param name="target">the tag to write to, or null</param>
        </member>
        <member name="M:ThingMagic.SerialReader.BlockPermaLock(ThingMagic.TagFilter,System.Byte,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt16[])">
            <summary>
            BlockPermalock
            </summary>
            <param name="target">the tag to lock, or null</param>
            <param name="readLock">read or lock?</param>
            <param name="bank">memory bank</param>
            <param name="blockPtr">the staring word address to lock</param>
            <param name="blockRange">number of 16 blocks</param>
            <param name="mask">mask</param>
            <returns>the return data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ExecuteTagOp(ThingMagic.TagOp,ThingMagic.TagFilter)">
             <summary>
             execute a TagOp
             </summary>
             <param name="tagOP">Tag Operation</param>
             <param name="target">Tag filter</param>
            <returns>the return value of the tagOp method if available</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdMultiProtocolSearch(ThingMagic.SerialReader.CmdOpcode,System.Collections.Generic.List{ThingMagic.SimpleReadPlan},ThingMagic.SerialReader.TagMetadataFlag,ThingMagic.SerialReader.AntennaSelection,System.UInt16)">
            <summary>
            lv3 command supporting multiple protocol search
            </summary>
            <param name="op">opcode</param>
            <param name="readPlanList">readplan list</param>
            <param name="metadataFlags">metadataflags</param>
            <param name="antennas">antenna selection</param>
            <param name="timeout">timeout</param>
            <returns>collected tags</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2DataWrite(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.UInt16[])">
            <summary>
            Assemble the embedded command for DataWrite
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">The operation timeout</param>
            <param name="bank">The memory bank to write</param>
            <param name="wordAddress">Write starting address</param>
            <param name="data">The data to write</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2DataRead(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,ThingMagic.Gen2.SecureTagType)">
            <summary>
            Assemble the embedded command for DataRead
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">The operation timeout</param>
            <param name="bank">The memory bank to read</param>
            <param name="wordAddress">Read starting address</param>
            <param name="length">The length of data to read</param>
            <param name="secureTagType"> Enum SecureTagType </param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2LockTag(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Assemble the embedded command for Lock
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">The operation timeout</param>
            <param name="accessPassword">The access password</param>
            <param name="mask">Bitmask indicating which lock bits to change </param>
            <param name="action">The lock action</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2KillTag(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32)">
            <summary>
            Assemble the embedded command for Kill
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">The operation timeout</param>
            <param name="killPassword">Kill password to use to kill the tag</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2BlockWrite(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.UInt16[],System.UInt32,ThingMagic.TagFilter)">
            <summary>
            assemble the embedded command for BlockWrite
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">timeout</param>
            <param name="memBank">memory bank</param>
            <param name="wordPtr">word pointer</param>
            <param name="data">data</param>
            <param name="accessPassword">access password</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2BlockPermaLock(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.Byte,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt16[],System.UInt32,ThingMagic.TagFilter)">
            <summary>
            BlockPermaLock
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">timeout</param>
            <param name="readLock">read or lock?</param>
            <param name="memBank">the tag memory bank to lock</param>
            <param name="blockPtr">the staring word address to lock</param>
            <param name="blockRange">number of 16 blocks</param>
            <param name="mask">mask</param>
            <param name="accessPassword">access password</param>
            <param name="target">the tag to lock</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddGEN2WriteTagEPC(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.TagData)">
            <summary>
            WriteTagEpc
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">timeout</param>
            <param name="epc">New epc</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTagsRemaining">
            <summary>
            Get the number of tags stored in the tag buffer
            </summary>
            <returns>
            a three-element array containing: {the number of tags
            remaining, the current read index of the tag buffer, the
            current write index of the tag buffer}.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdClearTagBuffer">
            <summary>
            Clear the tag buffer.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.msgSetupReadTagSingle(ThingMagic.SerialReader.TagMetadataFlag,ThingMagic.TagFilter,System.UInt16)">
            <summary>
            Assembly ReadTagSignle Cmd bytes
            </summary>
            <param name="metadataFlags">The metadata flags</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="timeout">cmd timeout</param>
            <returns>ReadTagSignle Cmd bytes</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgSetupReadTagMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,ThingMagic.TagProtocol,ThingMagic.SerialReader.TagMetadataFlag,System.Int32)">
            <summary>
            Assembly ReadTagMultiple Cmd bytes
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antennas">the antenna or antennas to use for the search</param>
            <param name="filt">a specification of the air protocol filtering to perform</param>
            <param name="protocol">The reader's current tag protocol setting (controls formatting of the Read Tag Multiple command)</param>
            <param name="metadataFlags">The metadata flags</param>
            <param name="accessPassword">The access password</param>
            <returns>the command byte list</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,ThingMagic.TagProtocol)">
            <summary>
            Search for tags for a specified amount of time.
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antennas">the antenna or antennas to use for the search</param>
            <param name="filt">a specification of the air protocol filtering to perform</param>
            <param name="protocol">The reader's current tag protocol setting (controls formatting of the Read Tag Multiple command)</param>
            <returns>the number of tags found</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.executeEmbeddedRead(System.Collections.Generic.List{System.Byte},System.UInt16)">
            <summary>
            Execute the embedded command
            </summary>
            <param name="msg">The command bytes excluding SOH,Length and CRC</param>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <returns>The number of tag found</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagSingle(System.UInt16,ThingMagic.SerialReader.TagMetadataFlag,ThingMagic.TagFilter,ThingMagic.TagProtocol)">
            <summary>
            Search for a single tag for up to a specified amount of time.
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag. Valid range is 0-65535</param>
            <param name="metadataFlags">the set of metadata values to retrieve and store in the returned object</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.</param>
            <returns>a TagReadData object containing the tag found and
            the metadata associated with the successful search, or
            null if no tag is found.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetAllTagReads(System.DateTime,System.Int32,ThingMagic.TagProtocol)">
            <summary>
            Fetch all available tag reads from buffer and convert metadata to higher-level values
            </summary>
            <param name="baseTime">Time that search started.
            GetTagReads() only provides search-relative read times.
            This method adds an absolute reference time.</param>
            <param name="tagCount">Number of tag reads to fetch.</param>
            <param name="protocol">The reading protocol</param>
            <returns>List of tag read records</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GetTagReads(System.Int32,ThingMagic.TagProtocol)">
            <summary>
            Fetch tag reads from buffer using as many commands as necessary (not limited by capacity of a single command)
            </summary>
            <param name="tagCount">Number of tag reads to fetch from tag buffer</param>
            <param name="protocol">The reading protocol</param>
            <returns>List of tag read records</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.RemoveCorruptedTags(ThingMagic.TagReadData[])">
            <summary>
            Ignoring invalid tag response (epcLen goes to negative)
            </summary>
            <param name="tags">list of read tags</param>
            <returns> Returns non corrupted tags in list </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.RemoveCorruptedTags(ThingMagic.TagData[])">
            <summary>
            Ignoring invalid tag response (epcLen goes to negative)
            </summary>
            <param name="tags">list of read tags</param>
            <returns> Returns non corrupted tags in list </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTagBuffer(System.UInt16,System.Boolean,ThingMagic.TagProtocol)">
            <summary>
            Get tag data of a number of tags from the tag buffer. This command moves a read index into the tag buffer, so that repeated calls will fetch all of the tags in the buffer. 
            </summary>
            <param name="count">the maximum of tags to get from the buffer. No more than 65535 may be requested. It is an error to request more tags than exist.</param>
            <param name="epc496">Whether the EPCs expected are 496 bits (true) or 96 bits (false)</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.
            Will be overridden by fetched information if TagMetadataFlag.PROTOCOL is present in metadataFlags.</param>
            <returns>the tag data. Fewer tags may be returned than were requested.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTagBuffer(System.UInt16,System.UInt16,System.Boolean,ThingMagic.TagProtocol)">
            <summary>
            Get tag data of a tags from certain locations in the tag buffer, without updating the read index. 
            </summary>
            <param name="start">the start index to read from</param>
            <param name="end">the end index to read to </param>
            <param name="epc496">Whether the EPCs expected are 496 bits (true) or 96 bits (false)</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.
            Will be overridden by fetched information if TagMetadataFlag.PROTOCOL is present in metadataFlags.</param>
            <returns>the tag data. Fewer tags may be returned than were requested.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetTagBuffer(ThingMagic.SerialReader.TagMetadataFlag,System.Boolean,ThingMagic.TagProtocol)">
            <summary>
            Get tag data and associated read metadata from the tag buffer.
            </summary>
            <param name="metadataFlags">the set of metadata values to retrieve and store in the returned objects</param>
            <param name="resend">whether to resend the same tag data sent in a previous call</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.
            Will be overridden by fetched information if TagMetadataFlag.PROTOCOL is present in metadataFlags.</param>
            <returns>an array of TagReadData objects containing the tag and requested metadata</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdWriteTagEpc(System.UInt16,System.Byte[],System.Boolean)">
            <summary>
            Write the EPC of a tag and update the PC bits. Behavior is
            unspecified if more than one tag can be found.
            </summary>
            <param name="timeout">
            the duration in milliseconds to search for a tag
            to write. Valid range is 0-65535
            </param>
            <param name="EPC">the EPC to write to the tag</param>
            <param name="Lock">whether to lock the tag (does not apply to all protocols)</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdWriteTagEpc(System.UInt16,System.Byte[],System.Boolean,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Write the EPC of a tag and update the PC bits. Behavior is
            unspecified if more than one tag can be found.
            </summary>
            <param name="timeout">
            the duration in milliseconds to search for a tag
            to write. Valid range is 0-65535
            </param>
            <param name="EPC">the EPC to write to the tag</param>
            <param name="Lock">whether to lock the tag (does not apply to all protocols)</param>
            <param name="accessPassword">the password to use when writing the tag</param>
            <param name="filter">a specification of the air protocol filtering to perform to find the tag</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGen2WriteTagData(System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.Byte[],System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Write data to a Gen2 tag.
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag to write to. Valid range is 0-65535</param>
            <param name="memBank">the Gen2 memory bank to write to</param>
            <param name="address">the word address to start writing at</param>
            <param name="data">the data to write - must be an even number of bytes</param>
            <param name="accessPassword">the password to use when writing the tag</param>
            <param name="filter">a specification of the air protocol filtering to perform to find the tag</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdIso180006bWriteTagData(System.UInt16,System.Byte,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Write data to an ISO180006B tag.
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag to write to. Valid range is 0-65535</param>
            <param name="address">the byte address to start writing at</param>
            <param name="data">the data to write - must be an even number of bytes</param>
            <param name="filter">a specification of the air protocol filtering to perform to find the tag</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGen2LockTag(System.UInt16,System.UInt16,System.UInt16,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Lock a Gen2 tag 
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag to lock. Valid range is 0-65535</param>
            <param name="mask">the Gen2 lock mask</param>
            <param name="action">the Gen2 lock action</param>
            <param name="accessPassword">the password to use when locking the tag</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>       
        </member>
        <member name="M:ThingMagic.SerialReader.CmdIso180006bLockTag(System.UInt16,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Lock a byte of memory on an ISO180006B tag 
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag to lock. Valid range is 0-65535</param>
            <param name="address">Indicates the address of tag memory to be (un)locked.</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>       
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGen2ReadTagData(System.UInt16,ThingMagic.SerialReader.TagMetadataFlag,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Read the memory of a Gen2 tag.
            </summary>
            <param name="timeout">the duration in milliseconds to search for the operation. Valid range is 0-65535</param>
            <param name="metadataFlags">the set of metadata values to retreive and store in the returned object</param>
            <param name="bank">the Gen2 memory bank to read from</param>
            <param name="address">the word address to start reading from</param>
            <param name="count">the number of words to read.</param>
            <param name="accessPassword">the password to use when writing the tag</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <returns>
            a TagReadData object containing the tag data and any
            requested metadata (note: the tag EPC will not be present in the
            object)
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdIso180006bReadTagData(System.UInt16,System.Byte,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Read the memory of an ISO180006B tag.
            </summary>
            <param name="timeout">the duration in milliseconds to search for the operation. Valid range is 0-65535</param>
            <param name="address">the byte address to start reading from</param>
            <param name="count">the number of bytes to read.</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <returns>
            a TagReadData object containing the tag data and any
            requested metadata (note: the tag EPC will not be present in the
            object)
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdKillTag(System.UInt16,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Kill a Gen2 tag.
            </summary>
            <param name="timeout">the duration in milliseconds to search for a tag to kill. Valid range is 0-65535</param>
            <param name="password">Tag's kill password</param>
            <param name="filt">a specification of the air protocol filtering to perform</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdBlockWrite(System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt16[],System.UInt32,ThingMagic.TagFilter)">
            <summary>
            BlockWrite command
            </summary>
            <param name="timeout">timeout</param>
            <param name="memBank">the Gen2 memory bank to write to</param>
            <param name="wordPtr">the word address to start writing to</param>
            <param name="wordCount">the length of the data to write in words</param>
            <param name="data">the data to write</param>
            <param name="accessPassword">accessPassword</param>
            <param name="target">the tag to write to, or null</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdBlockPermaLock(System.UInt16,System.Byte,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt16[],System.UInt32,ThingMagic.TagFilter)">
            <summary>
            BlockPermaLock
            </summary>
            <param name="timeout">timeout</param>
            <param name="readLock">read or lock?</param>
            <param name="memBank">the tag memory bank to lock</param>
            <param name="blockPtr">the staring word address to lock</param>
            <param name="blockRange">number of 16 blocks</param>
            <param name="mask">mask</param>
            <param name="accessPassword">access password</param>
            <param name="target">the tag to lock</param>
            <returns>the return data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdEraseBlockTagSpecific(ThingMagic.Gen2.Bank,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Erase a range of words on a Gen2 tag that supports the 
            optional Erase Block command.
            </summary>        
            <param name="bank">Memory bank</param>
            <param name="address">Address</param>
            <param name="count">Word Count</param>        
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddEraseBlockTagSpecific(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.Gen2.Bank,System.UInt32,System.Byte,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Erase a range of words on a Gen2 tag that supports the 
            optional Erase Block command.
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">Timeout to erase block</param>
            <param name="bank">Memory bank</param>
            <param name="wordPtr">Address</param>
            <param name="wordCount">Word Count</param>
            <param name="accessPassword">the access password to erase the block on the tag</param>
            <param name="target">target</param>        
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagAndKillMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,System.UInt32,System.UInt32)">
            <summary>
            Search for tags for a specified amount of time and kill each one.
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antenna">the antenna or antennas to use for the search</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="accessPassword">the access password to use when killing the tag</param>
            <param name="killPassword">the kill password to use when killing found tags</param>
            <returns>
            A three-element array: {the number of tags found, the
            number of tags successfully killed, the number of tags
            unsuccessfully killed}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagAndLockMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,System.UInt32,System.UInt16,System.UInt16)">
            <summary>
            Search for tags for a specified amount of time and lock each one.
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antenna">the antenna or antennas to use for the search</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="accessPassword">the password to use when locking the tag</param>
            <param name="mask">the Gen2 lock mask</param>
            <param name="action">the Gen2 lock action</param>
            <returns>
            A three-element array: {the number of tags found, the
            number of tags successfully locked, the number of tags
            unsuccessfully locked}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagAndDataWriteMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,System.UInt32,ThingMagic.Gen2.Bank,System.UInt32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Search for tags for a specified amount of time and write data to each one.
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antenna">the antenna or antennas to use for the search</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="accessPassword">the password to use when writing the tag</param>
            <param name="bank">the Gen2 memory bank to write to</param>
            <param name="address">the word address to start writing at</param>
            <param name="data">the data to write</param>
            <returns>
            A three-element array: {the number of tags found, the
            number of tags successfully written to, the number of tags
            unsuccessfully written to}.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdReadTagAndDataReadMultiple(System.UInt16,ThingMagic.SerialReader.AntennaSelection,ThingMagic.TagFilter,System.UInt32,ThingMagic.Gen2.Bank,System.UInt32,System.Byte)">
            <summary>
            Search for tags for a specified amount of time and read data from each one.
            </summary>
            <param name="timeout">the duration in milliseconds to search for tags. Valid range is 0-65535</param>
            <param name="antenna">the antenna or antennas to use for the search</param>
            <param name="filter">a specification of the air protocol filtering to perform</param>
            <param name="accessPassword">the password to use when writing the tag</param>
            <param name="bank">the Gen2 memory bank to read from</param>
            <param name="address">the word address to start reading from</param>
            <param name="length">the number of words to read. Only two words per tag will be stored in the tag buffer.</param>
            <returns>
            A three-element array, containing: {the number of tags
            found, the number of tags successfully read from, the number
            of tags unsuccessfully read from}.
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseAllTagData(System.Byte[],System.Boolean,ThingMagic.TagProtocol)">
            <summary>
            Decode response of Get Tag Buffer (fixed-length formats only)
            </summary>
            <param name="rsp">Get Tag Buffer response (including SOF and CRC)</param>
            <param name="epc496">Record format.</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.
            If true, records sized for 496-bit EPCs (66 bytes hold PC16,EPC496,CRC16).
            If false, records sized for 96-bit EPCs (16 bytes hold PC16,EPC96,CRC16).</param>
            <returns>Array of parsed TagData records</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseTagReadData(System.Byte[],System.Int32@,ThingMagic.SerialReader.TagMetadataFlag,ThingMagic.TagProtocol)">
            <summary>
            Parse one tag read record out of an M5e GetTagBuffer (with metadata) response
            </summary>
            <param name="response">M5e binary response to GetTagBuffer command</param>
            <param name="readOffset">Offset of tag record to parse.  Will be incremented past end of record</param>
            <param name="metadataFlags">Metadata flags that were passed to GetTagBuffer to produce this record</param>
            <param name="protocol">Tag protocol under which to interpret TagData content.
            Will be overridden by fetched information if TagMetadataFlag.PROTOCOL is present in metadataFlags.</param>
            <returns>TagReadData representing binary record</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseTagMemBankdata(ThingMagic.TagReadData@,System.Byte[],System.Int32)">
            <summary>
            Parse mem bank data
            </summary>
            <param name="t"></param>
            <param name="response"></param>
            <param name="readOffset"></param>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseTagData(System.Byte[],System.Int32@,ThingMagic.TagProtocol,System.Int32)">
            <summary>
            Parse one tag data record out of GetTagBuffer response.
            Input Format: lenhi lenlo data... [pad...]
            </summary>
            <param name="response">GetTagBuffer response</param>
            <param name="readOffset">Index of start of record.  Will be updated to point after record.</param>
            <param name="protocol"></param>
            <param name="reclen">Length of record, in bytes, not including length field.
            e.g., 16 for 16-bit PC + 96-bit EPC + 16-bit CRC
            e.g., 66 for 16-bit PC + 496-bit EPC + 16-bit CRC
            Specify 0 for variable-length records.</param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepForSearch(ThingMagic.SimpleReadPlan)">
            <summary>
            Configure reader for tag search
            </summary>
            <param name="srp">Simple Read Plan</param>
            <returns>Search flag value for antenna control bits (2 lsbs) of Read Tag Multiple (0x22) command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepForTagop">
            <summary>
            Configure reader for synchronous tag operation (e.g., set appropriate protocol and antenna)
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepForEmbeddedKillTag(System.UInt16,System.UInt32,ThingMagic.SerialReader.SingulationBytes)">
            <summary>
            Prepare byte array for Embedded Kill Tag
            </summary>
            <param name="timeout">Length of time to retry kill (milliseconds)</param>
            <param name="password">Tag's kill password</param>
            <param name="sing">Select options</param>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepareForEmbeddedLockTag(System.UInt16,System.UInt32,System.UInt16,System.UInt16,ThingMagic.SerialReader.SingulationBytes)">
            <summary>
            Prepare byte array for embedded command with lock tag.
            </summary>
            <param name="timeout">Number of milliseconds to keep retrying operation</param>
            <param name="accessPassword">Tag access password</param>
            <param name="mask">Lock Mask</param>
            <param name="action">Lock action to take</param>
            <param name="sing">Select options for tag to act on</param>
            <returns>Returns data array for Read Tag and Lock Multiple</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepareForEmbeddedWriteTagData(System.UInt16,System.Byte,System.UInt32,System.Byte[],ThingMagic.SerialReader.SingulationBytes)">
            <summary>
            Prepares byte array for embedded command with Write Data
            </summary>
            <param name="timeout">Timeout</param>
            <param name="memBank">Memory Bank to Write</param>
            <param name="address">Address in Memory Bank to Write</param>
            <param name="data">Data to Write</param>
            <param name="singulation">Singulation Filer</param>
            <returns>Byte Array of Write Data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.PrepareForEmbeddedReadTagData(System.UInt16,System.Byte,System.UInt32,System.Byte,ThingMagic.SerialReader.SingulationBytes)">
            <summary>
            Prepare byte array for Read Tag Id and Data multiple.
            </summary>
            <param name="timeout">Timeout</param>
            <param name="memBank">Memory Bank</param>
            <param name="address">Adress to read Data</param>
            <param name="wordcount">Number of Words to read</param>
            <param name="singulation">Singulation Bytes</param>
            <returns>Byte array Read Data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.M5eToEmdCmdWithMultipleReadFormat(System.Byte[])">
            <summary>
            Parses M5e response to embedded command with multiple tag read format
            </summary>
            <param name="response">byte array of response from M5e</param>
            <returns>int array of the form (Number of tags Read, Number of Suceeded Operations, Number of Failed Operations)</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GpiGet">
            <summary>
            Get the state of all of the reader's GPI pins. 
            </summary>
            <returns>array of GpioPin objects representing the state of all input pins</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.GpoSet(System.Collections.Generic.ICollection{ThingMagic.GpioPin})">
            <summary>
            Set the state of some GPO pins.
            </summary>
            <param name="state">array of GpioPin objects</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetGpio(System.Byte,System.Boolean)">
            <summary>
            Set the state of a single GPIO pin
            </summary>
            <param name="GPIOnumber">the gpio pin number</param>
            <param name="GPIOvalue">whether to set the pin high</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetGpio">
            <summary>
            Gets the state of the device's GPIO pins.
            </summary>
            <returns>
            an array of GpioPin representing the state of each pin
            with the pin id, direction and value
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetGPIODirection(System.Int32)">
            <summary>
             Get direction of a single GPIO pin
            </summary>
            <param name = "pin">GPIO pin Number</param>
            <returns>
             true if output pin, false if input pin
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdSetGPIODirection(System.Int32,System.Boolean)">
            <summary>
             Set direction of a single GPIO pin
            </summary>
            <param name = "pin">GPIO pin Number</param>
            <param name = "direction">GPIO pin direction</param>
        </member>
        <member name="M:ThingMagic.SerialReader.getGPIODirection(System.Boolean)">
            <summary>
            Get directions of all GPIO pins
            </summary>
            <param name = "wantOut"> false = get inputs, true = get outputs///</param>
            <returns> list of pins that are set in the requested direction
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.setGPIODirection(System.Boolean,System.Int32[])">
            <summary>
             Set directions of all GPIO pins
            </summary>
            <param name = "wantOut"> false = input, true = output</param>
            <param name = "pins">GPIO pins to set to the desired direction. All other pins implicitly          ///set the other way.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetReaderStatistics(ThingMagic.SerialReader.ReaderStatisticsFlag)">
            <summary>
            Get the current per-port statistics.
            </summary>
            <param name="statsFlag">the set of statistics to gather</param>
            <returns>
            a ReaderStatistics structure populated with the requested per-port
            values
            </returns>        
        </member>
        <member name="M:ThingMagic.SerialReader.CmdResetReaderStatistics(ThingMagic.SerialReader.ReaderStatisticsFlag)">
            <summary>
            Reset the per-port statistics.
            </summary>
            <param name="statsFlag">the set of statistics to reset. Only the RF on time statistic may be reset.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdResetReaderStats(ThingMagic.Reader.Stat)">
            <summary>
            Reset the per-port stats.
            </summary>
            <param name="StatsFlag">the set of stats to reset. Only the RF on time statistic may be reset.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.GetExtendedReaderStatsFlag(System.Collections.Generic.List{System.Byte}@,ThingMagic.Reader.Stat.StatsFlag)">
            <summary>
            To extend the flag byte, an EBV technique is to be used. When the highest order bit of the flag
            is used, it signals the reader's parser, that another flag byte is to follow.
            </summary>
            <param name="cmd"></param>
            <param name="flag"></param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdGetReaderStats(ThingMagic.Reader.Stat.StatsFlag)">
            <summary>
            Get the current per-port statistics.
            </summary>
            <param name="statsFlag">the set of statistics to gather</param>
            <returns>
            a ReaderStats structure populated with the requested per-port
            values
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ParseReaderStatValues(System.Byte[],System.Int32,System.UInt16)">
            <summary>
            Fill reader stat values from response
            </summary>
            <param name="response"></param>
            <param name="offset"></param>
            <param name="flag"></param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdTestSetFrequency(System.UInt32)">
            <summary>
            Set the operating frequency of the device. Testing command.
            </summary>
            <param name="frequency">the frequency to set, in kHz</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdTestSendCw(System.Boolean)">
            <summary>
            Turn CW transmission on or off. Testing command.
            </summary>
            <param name="onOff">whether to turn CW on or off</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdTestSendPrbs(System.UInt16)">
            <summary>
            Turn on pseudo-random bit _stream transmission for a particular duration.  
            Testing command.
            </summary>
            <param name="duration">the duration to transmit the PRBS signal. Valid range is 0-65535</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHiggs2PartialLoadImage(System.UInt16,System.UInt32,System.UInt32,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Send the Alien Higgs2 Partial Load Image command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHiggs2FullLoadImage(System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Send the Alien Higgs2 Full Load Image command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="lockBits">the lock bits to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddHiggs2PartialLoadImage(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt32,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Higgs2PartialLoadImage
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddHiggs2FullLoadImage(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt32,System.UInt16,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Higgs2FullLoadImag
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="lockBits">the lock bits to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Maximum of 12 bytes (96 bits)</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHiggs3FastLoadImage(System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Send the Alien Higgs3 Fast Load Image command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Must be exactly 12 bytes (96 bits)</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHiggs3LoadImage(System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            Send the Alien Higgs3 Load Image command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epcAndUserData">
            the EPC and user data to write to the
            tag. Must be exactly 76 bytes. The pcWord specifies which of this
            is EPC and which is user data.
            </param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHiggs3BlockReadLock(System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Send the Alien Higgs3 Block Read Lock command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="lockBits">a bitmask of bits to lock. Valid range 0-255</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddHiggs3FastLoadImage(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            msgAddHiggs3FastLoadImage
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epc">the EPC to write to the tag. Must be exactly 12 bytes (96 bits)</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddHiggs3LoadImage(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt32,System.UInt32,System.UInt16,System.Byte[],ThingMagic.TagFilter)">
            <summary>
            msgAddHiggs3LoadImage
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="accessPassword">the access password to write on the tag</param>
            <param name="killPassword">the kill password to write on the tag</param>
            <param name="pcWord">the PC word to write on the tag</param>
            <param name="epcAndUserData">
            the EPC and user data to write to the
            tag. Must be exactly 76 bytes. The pcWord specifies which of this
            is EPC and which is user data.
            </param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddHiggs3BlockReadLock(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddHiggs3BlockReadLock
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="currentAccessPassword">the access password to use to write to the tag</param>
            <param name="lockBits">a bitmask of bits to lock. Valid range 0-255</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ToSL900aTime(System.DateTime)">
            <summary>
            Convert DateTime to SL900A time
            </summary>
            <param name="dt">DateTime object</param>
            <returns>32-bit SL900A time value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.FromSL900aTime(System.UInt32)">
            <summary>
            Convert SL900A time to DateTime
            </summary>
            <param name="t32">32-bit SL900A time value</param>
            <returns>DateTime object</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdNxpSetReadProtect(System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Send the NXP Set Read Protect command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdNxpResetReadProtect(System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Send the NXP Reset Read Protect command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdNxpChangeEas(System.UInt16,System.UInt32,System.Boolean,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Send the NXP Change EAS command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="reset">true to reset the EAS, false to set it</param>    
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdNxpEasAlarm(System.UInt16,ThingMagic.Gen2.DivideRatio,ThingMagic.Gen2.TagEncoding,ThingMagic.Gen2.TrExt,System.Byte,ThingMagic.TagFilter)">
            <summary>
            Send the NXP EAS Alarm command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="dr">Gen2 divide ratio to use</param>
            <param name="m">Gen2 M parameter to use</param>
            <param name="trExt">Gen2 TrExt value to use</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns>8 bytes of EAS alarm data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdNxpCalibrate(System.UInt16,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            Send the NXP Calibrate command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="target">target</param>
            <returns>64 bytes of calibration data</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.cmdNxpChangeConfig(System.UInt16,System.UInt32,System.UInt16,System.Byte,ThingMagic.TagFilter)">
            <summary>
            NXP ChangeConfig (only for G2iL)
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="configData">configWord (I/O)The config word to write on the tag</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpSetReadProtect(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpSetReadProtect
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpResetReadProtect(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpResetReadProtect
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpChangeEas(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.Boolean,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpChangeEas
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="reset">true to reset the EAS, false to set it</param> 
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpEasAlarm(System.Collections.Generic.List{System.Byte}@,System.UInt16,ThingMagic.Gen2.DivideRatio,ThingMagic.Gen2.TagEncoding,ThingMagic.Gen2.TrExt,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpEasAlarm
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="dr">Gen2 divide ratio to use</param>
            <param name="m">Gen2 M parameter to use</param>
            <param name="trExt">Gen2 TrExt value to use</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpChangeConfig(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.UInt16,System.Byte,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpChangeConfig
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="configData"> configuration data</param>
            <param name="chipType">NXP chip type</param>
            <param name="target">target</param>        
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddNxpCalibrate(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,ThingMagic.TagFilter)">
            <summary>
            msgAddNxpCalibrate
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="target">target</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiReadLock(System.UInt16,System.UInt32,System.Byte,System.Byte)">
            <summary>
            Send the Hitachi Hibiki Read Lock command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="mask">bitmask of read lock bits to alter</param>
            <param name="action">action value of read lock bits to alter</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiGetSystemInformation(System.UInt16,System.UInt32)">
            <summary>
            Send the Hitachi Hibiki Get System Information command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <returns>
            10-element array of integers: {info flags, reserved memory size,
            EPC memory size, TID memory size, user memory size, set attenuate value,
            bank lock bits, block read lock bits, block r/w lock bits, block write
            lock bits}
            </returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiSetAttenuate(System.UInt16,System.UInt32,System.Byte,System.Byte)">
            <summary>
            Send the Hitachi Hibiki Set Attenuate command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="level">the attenuation level to set</param>
            <param name="_lock">whether to permanently lock the attenuation level</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiBlockLock(System.UInt16,System.UInt32,System.Byte,System.UInt32,System.Byte,System.Byte)">
            <summary>
            Send the Hitachi Hibiki Block Lock command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="block">the block of memory to operate on</param>
            <param name="blockPassword">the password for the block</param>
            <param name="mask">bitmask of lock bits to alter</param>
            <param name="action">value of lock bits to alter</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiBlockReadLock(System.UInt16,System.UInt32,System.Byte,System.UInt32,System.Byte,System.Byte)">
            <summary>
            Send the Hitachi Hibiki Block Read Lock command.
            </summary>
            <param name="timeout">Timeout to Block Read Lock</param>
            <param name="accessPassword">Access Password</param>
            <param name="block">Block</param>
            <param name="blockPassword">Block Access Password</param>
            <param name="mask">Mask</param>
            <param name="action">Action</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdHibikiWriteMultipleWords(System.UInt16,System.UInt32,ThingMagic.Gen2.Bank,System.UInt32,System.Collections.Generic.ICollection{System.Byte})">
            <summary>
            Send the Hitachi Hibiki Write Multiple Words Lock command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="bank">the Gen2 memory bank to write to</param>
            <param name="wordOffset">the word address to start writing at</param>
            <param name="data">the data to write - must be an even number of bytes</param>
        </member>
        <member name="M:ThingMagic.SerialReader.CmdMonza4QTReadWrite(System.UInt16,System.UInt32,System.Int32,System.Int32,ThingMagic.TagFilter)">
            <summary>
            Send the Impinj Monza4 QTReadWrite command.
            </summary>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="controlByte">Monza4 QT Control Byte</param>
            <param name="payLoad">Monza4 Payload word</param>
            <param name="target">filter</param>
            <returns>Gen2.QTPayload</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.msgAddMonza4QTReadWrite(System.Collections.Generic.List{System.Byte}@,System.UInt16,System.UInt32,System.Int32,System.Int32,ThingMagic.TagFilter)">
            <summary>
            Form the message QTReadWrite command.
            </summary>
            <param name="msg">The embedded command bytes</param>
            <param name="timeout">the timeout of the operation, in milliseconds. Valid range is 0-65535.</param>
            <param name="accessPassword">the access password to use to write to the tag</param>
            <param name="controlByte">Monza4 QT Control Byte</param>
            <param name="payLoad">Monza4 Payload word</param>
            <param name="target">filter</param>
            <returns>the length of the assembled embedded command</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CalcCRC(System.Byte[])">
            <summary>
            Calculates CRC
            </summary>
            <param name="command">Byte Array that needs CRC calculation</param>
            <returns>CRC Byte Array</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.CalcReturnCRC(System.Byte[])">
            <summary>
            Calculates CRC of the data returned from the M5e,
            </summary>
            <param name="command">Byte Array that needs CRC calculation</param>
            <returns>CRC Byte Array</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ArrayEquals``1(``0[],``0[])">
            <summary>
            C#'s Array.Equals only does instance equality,
            not content equality
            </summary>
            <typeparam name="T">Type of array elements</typeparam>
            <param name="a">Array to compare</param>
            <param name="b">Array to compare</param>
            <returns>True if array contents are equal, false otherwise.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.BoolToByte(System.Object)">
            <summary>
            Shorthand convenience method -- implicitly casts Object before passing to proper conversion method.
            </summary>
            <param name="value">Object that can be cast to bool</param>
            <returns>Byte representing value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ByteToBool(System.Object)">
            <summary>
            Shorthand convenience method -- implicitly casts Object before passing to proper conversion method.
            </summary>
            <param name="value">Object that can be cast to byte</param>
            <returns>bool representing value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.ByteToInt(System.Byte)">
            <summary>
            Convert byte to int.
            </summary>
            <param name="value">Value to convert.  Contents must fit within a byte (0-255).</param>
            <returns>Byte-typed value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.IntToByte(System.Int32)">
            <summary>
            Convert int to byte.
            </summary>
            <param name="value">Value to convert.  Contents must fit within a byte (0-255).</param>
            <returns>Byte-typed value</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.UriPathToCom(System.String)">
            <summary>
            Convert URI-style path (/COM123) to Windows format (COM123)
            </summary>
            <param name="uriPath">URI-style path; e.g., "/COM123"</param>
            <returns>Windows-style COM port name; e.g., "COM123"
            Note: .NET does not require special prefixes to handle ports above COM9.
            Only Win32 requires the \\.\ prefix.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeEmptySingulationBytes">
            <summary>
            "No singulation desired".  Cannot be used with commands that use Access Password.
            For some reason, turning off singulation (option 0x00) also turns off the access password field.
            Only commands that do not include an access password may use this form  of SingulationBytes.
            </summary>
            <returns>Singulation bytes for option 0x00</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakePasswordSingulationBytes(System.UInt32)">
            <summary>
            Even if no singulation is desired, you still have to provide
            the "singulation option" byte that says, "No singulation, please."
            </summary>
            <returns></returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeSingulationBytes(System.Collections.Generic.List{System.Byte},System.Byte[])">
            <summary>
            Singulate on entire EPC.  Omit address field.
            </summary>
            <param name="list">The list sturcture to hold the temporary singulation bytes</param>
            <param name="epc">EPC to singulate.</param>
            <returns>Singulation specification bytes for M5e protocol.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeSingulationBytes(ThingMagic.TagFilter,System.Boolean,System.UInt32)">
            <summary>
            Singulate on entire EPC.  Omit address field.
            </summary>
            <param name="tf">TagFilter with singulation parameters.  May be null.</param>
            <param name="needAccessPassword">Do you need the form that supports an access password?
            Pre-Sontag firmware has a protocol design flaw -- to specify an access password, you also have to provide singulation bytes.
            The workaround is to provide a select with empty mask.</param>
            <param name="accessPassword">The tag access password</param>
            <returns>Singulation specification bytes for M5e protocol.  If tf is null, returns default singulation.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeSingulationBytes(System.Collections.Generic.List{System.Byte},ThingMagic.Gen2.Bank,System.UInt32,System.UInt16,System.Collections.Generic.ICollection{System.Byte},System.Boolean)">
            <summary>
            Specify all singulation fields.
            </summary>
            <param name="list">The list sturcture to hold the temporary singulation bytes</param>
            <param name="bank">Tag memory bank to singulate against</param>
            <param name="address">Bit address at which to start comparison</param>
            <param name="bitCount">Number of bits to compare</param>
            <param name="data">Bits to match</param>
            <param name="invert">Invert selection?
            If true, tags NOT matching the mask will be selected.
            If false, tags matching mask are selected (normal behavior)</param>
            <returns>Singulation specification bytes for M5e protocol.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.MakeIso180006bSingulationBytes(ThingMagic.TagFilter)">
            <summary>
            Create data for ISO180006B select operations based on a tag filter
            </summary>
            <param name="tf">TagFilter with singulation parameters.  May be null.</param>
            <returns>Singulation specification bytes for M5e protocol.  If tf is null, returns match-anything singulation.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.BankToSelectOption(ThingMagic.Gen2.Bank)">
            <summary>
            Translate target memory bank to singulation option.  Does not include options
            0x00 (no singulation) and 0x01 (singulate on entire EPC).
            </summary>
            <param name="bank">Tag memory bank to singulate against</param>
            <returns>Tag Singulation option code</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.Truncate(System.Collections.Generic.ICollection{System.Byte},System.Int32)">
            <summary>
            Trim byte array to specified size.
            </summary>
            <param name="inBytes">Input byte array</param>
            <param name="byteCount">Desired size of output byte array</param>
            <returns>First byteCount bytes of input array.  If byteCount is same as inBytes.Length, a direct reference is returned.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.SubArray(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Extract subarray
            </summary>
            <param name="src">Source array</param>
            <param name="offset">Start index in source array</param>
            <param name="length">Number of source elements to extract</param>
            <returns>New array containing specified slice of source array</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.SubArray(System.Byte[],System.Int32@,System.Int32)">
            <summary>
            Extract subarray, automatically incrementing source offset
            </summary>
            <param name="src">Source array</param>
            <param name="offset">Start index in source array.  Automatically increments value by copied length.</param>
            <param name="length">Number of source elements to extract</param>
            <returns>New array containing specified slice of source array</returns>
        </member>
        <member name="P:ThingMagic.SerialReader.CurrentProtocol">
            <summary>
            Set the current protocol
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.PortName">
            <summary>
            Name of serial port (for informational purposes only --
            Do not expose to user unless absolutely necessary)
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.SerialRegion">
            <summary>
            Regulatory region identifiers, as used in Get Current Region (67h)
            Each enum is assigned the byte value to be sent in M5e command.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.NONE">
            <summary>
            None, Region not Set
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.NA">
            <summary>
            North America
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.EU">
            <summary>
            Europe, version 1 (LBT)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.KR">
            <summary>
            Korea
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.KR2">
            <summary>
            Korea (revised)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.IN">
            <summary>
            India
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.JP">
            <summary>
            Japan
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.PRC">
            <summary>
            China[, People's Republic of] (i.e., mainland China)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.EU2">
            <summary>
            Europe, version 2 (??)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.EU3">
            <summary>
            Europe, version 3 (no LBT)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.PRC2">
            <summary>
            PRC with 875KHZ 
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.AU">
            <summary>
            Australia
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.NZ">
            <summary>
            NewZealand
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialRegion.OPEN">
            <summary>
            Unrestricted access to full hardware range
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.SerialTagProtocol">
            <summary>
            Tag Protocol identifiers, as used in Get and Set Current Tag Protocol
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.NONE">
            <summary>
            No protocol selected
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.EPC0_MATRICS">
            <summary>
            EPC0 and Matrics-style EPC0+
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.EPC1">
            <summary>
            EPC1
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.ISO18000_6B">
            <summary>
            ISO 18000-6B
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.EPC0_IMPINJ">
            <summary>
            Impinj-style EPC0+
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.GEN2">
            <summary>
            Gen2
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.UCODE">
            <summary>
            UCODE
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.IPX64">
            <summary>
            IPX64
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.IPX256">
            <summary>
            IPX256
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SerialTagProtocol.ATA">
            <summary>
            ATA
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.RegionConfiguration">
            <summary>
            Region-specific parameters that are supported on the device.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.RegionConfiguration.LBTENABLED">
            <summary>
            (bool) Whether LBT is enabled.
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.UserMode">
            <summary>
            enum to define different user modes.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserMode.NONE">
            <summary>
            Default User Mode
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserMode.PRINTER">
            <summary>
            Printer Mode
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserMode.PORTAL">
            <summary>
            Portal Mode
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.UserConfigOperation">
            <summary>
            Operation Options for CmdSetUserProfile 
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigOperation.SAVE">
            <summary>
            Save operation
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigOperation.RESTORE">
            <summary>
            Restore operation
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigOperation.VERIFY">
            <summary>
            Verify operation
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigOperation.CLEAR">
            <summary>
            Clear operation
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.SetProtocolLicenseOption">
            <summary>
            Operation Options for CmdSetProtocolLicenseKey 
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SetProtocolLicenseOption.SET">
            <summary>
            Set valid license key
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SetProtocolLicenseOption.ERASE">
            <summary>
            Erase license key
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.UserConfigCategory">
            <summary>
            Congfig key for CmdSetUserProfile
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigCategory.ALL">
            <summary>
            All configurations
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.UserConfigType">
            <summary>
            The config values for CmdSetUserProfile
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigType.FIRMWARE_DEFAULT">
            <summary>
            Firmware default configurations
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.UserConfigType.CUSTOM_CONFIGURATION">
            <summary>
            Custom configurations
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.Configuration">
            <summary>
            Reader Parameter Identifiers
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.UNIQUE_BY_ANTENNA">
            <summary>
            Key tag buffer records off of antenna ID as well as EPC;
            i.e., keep separate records for the same EPC read on different antennas
              0: Disable -- Different antenna overwrites previous record.
              1: Enable -- Different Antenna creates a new record.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.TRANSMIT_POWER_SAVE">
            <summary>
            Run transmitter in lower-performance, power-saving mode.
              0: Disable -- Higher transmitter bias for improved reader sensitivity
              1: Enable -- Lower transmitter bias sacrifices sensitivity for power consumption
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.EXTENDED_EPC">
            <summary>
            Support 496-bit EPCs (vs normal max 96 bits)
              0: Disable (max max EPC length = 96)
              1: Enable 496-bit EPCs
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.ANTENNA_CONTROL_GPIO">
            <summary>
            Configure GPOs to drive antenna switch.
              0: No switch
              1: Switch on GPO1
              2: Switch on GPO2
              3: Switch on GPO1,GPO2
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.SAFETY_ANTENNA_CHECK">
            <summary>
            Refuse to transmit if antenna is not detected
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.SAFETY_TEMPERATURE_CHECK">
            <summary>
            Refuse to transmit if overtemperature condition detected
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.RECORD_HIGHEST_RSSI">
            <summary>
            If tag read duplicates an existing tag buffer record (key is the same),
            update the record's timestamp if incoming read has higher RSSI reading.
              0: Keep timestamp of record's first read
              1: Keep timestamp of read with highest RSSI
            </summary>F
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.UNIQUE_BY_DATA">
            <summary>
            Key tag buffer records off tag data as well as EPC;
            i.e., keep separate records for the same EPC read with different data
              0: Disable -- Different data overwrites previous record.
              1: Enable -- Different data creates new record.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.RSSI_IN_DBM">
            <summary>
            Whether RSSI values are reported in dBm, as opposed to
            arbitrary uncalibrated units.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.SELF_JAMMER_CANCELLATION">
            <summary>
            Self jammer cancellation
            User can enable/disable through level2 API
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.PRODUCT_GROUP_ID">
            <summary>
            General category of finished reader into which module is integrated; e.g.,
             0: bare module
             1: In-vehicle Reader (e.g., Tool Link, Vega)
             2: USB Reader
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.PRODUCT_ID">
            <summary>
            Product ID (Group ID 0x0002) Information
            0x0001 :M5e-C USB RFID Reader
            0x0002 :Backback NA attenna
            0x0003 :Backback EU attenna
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.ENABLE_FILTERING">
            <summary>
            enable/disable tag filtering
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.TAG_BUFFER_ENTRY_TIMEOUT">
            <summary>
            Tag Buffer Entry Timeout
            User can set the tag buffer timeout
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.UNIQUE_BY_PROTOCOL">
            <summary>
            Whether Reads of the same protocol considered same tag
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.CURRENT_MESSAGE_TRANSPORT">
            <summary>
            Transport bus type
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.Configuration.SEND_CRC">
            <summary>
            Send crc
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.AntennaSelection">
            <summary>
            Options for Read Tag Multiple
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.CONFIGURED_ANTENNA">
            <summary>
            Search on single antenna, using current Set Antenna configuration
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.ANTENNA_1_THEN_2">
            <summary>
            Search on both monostatic antennas, starting with Antenna 1
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.ANTENNA_2_THEN_1">
            <summary>
            Search on both monostatic antennas, starting with Antenna 2
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.CONFIGURED_LIST">
            <summary>
            Search using the antenna list set by command (0x91 0x02 TX0 RX0 TX1 RX1 ...)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_SEARCH_FLAGS_EMBEDDED_OP">
            <summary>
            Embedded Command
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_SEARCH_FLAGS_TAG_STREAMING">
            <summary>
            Using Streaming
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.LARGE_TAG_POPULATION_SUPPORT">
            <summary>
            Large Tag Population Support
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_SEARCH_FLAGS_STATUS_REPORT_STREAMING">
            <summary>
            Status report streaming
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_SEARCH_FLAGS_FAST_SEARCH">
            <summary>
            Fast search
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_SEARCH_FLAGS_STATS_REPORT_STREAMING">
            <summary>
            Stats report streaming
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaSelection.READ_MULTIPLE_RETURN_ON_N_TAGS">
            <summary>
            Stop on N trigger flag
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.ReaderStatisticsFlag">
            <summary>
            Reader Statistics Flag enum
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatisticsFlag.RF_ON_TIME">
            <summary>
            Total time the port has been transmitting, in milliseconds. Resettable
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatisticsFlag.NOISE_FLOOR">
            <summary>
            Detected noise floor with transmitter off. Recomputed when requested, not resettable.  
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatisticsFlag.NOISE_FLOOR_TX_ON">
            <summary>
            Detected noise floor with transmitter on. Recomputed when requested, not resettable.  
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.TagMetadataFlag">
            <summary>
            Enum to define the Tag Metadata.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.READCOUNT">
            <summary>
            Get read count in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.RSSI">
            <summary>
            Get RSSI count in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.ANTENNAID">
            <summary>
            Get Antenna ID count in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.FREQUENCY">
            <summary>
            Get frequency in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.TIMESTAMP">
            <summary>
            Get timestamp in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.PHASE">
            <summary>
            Get pahse in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.PROTOCOL">
            <summary>
            Get protocol in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.DATA">
            <summary>
            Get read data in Metadata
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.GPIO">
            <summary>
             Get GPIO value in Metadata
             </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TagMetadataFlag.ALL">
            <summary>
             Shortcut to get all metadata attributes available during normal search.
             Excludes data, which requires special operation above and beyond ReadTagMultiple.
             </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.CmdOpcode">
            <summary>
            command opcode for multi-protocol search
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.CmdOpcode.RFU">
            <summary>
            Reserved for future use
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.CmdOpcode.TAG_READ_SINGLE">
            <summary>
            Tag read single
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.CmdOpcode.TAG_READ_MULTIPLE">
            <summary>
            tag read multiple
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.ProtocolBitMask">
            <summary>
            protocol bitmask
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.ISO18000_6B">
            <summary>
            protocol bitmask for ISO18000_6B
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.GEN2">
            <summary>
            protocol bitmask for Gen2
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.IPX64">
            <summary>
            protocol bitmask for IPX64
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.IPX256">
            <summary>
            protocol bitmask FOR ipx256
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.ATA">
            <summary>
            protocol bitmask for ATA
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ProtocolBitMask.ALL">
            <summary>
            protocol bitmask for all supported protocol
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.TransportType">
            <summary>
            Transport type
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TransportType.SOURCESERIAL">
            <summary>
            Serial
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TransportType.SOURCEUSB">
            <summary>
            USB
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.TransportType.SOURCEUNKNOWN">
            <summary>
            UnKnown
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.ProtocolConfiguration">
            <summary>
            Interface to define Protocol Configurations.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.ProtocolConfiguration.GetValue">
            <summary>
             Extract serial protocol enum value
            </summary>
            <returns>Byte value to use in serial protocol field</returns>
        </member>
        <member name="T:ThingMagic.SerialReader.UserConfigOp">
            <summary>
            class for UserConfigOp
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.UserConfigOp.#ctor(ThingMagic.SerialReader.UserConfigOperation)">
            <summary>
            Constructor for UserConfigOp
            </summary>
            <param name="opcode"></param>
        </member>
        <member name="P:ThingMagic.SerialReader.UserConfigOp.Opcode">
            <summary>
            Set/get UserConfigOperation
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.PortParamSetting">
            <summary>
             Setting for dealing with one of the antenna port params (read power, write power, settling time)
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting.PORT">
            <summary>
            Port number column index
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting.READPOWER">
            <summary>
            Read power column index
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting.WRITEPOWER">
            <summary>
            Write power column index
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting.SETTLINGTIME">
            <summary>
            Settling time column index
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting._serialReader">
            <summary>
            SerialReader to operate on
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.PortParamSetting._column">
            <summary>
            Index of response column to extract
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.PortParamSetting.#ctor(ThingMagic.SerialReader,System.String,System.Int32)">
            <summary>
            Create antenna port param Setting object
            </summary>
            <param name="reader">SerialReader object to operate on</param>
            <param name="name">Name of param; e.g., /reader/radio/portReadPowerList</param>
            <param name="column">Index of column that houses parameter value
            within CmdGetAntennaPortPowersAndSettlingTime response: (port,readpwr,writepwr,settletime).
            e.g., 0-port, 1-readpwr, 2-writepwr, 3-settletime</param>
        </member>
        <member name="M:ThingMagic.SerialReader.PortParamSetting.GetPPColumn(System.Int16[][],System.Int32,System.Boolean)">
            <summary>
            Extract column from port params response
            </summary>
            <param name="pp">Response of CmdGetAntennaPortPowersAndSettlingTime (Array of [port,rpwr,wpwr,settletime])</param>
            <param name="column">Index of column of interest</param>
            <param name="omitZeroes">If true, omit value==0 entries from return</param>
            <returns>Array of [port,value] pairs, where value comes from the indicated column.</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.PortParamSetting.ModPPColumn(System.Int16[][],System.Int32,System.Int16[][],System.Boolean)">
            <summary>
            Insert column values into port params
            </summary>
            <param name="pp">Input to CmdSetAntennaPortPowersAndSettlingTime (Array of [port,rpwr,wpwr,settletime])</param>
            <param name="column">Index of column of interest</param>
            <param name="pvals">Array of [port,value] pairs, where value to be written to the indicated column.</param>
            <param name="zeroOmits">If true, zero out pp value if port is not present in pvals array.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.PortParamSetting.ModPPColumn(System.Int16[][],System.Int32,System.Int16[][])">
            <summary>
            Insert column values into port params
            </summary>
            <param name="pp">Input to CmdSetAntennaPortPowersAndSettlingTime (Array of [port,rpwr,wpwr,settletime])</param>
            <param name="column">Index of column of interest</param>
            <param name="pvals">Array of [port,value] pairs, where value to be written to the indicated column.</param>
        </member>
        <member name="M:ThingMagic.SerialReader.PortParamSetting.FindPortRow(System.Int16[][],System.Int32)">
            <summary>
            Find row with corresponding port number
            </summary>
            <param name="pvals">Array of [port,val,...]</param>
            <param name="port">Port number to search for</param>
            <returns>[port,val,...] row that Matches requested port, or null if not found.</returns>
        </member>
        <member name="T:ThingMagic.SerialReader.TxRxMap">
            <summary>
            Mapping of virtual antenna numbers to (tx,rx) pairs.
            Supports several types of lookup:
             * virtant -> (tx,rx)
             * (tx,rx) -> virtant
             * tx -> virtant
               * (Used for automagic selection of connected antennas.  Given connectedPortList, create a list of monostatic antennas (assumes all TX ports can run monostatic).
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.TxRxMap.#ctor(System.Int32[],ThingMagic.SerialReader)">
            <summary>
            Create TxRxMap from list of antenna ports: all monostatic, virtual antenna matches port number.
            e.g., default TxRxMap is
              for each port in [list of available physical ports]
                (logical_antenna=port, txport=port, rxport=port)
            </summary>
            <param name="antennaPorts">List of antenna ports</param>
            <param name="reader">Parent reader</param>
        </member>
        <member name="M:ThingMagic.SerialReader.TxRxMap.GetTxRx(System.Int32)">
            <summary>
            Map virtual antenna  to (tx,rx) ports
            </summary>
            <param name="virt">Virtual antenna number</param>
            <returns>(txport,rxport)</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.TxRxMap.GetVirt(System.Byte)">
            <summary>
            Map (tx,rx) ports to virtual antenna
            </summary>
            <param name="txrx">(txport,rxport)</param>
            <returns>virtual antenna number</returns>
        </member>
        <member name="M:ThingMagic.SerialReader.TxRxMap.TranslateSerialAntenna(System.Byte)">
            <summary>
            Translate antenna ID from M5e Get Tag Buffer command to logical antenna number
            </summary>
            <param name="serant">M5e serial protocol antenna ID (TX: 4 msbs, RX: 4 lsbs)</param>
            <returns>Logical antenna number</returns>
        </member>
        <member name="P:ThingMagic.SerialReader.TxRxMap.Map">
            <summary>
            Raw (virtant,txport,rxport) tuples
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.TxRxMap.ValidAntennas">
            <summary>
            List of valid logical antenna numbers
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.VersionInfo">
            <summary>
            Parsed response to Get Version
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.VersionInfo.Bootloader">
            <summary>
            Bootloader version
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.VersionInfo.Hardware">
            <summary>
            Hardware version
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.VersionInfo.Firmware">
            <summary>
            Firmware version
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.VersionInfo.FirmwareDate">
            <summary>
            Firmware timestamp
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.VersionInfo.SupportedProtocols">
            <summary>
            List of supported protocols
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.AntennaPort">
            <summary>
            Object representing state of reader's antennas
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaPort.TxAntenna">
            <summary>
            The current logical transmit antenna port.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaPort.RxAntenna">
            <summary>
            The current logical receive antenna port.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaPort.PortList">
            <summary>
            List of physical antenna ports
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.AntennaPort.TerminatedPortList">
            <summary>
            List of physical antenna ports where an antenna has been detected.
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.HibikiSystemInformation">
            <summary>
            Hibiki System Information.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.infoFlags">
            <summary>
            Indicates whether the banks are present and Custom Commands are implemented 
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.reservedMemory">
            <summary>
            Indicates the size of this memory bank in words
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.epcMemory">
            <summary>
            Indicates the size of this memory bank in words
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.tidMemory">
            <summary>
            Indicates the size of this memory bank in words
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.userMemory">
            <summary>
            Indicates the size of this memory bank in words
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.setAttenuate">
            <summary>
            Indicates state of Attenuation
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.bankLock">
            <summary>
            Indicates Lock state for Bank Lock
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.blockReadLock">
            <summary>
            Indicates Lock state for Block Read Lock
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.blockRwLock">
            <summary>
            Indicates Lock state for Block ReadWrite Lock
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.HibikiSystemInformation.blockWriteLock">
            <summary>
            Indicates Lock state for Block Write Lock
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.ReaderStatistics">
            <summary>
            Reader Statistics class.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatistics.numPorts">
            <summary>
            Number of ports.
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatistics.rfOnTime">
            <summary>
            Per-Port RF on time, in milliseconds
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatistics.noiseFloor">
            <summary>
            Per-Port Noise Floor
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.ReaderStatistics.noiseFloorTxOn">
            <summary>
            Per-Port noise floor while transmitting
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.ReaderStatistics.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="T:ThingMagic.SerialReader.Gen2Configuration">
            <summary>
            Option key value for serial Set Protocol Configuration command
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.Gen2Configuration.GetValue">
            <summary>
             Extract serial protocol enum value
            </summary>
            <returns>Byte value to use in serial protocol field</returns>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.SESSION">
            <summary>
            Gen2 Session
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.TARGET">
            <summary>
            Gen2 Target
            </summary>           
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.TAGENCODING">
            <summary>
            Gen2 Miller cycles
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.Q">
            <summary>
            Gen2 Q
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.LINKFREQUENCY">
            <summary>
            Gen2 Link Frequency
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.TARI">
            <summary>
            Gen2 TARI
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Gen2Configuration.BAP">
            <summary>
            Gen2 BAP
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.Iso180006bConfiguration">
            <summary>
            Option key values for serial Set Protocol Configuration command
            </summary>
        </member>
        <member name="M:ThingMagic.SerialReader.Iso180006bConfiguration.GetValue">
            <summary>
             Extract serial protocol enum value
            </summary>
            <returns>Byte value to use in serial protocol field</returns>
        </member>
        <member name="P:ThingMagic.SerialReader.Iso180006bConfiguration.LINKFREQUENCY">
            <summary>
            ISO Link Frequency.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Iso180006bConfiguration.MODULATIONDEPTH">
            <summary>
            ISO Modulation Depth
            </summary>
        </member>
        <member name="P:ThingMagic.SerialReader.Iso180006bConfiguration.DELIMITER">
            <summary>
            ISO Delimiter
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.SingulationBytes">
            <summary>
            Bytes to add to M5e command to enable Tag Singulation
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SingulationBytes.Option">
            <summary>
            Singulation option code, appears as first command argument
            </summary>
        </member>
        <member name="F:ThingMagic.SerialReader.SingulationBytes.Mask">
            <summary>
            Singulation mask specification, appears at end of command arguments
            </summary>
        </member>
        <member name="T:ThingMagic.SerialReader.BoolResponse">
            <summary>
            Class for wheather to parse the status or response
            </summary>
        </member>
        <member name="T:ThingMagic.M5eException">
            <summary>
            M5e-related exception
            </summary>
        </member>
        <member name="M:ThingMagic.M5eException.#ctor(System.String)">
            <summary>
            Create M5e-related exception
            </summary>
            <param name="message">the exception message</param>
        </member>
        <member name="T:ThingMagic.M5eStatusException">
            <summary>
            Error status code returned from M5e
            </summary>
        </member>
        <member name="M:ThingMagic.M5eStatusException.#ctor(System.String,System.UInt16)">
            <summary>
            Create M5e reader error exception
            </summary>
            <param name="message">String describing error</param>
            <param name="code">Reader response status code</param>
        </member>
        <member name="M:ThingMagic.M5eStatusException.#ctor(System.UInt16)">
            <summary>
            Create M5e reader error exception with default message
            </summary>
            <param name="code">Reader response status code</param>
        </member>
        <member name="T:ThingMagic.FAULT_MSG_WRONG_NUMBER_OF_DATA_Exception">
            <summary>
            Invalid number of arguments
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_MSG_WRONG_NUMBER_OF_DATA_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_MSG_WRONG_NUMBER_OF_DATA_Exception.#ctor">
            <summary>
            Create FAULT_MSG_WRONG_NUMBER_OF_DATA Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_INVALID_OPCODE_Exception">
            <summary>
            Command opcode not recognized.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_INVALID_OPCODE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_OPCODE_Exception.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_OPCODE_Exception.#ctor(System.String)">
            <summary>
            Create FAULT_INVALID_OPCODE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_UNIMPLEMENTED_OPCODE_Exception">
            <summary>
            Command opcode recognized, but is not supported.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_UNIMPLEMENTED_OPCODE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_UNIMPLEMENTED_OPCODE_Exception.#ctor">
            <summary>
            Create FAULT_UNIMPLEMENTED_OPCODE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_MSG_POWER_TOO_HIGH_Exception">
            <summary>
            Requested power setting is above the allowed maximum.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_MSG_POWER_TOO_HIGH_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_MSG_POWER_TOO_HIGH_Exception.#ctor">
            <summary>
            Create FAULT_MSG_POWER_TOO_HIGH Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_MSG_INVALID_FREQ_RECEIVED_Exception">
            <summary>
            Requested frequency is outside the allowed range.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_MSG_INVALID_FREQ_RECEIVED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_MSG_INVALID_FREQ_RECEIVED_Exception.#ctor">
            <summary>
            Create FAULT_MSG_INVALID_FREQ_RECEIVED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_MSG_INVALID_PARAMETER_VALUE_Exception">
            <summary>
            Parameter value is outside the allowed range.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_MSG_INVALID_PARAMETER_VALUE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_MSG_INVALID_PARAMETER_VALUE_Exception.#ctor">
            <summary>
            Create FAULT_MSG_INVALID_PARAMETER_VALUE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_MSG_POWER_TOO_LOW_Exception">
            <summary>
             Requested power setting is below the allowed minimum.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_MSG_POWER_TOO_LOW_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_MSG_POWER_TOO_LOW_Exception.#ctor">
            <summary>
            Create FAULT_MSG_POWER_TOO_LOW Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_UNIMPLEMENTED_FEATURE_Exception">
            <summary>
            Command not supported.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_UNIMPLEMENTED_FEATURE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_UNIMPLEMENTED_FEATURE_Exception.#ctor">
            <summary>
            Create FAULT_UNIMPLEMENTED_FEATURE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_INVALID_BAUD_RATE_Exception">
            <summary>
            Requested serial speed is not supported.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_INVALID_BAUD_RATE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_BAUD_RATE_Exception.#ctor">
            <summary>
            Create FAULT_INVALID_BAUD_RATE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_INVALID_REGION_Exception">
            <summary>
            Region is not supported.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_INVALID_REGION_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_REGION_Exception.#ctor">
            <summary>
            Create FAULT_INVALID_REGION Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_INVALID_LICENSE_KEY_Exception">
            <summary>
            Command opcode not recognized.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_INVALID_LICENSE_KEY_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_LICENSE_KEY_Exception.#ctor">
            <summary>
            
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_LICENSE_KEY_Exception.#ctor(System.String)">
            <summary>
            Create FAULT_INVALID_OPCODE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_BL_INVALID_IMAGE_CRC_Exception">
            <summary>
            Firmware is corrupt: Checksum doesn't match content.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_BL_INVALID_IMAGE_CRC_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_BL_INVALID_IMAGE_CRC_Exception.#ctor">
            <summary>
            Create FAULT_BL_INVALID_IMAGE_CRC Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_BL_INVALID_APP_END_ADDR_Exception">
            <summary>
            Firmware corruprt: Internal address marker is invalid.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_BL_INVALID_APP_END_ADDR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_BL_INVALID_APP_END_ADDR_Exception.#ctor">
            <summary>
            Create FAULT_BL_INVALID_APP_END_ADDR Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_BAD_ERASE_PASSWORD_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_BAD_ERASE_PASSWORD_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_BAD_ERASE_PASSWORD_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_BAD_ERASE_PASSWORD Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_BAD_WRITE_PASSWORD_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_BAD_WRITE_PASSWORD_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_BAD_WRITE_PASSWORD_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_BAD_WRITE_PASSWORD Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_UNDEFINED_ERROR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_UNDEFINED_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_UNDEFINED_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_UNDEFINED_ERROR Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_ILLEGAL_SECTOR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_ILLEGAL_SECTOR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_ILLEGAL_SECTOR_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_ILLEGAL_SECTOR Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_WRITE_TO_NON_ERASED_AREA_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_WRITE_TO_NON_ERASED_AREA_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_WRITE_TO_NON_ERASED_AREA_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_WRITE_TO_NON_ERASED_AREA_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_WRITE_TO_ILLEGAL_SECTOR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_WRITE_TO_ILLEGAL_SECTOR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_WRITE_TO_ILLEGAL_SECTOR_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_WRITE_TO_ILLEGAL_SECTOR_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_FLASH_VERIFY_FAILED_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_FLASH_VERIFY_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_FLASH_VERIFY_FAILED_Exception.#ctor">
            <summary>
            Create FAULT_FLASH_VERIFY_FAILED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_NO_TAGS_FOUND_Exception">
            <summary>
            Reader was asked to find tags, but none were detected.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_NO_TAGS_FOUND_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_NO_TAGS_FOUND_Exception.#ctor">
            <summary>
            Create FAULT_NO_TAGS_FOUND Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_NO_PROTOCOL_DEFINED_Exception">
            <summary>
            RFID protocol has not been configured.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_NO_PROTOCOL_DEFINED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_NO_PROTOCOL_DEFINED_Exception.#ctor">
            <summary>
            Create FAULT_NO_PROTOCOL_DEFINED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_INVALID_PROTOCOL_SPECIFIED_Exception">
            <summary>
            Requested RFID protocol is not recognized.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_INVALID_PROTOCOL_SPECIFIED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_INVALID_PROTOCOL_SPECIFIED_Exception.#ctor">
            <summary>
            Create FAULT_INVALID_PROTOCOL_SPECIFIED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_WRITE_PASSED_LOCK_FAILED_Exception">
            <summary>
            For write-then-lock commands, tag was successfully written, but lock failed.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_WRITE_PASSED_LOCK_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_WRITE_PASSED_LOCK_FAILED_Exception.#ctor">
            <summary>
            Create FAULT_WRITE_PASSED_LOCK_FAILED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_NO_DATA_READ_Exception">
            <summary>
            Tag data was requested, but could not be read.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_NO_DATA_READ_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_NO_DATA_READ_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_NO_DATA_READ Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AFE_NOT_ON_Exception">
            <summary>
            Reader not fully initialized and hasn't yet turned on its radio.  Have you set region?
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AFE_NOT_ON_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AFE_NOT_ON_Exception.#ctor">
            <summary>
            Create FAULT_AFE_NOT_ON Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_WRITE_FAILED_Exception">
            <summary>
            Write to tag failed.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_WRITE_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_WRITE_FAILED_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_WRITE_FAILED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_NOT_IMPLEMENTED_FOR_THIS_PROTOCOL_Exception">
            <summary>
            Command is not supported in the current RFID protocol.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_NOT_IMPLEMENTED_FOR_THIS_PROTOCOL_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_NOT_IMPLEMENTED_FOR_THIS_PROTOCOL_Exception.#ctor">
            <summary>
            Create FAULT_NOT_IMPLEMENTED_FOR_THIS_PROTOCOL Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_INVALID_WRITE_DATA_Exception">
            <summary>
            Data does not conform to protocol standards.
            For example, EPC0 and EPC1 require EPC header bits to match the length of the EPC, as defined in the EPCGlobal Tag Data Standard.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_INVALID_WRITE_DATA_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_INVALID_WRITE_DATA_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_INVALID_WRITE_DATA Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_INVALID_ADDRESS_Exception">
            <summary>
            Requested data address is outside the valid range.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_INVALID_ADDRESS_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_INVALID_ADDRESS_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_INVALID_ADDRESS Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GENERAL_TAG_ERROR_Exception">
            <summary>
            Unknown error during RFID operation.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GENERAL_TAG_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GENERAL_TAG_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_GENERAL_TAG_ERROR Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_DATA_TOO_LARGE_Exception">
            <summary>
            Read Tag Data was asked for more data than it supports.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_DATA_TOO_LARGE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_DATA_TOO_LARGE_Exception.#ctor">
            <summary>
            Create FAULT_DATA_TOO_LARGE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_INVALID_KILL_PASSWORD_Exception">
            <summary>
            Incorrect password was provided to Kill Tag.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_INVALID_KILL_PASSWORD_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_INVALID_KILL_PASSWORD_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_INVALID_KILL_PASSWORD Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_KILL_FAILED_Exception">
            <summary>
            Kill failed for unknown reason.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_KILL_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_KILL_FAILED_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_KILL_FAILED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_BIT_DECODING_FAILED_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_BIT_DECODING_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_BIT_DECODING_FAILED_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_BIT_DECODING_FAILED_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_INVALID_EPC_Exception">
            <summary>
            Invalid epc value was specified for an operation.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_INVALID_EPC_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_INVALID_EPC_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_INVALID_EPC_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_PROTOCOL_INVALID_NUM_DATA_Exception">
            <summary>
            Invalid data was specified for an operation
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_PROTOCOL_INVALID_NUM_DATA_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_PROTOCOL_INVALID_NUM_DATA_Exception.#ctor">
            <summary>
            Create FAULT_PROTOCOL_INVALID_NUM_DATA_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_OTHER_ERROR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_OTHER_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_OTHER_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_OTHER_ERROR_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_OVERRUN_BAD_PC_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_OVERRUN_BAD_PC_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_OVERRUN_BAD_PC_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_MEMORY_OVERRUN_BAD_PC_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_LOCKED_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_LOCKED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_MEMORY_LOCKED_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_MEMORY_LOCKED_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_INSUFFICIENT_POWER_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_INSUFFICIENT_POWER_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_INSUFFICIENT_POWER_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_INSUFFICIENT_POWER_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_NON_SPECIFIC_ERROR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_NON_SPECIFIC_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_NON_SPECIFIC_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_NON_SPECIFIC_ERROR
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_GEN2_PROTOCOL_UNKNOWN_ERROR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_GEN2_PROTOCOL_UNKNOWN_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_GEN2_PROTOCOL_UNKNOWN_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_GEN2_PROTOCOL_UNKNOWN_ERROR_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_ANTENNA_NOT_CONNECTED_Exception">
            <summary>
            Antenna not detected during pre-transmit safety test
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_ANTENNA_NOT_CONNECTED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_ANTENNA_NOT_CONNECTED_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_ANTENNA_NOT_CONNECTED Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_TEMPERATURE_EXCEED_LIMITS_Exception">
            <summary>
            Reader temperature outside safe range
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_TEMPERATURE_EXCEED_LIMITS_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_TEMPERATURE_EXCEED_LIMITS_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_TEMPERATURE_EXCEED_LIMITS Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_HIGH_RETURN_LOSS_Exception">
            <summary>
            Excess power detected at transmitter port, usually due to antenna tuning mismatch.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_HIGH_RETURN_LOSS_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_HIGH_RETURN_LOSS_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_HIGH_RETURN_LOSS Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_INVALID_FREQ_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_INVALID_FREQ_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_INVALID_FREQ_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_INVALID_FREQ_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_CHANNEL_OCCUPIED_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_CHANNEL_OCCUPIED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_CHANNEL_OCCUPIED_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_CHANNEL_OCCUPIED_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_AHAL_TRANSMITTER_ON_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_AHAL_TRANSMITTER_ON_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_AHAL_TRANSMITTER_ON_Exception.#ctor">
            <summary>
            Create FAULT_AHAL_TRANSMITTER_ON Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TAG_ID_BUFFER_NOT_ENOUGH_TAGS_AVAILABLE_Exception">
            <summary>
            Asked for more tags than were available in the buffer.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TAG_ID_BUFFER_NOT_ENOUGH_TAGS_AVAILABLE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_NOT_ENOUGH_TAGS_AVAILABLE_Exception.#ctor">
            <summary>
            Create FAULT_TAG_ID_BUFFER_NOT_ENOUGH_TAGS_AVAILABLE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TAG_ID_BUFFER_FULL_Exception">
            <summary>
            Too many tags are in buffer.  Remove some with Get Tag ID Buffer or Clear Tag ID Buffer.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TAG_ID_BUFFER_FULL_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_FULL_Exception.#ctor">
            <summary>
            Create FAULT_TAG_ID_BUFFER_FULL Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TAG_ID_BUFFER_REPEATED_TAG_ID_Exception">
            <summary>
            Internal error -- reader is trying to insert a duplicate tag record.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TAG_ID_BUFFER_REPEATED_TAG_ID_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_REPEATED_TAG_ID_Exception.#ctor">
            <summary>
            Create FAULT_TAG_ID_BUFFER_REPEATED_TAG_ID Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TAG_ID_BUFFER_NUM_TAG_TOO_LARGE_Exception">
            <summary>
            Asked for tags than a single transaction can handle.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TAG_ID_BUFFER_NUM_TAG_TOO_LARGE_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_NUM_TAG_TOO_LARGE_Exception.#ctor">
            <summary>
            Create FAULT_TAG_ID_BUFFER_NUM_TAG_TOO_LARGE Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TAG_ID_BUFFER_AUTH_REQUEST_Exception">
            <summary>
            Asked for tags than a single transaction can handle.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TAG_ID_BUFFER_AUTH_REQUEST_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_AUTH_REQUEST_Exception.#ctor">
            <summary>
            Create FAULT_TAG_ID_BUFFER_AUTH_REQUEST Exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TAG_ID_BUFFER_AUTH_REQUEST_Exception.#ctor(System.Byte[])">
            <summary>
            Create FAULT_TAG_ID_BUFFER_AUTH_REQUEST Exception
            </summary>
            <param name="readerMessage">Copy of raw message</param>
        </member>
        <member name="P:ThingMagic.FAULT_TAG_ID_BUFFER_AUTH_REQUEST_Exception.ReaderMessage">
            <summary>
            Copy of raw message 
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_SYSTEM_UNKNOWN_ERROR_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_SYSTEM_UNKNOWN_ERROR_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_SYSTEM_UNKNOWN_ERROR_Exception.#ctor">
            <summary>
            Create FAULT_SYSTEM_UNKNOWN_ERROR Exception
            </summary>
        </member>
        <member name="T:ThingMagic.FAULT_TM_ASSERT_FAILED_Exception">
            <summary>
            Internal reader error.  Contact support.
            </summary>
        </member>
        <member name="F:ThingMagic.FAULT_TM_ASSERT_FAILED_Exception.StatusCode">
            <summary>
            Serial protocol status code for this exception
            </summary>
        </member>
        <member name="M:ThingMagic.FAULT_TM_ASSERT_FAILED_Exception.#ctor(System.String)">
            <summary>
            Create FAULT_TM_ASSERT_FAILED_Exception
            </summary>
        </member>
        <member name="T:ThingMagic.SerialTransport">
            <summary>
            Serial transport
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransport.Open">
            <summary>
            Causes the communication interface to be opened but does not transmit any serial-layer data.
            This should perform actions such as opening a serial port device or establishing a network
            connection within a wrapper protocol.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransport.SendBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Send bytes down the serial transport layer. No interpretation or modification occurs.
            </summary>
            <param name="length">array containing the bytes to be sent</param>
            <param name="message">number of bytes to send</param>
            <param name="offset">position in array to send from</param>        
        </member>
        <member name="M:ThingMagic.SerialTransport.ReceiveBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Receive a number of bytes on the serial transport. 
            </summary>
            <param name="length">number of bytes to receive</param>
            <param name="messageSpace">byte array to store the message in, or null to have one allocated</param>
            <param name="offset">location in messageSpace to store bytes</param>
            <returns>the byte array with the number of bytes added</returns>
        </member>
        <member name="M:ThingMagic.SerialTransport.Flush">
            <summary>
            Take any actions necessary (possibly none) to remove unsent data from the output path.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransport.Shutdown">
            <summary>
            Close the communication channel.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransport.BaudRate">
            <summary>
            Get/Set the current baud rate of the communication channel.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransport.IsOpen">
            <summary>
            Get current status of the communication channel. True, if Open
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransport.ReadTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a read operation
            does not finish
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransport.WriteTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when a write operation does not finish. 
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransport.PortName">
            <summary>
            Gets or sets the port for communications, including but not limited to all available COM ports.
            </summary>
        </member>
        <member name="T:ThingMagic.SerialTransportNative">
            <summary>
            Serial transport native framework calls
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.CreateSerialReader(System.String)">
            <summary>
            Serial Reader factory function
            </summary>
            <param name="uriString">URI-style path to serial device; e.g., /COM1</param>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.#ctor">
            <summary>
            Constructor
            Initialize native serial port
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.Flush">
            <summary>
            Discards data from the serial driver's receive buffer.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.Open">
            <summary>
            Opens a new serial port connection.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.ReceiveBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads a number of bytes from the SerialPort input buffer and writes those 
            bytes into a byte array at the specified offset.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <param name="messageSpace">The byte array to write the input to.</param>
            <param name="offset">The offset in the buffer array to begin writing.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.SendBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of bytes to the serial port using data from a buffer.
            </summary>
            <param name="length">The number of bytes to write.</param>
            <param name="message">The byte array that contains the data to write to the port.</param>
            <param name="offset">The zero-based byte offset in the buffer parameter at which to begin copying bytes to the port.</param>
        </member>
        <member name="M:ThingMagic.SerialTransportNative.Shutdown">
            <summary>
            Closes the port connection,
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportNative.BaudRate">
            <summary>
            Set/Get serial baudrate
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportNative.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the SerialPort object.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportNative.PortName">
            <summary>
            Set/Get the port for communications, including but not limited to all available
            COM ports.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportNative.ReadTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when
            a read operation does not finish.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportNative.WriteTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when
            a write operation does not finish.
            </summary>
        </member>
        <member name="T:ThingMagic.SerialTransportTCP">
            <summary>
            Serial transport TCP framework calls
            </summary>
        </member>
        <member name="F:ThingMagic.SerialTransportTCP.hostName">
            <summary>
            host name,readerUri
            </summary>
        </member>
        <member name="F:ThingMagic.SerialTransportTCP.readerUri">
            <summary>
            host name,readerUri
            </summary>
        </member>
        <member name="F:ThingMagic.SerialTransportTCP.port">
             <summary>
            Tcp port,Baudrate
             </summary>
        </member>
        <member name="F:ThingMagic.SerialTransportTCP.Baudrate">
             <summary>
            Tcp port,Baudrate
             </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.CreateSerialReader(System.String)">
            <summary>
            Serial Reader factory function
            </summary>
            <param name="uriString">URI-style path to serial device; e.g., /COM1</param>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.#ctor">
            <summary>
            Constructor
            Initialize native serial Tcp port
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.Flush">
            <summary>
            Discards data from the serverstream
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.Open">
            <summary>
            Opens a TCP connection.
            </summary>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.ReceiveBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Reads a number of bytes from the Tcp SerialPort input buffer and writes those 
            bytes into a byte array at the specified offset.
            </summary>
            <param name="length">The number of bytes to read.</param>
            <param name="messageSpace">The byte array to write the input to.</param>
            <param name="offset">The offset in the buffer array to begin writing.</param>
            <returns>The number of bytes read</returns>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.SendBytes(System.Int32,System.Byte[],System.Int32)">
            <summary>
            Writes a specified number of bytes to the tcp serial port using data from a buffer.
            </summary>
            <param name="length">The number of bytes to write.</param>
            <param name="message">The byte array that contains the data to write to the port.</param>
            <param name="offset">The zero-based byte offset in the buffer parameter at which to begin copying bytes to the port.</param>
        </member>
        <member name="M:ThingMagic.SerialTransportTCP.Shutdown">
            <summary>
            Closes the port connection,
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportTCP.BaudRate">
            <summary>
            Set/Get TCP baudrate
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportTCP.IsOpen">
            <summary>
            Gets a value indicating the open or closed status of the TCP Port object.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportTCP.PortName">
            <summary>
            Set/Get the port for communications, including but not limited to all available
            TCP ports.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportTCP.WriteTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when
            a write operation does not finish.
            </summary>
        </member>
        <member name="P:ThingMagic.SerialTransportTCP.ReadTimeout">
            <summary>
            Gets or sets the number of milliseconds before a time-out occurs when
            a read operation does not finish.
            </summary>
        </member>
        <member name="T:ThingMagic.SimpleReadPlan">
            <summary>
            ReadPlan consisting of list of antennas, tag protocol, filter and weight
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan._defaultProtocol">
            <summary>
            Default for protocol
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan._defaultAntennas">
            <summary>
            Default for antennaList
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan._defaultFilter">
            <summary>
            Default for filter
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan._defaultTagOp">
            <summary>
            Default for TagOp
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan.Protocol">
            <summary>
            List of protocols
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan.Antennas">
            <summary>
            List of antennas.
            May be null, which means "use auto-detected antennas".
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan.Filter">
            <summary>
            Tag filter
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan.Op">
            <summary>
            Tag Operation
            </summary>
        </member>
        <member name="F:ThingMagic.SimpleReadPlan.UseFastSearch">
            <summary>
            Fast search
            </summary>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor">
            <summary>
             Create a SimpleReadPlan
            </summary>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor(System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol)">
            <summary>
             Create a SimpleReadPlan
            </summary>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor(System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,System.Int32)">
            <summary>
             Create a SimpleReadPlan
            </summary>
            <param name="antennaList">List of antenna numbers.  May be null.</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor(System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Int32)">
            <summary>
             Create a SimpleReadPlan
            </summary>
            <param name="antennaList">List of antenna numbers.  May be null.</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor(System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Boolean)">
            <summary>
             Create a SimpleReadPlan
            </summary>
            <param name="antennaList">List of antenna numbers.  May be null.</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>        
            <param name="useFastSearch">Enable fast search</param>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.#ctor(System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Boolean,System.Int32)">
            <summary>
             Create a SimpleReadPlan
            </summary>
            <param name="antennaList">List of antenna numbers.  May be null.</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>
            <param name="weight">Relative scheduling weight</param>
            <param name="useFastSearch">Enable fast search</param>
        </member>
        <member name="M:ThingMagic.SimpleReadPlan.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation; e.g.,
            SimpleReadPlan:[[GEN2],[1,2],1000]</returns>
        </member>
        <member name="T:ThingMagic.ReaderStatsReport">
            <summary>
            ReaderStatsReport
            </summary>
        </member>
        <member name="F:ThingMagic.ReaderStatsReport.stats">
            <summary>
            Reader stat values
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderStatsReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.ReaderStatsReport.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.ReaderStatsReport.STATS">
            <summary>
            Get/set reader stat values
            </summary>
        </member>
        <member name="T:ThingMagic.StatsReportEventArgs">
            <summary>
            This object sends reader statics to StatusListener
            </summary>
        </member>
        <member name="M:ThingMagic.StatsReportEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.StatsReportEventArgs.#ctor(ThingMagic.ReaderStatsReport)">
            <summary>
            Constructor
            </summary>
            <param name="statsReport">array of status reports</param>
        </member>
        <member name="M:ThingMagic.StatsReportEventArgs.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.StatsReportEventArgs.StatsReport">
            <summary>
            StatusReport
            </summary>
        </member>
        <member name="T:ThingMagic.StatusReport">
            <summary>
            This object contains the information related to status reports
            sent by the module during continuous reading
            </summary>
        </member>
        <member name="T:ThingMagic.AntennaStatusReport">
            <summary>
            AntennaStatusReport
            </summary>
        </member>
        <member name="F:ThingMagic.AntennaStatusReport.antenna">
            <summary>
            antenna
            </summary>
        </member>
        <member name="M:ThingMagic.AntennaStatusReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.AntennaStatusReport.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.AntennaStatusReport.Antenna">
            <summary>
            Antenna
            </summary>
        </member>
        <member name="T:ThingMagic.FrequencyStatusReport">
            <summary>
            FrequencyStatusReport
            </summary>
        </member>
        <member name="F:ThingMagic.FrequencyStatusReport.frequency">
            <summary>
             module actually reports a u24value, but 32-bit is the closest data type.
            </summary>
        </member>
        <member name="M:ThingMagic.FrequencyStatusReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.FrequencyStatusReport.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.FrequencyStatusReport.Frequency">
            <summary>
            Frequency
            </summary>
        </member>
        <member name="T:ThingMagic.TemperatureStatusReport">
            <summary>
            TemperatureStatusReport
            </summary>
        </member>
        <member name="F:ThingMagic.TemperatureStatusReport.temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="M:ThingMagic.TemperatureStatusReport.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.TemperatureStatusReport.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.TemperatureStatusReport.Temperature">
            <summary>
            Temperature
            </summary>
        </member>
        <member name="T:ThingMagic.StatusReportEventArgs">
            <summary>
            This object sends reader statics to StatusListener
            </summary>
        </member>
        <member name="M:ThingMagic.StatusReportEventArgs.#ctor">
            <summary>
            Default constructor
            </summary>
        </member>
        <member name="M:ThingMagic.StatusReportEventArgs.#ctor(ThingMagic.StatusReport)">
            <summary>
            Constructor
            </summary>
            <param name="statusReport">array of status reports</param>
        </member>
        <member name="M:ThingMagic.StatusReportEventArgs.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>Human-readable representation</returns>
        </member>
        <member name="P:ThingMagic.StatusReportEventArgs.StatusReport">
            <summary>
            StatusReport
            </summary>
        </member>
        <member name="T:ThingMagic.StopOnTagCount">
            <summary>
            StopOnTagCount object which consists of N value i.e reader should stop after seeing N tags (or timeout)
            </summary>
        </member>
        <member name="T:ThingMagic.TagsObservationTrigger">
            <summary>
            TagsObservationTrigger class 
            </summary>
        </member>
        <member name="T:ThingMagic.StopTrigger">
            <summary>
            Abstract base class
            </summary>
        </member>
        <member name="F:ThingMagic.StopOnTagCount.n">
            <summary>
            Number of tags to be seen
            </summary>
        </member>
        <member name="P:ThingMagic.StopOnTagCount.N">
            <summary>
            Number of tags to be seen 
            </summary>
        </member>
        <member name="T:ThingMagic.StopTriggerReadPlan">
            <summary>
            StopTriggerReadPlan consisting of stopontagcount, list of antennas, tag protocol, filter and weight
            </summary>
        </member>
        <member name="F:ThingMagic.StopTriggerReadPlan.stopOnCount">
            <summary>
            Stop on tag count
            </summary>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount,System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount,System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,System.Int32)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount,System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Int32)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount,System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Boolean)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>
            <param name="useFastSearch">Enable fast search</param>
        </member>
        <member name="M:ThingMagic.StopTriggerReadPlan.#ctor(ThingMagic.StopOnTagCount,System.Collections.Generic.ICollection{System.Int32},ThingMagic.TagProtocol,ThingMagic.TagFilter,ThingMagic.TagOp,System.Boolean,System.Int32)">
            <summary>
            Create StopTriggerReadPlan
            </summary>
            <param name="sotc">StopOnTagCount object</param>
            <param name="antennaList">List of antenna numbers</param>
            <param name="protocol">Protocol identifier</param>
            <param name="filter">Tag filter.  May be null.</param>
            <param name="op">Operation mode</param>
            <param name="useFastSearch">Enable fast search</param>
            <param name="weight">Relative scheduling weight</param>
        </member>
        <member name="T:ThingMagic.TagProtocol">
            <summary>
            Tag protocol designator
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.NONE">
            <summary>
            No protocol selected
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.GEN2">
            <summary>
            Gen2
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.ISO180006B">
            <summary>
            ISO18000-6B
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.ISO180006B_UCODE">
            <summary>
            ISO18000-6B with UCODE extension for >64-bit EPCs
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.IPX64">
            <summary>
            IPX at 64kHz
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.IPX256">
            <summary>
            IPX at 256kHz
            </summary>
        </member>
        <member name="F:ThingMagic.TagProtocol.ATA">
            <summary>
            ATA
            </summary>
        </member>
        <member name="T:ThingMagic.TagReadData">
            <summary>
            Data representing the reading of an RFID tag
            </summary>
        </member>
        <member name="F:ThingMagic.TagReadData.ReadCount">
            <summary>
            Number of times the Tag was read.
            </summary>
        </member>
        <member name="F:ThingMagic.TagReadData._baseTime">
            <summary>
            Time that search started
            </summary>
        </member>
        <member name="F:ThingMagic.TagReadData._readOffset">
            <summary>
            Time tag was read, in milliseconds since start of search
            </summary>
        </member>
        <member name="M:ThingMagic.TagReadData.ToString">
            <summary>
            Human-readable representation
            </summary>
            <returns>A string representing the current object</returns>
        </member>
        <member name="P:ThingMagic.TagReadData.Data">
            <summary>
            Read Data Bytes
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.EPCMemData">
            <summary>
            Read EPC Bank Data Bytes
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.TIDMemData">
            <summary>
            Read Tid Bank Data Bytes
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.USERMemData">
            <summary>
            Read User Bank Data Bytes
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.RESERVEDMemData">
            <summary>
            Read Reserved Bank Data Bytes
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Antenna">
            <summary>
            [1-based] numeric identifier of antenna that tag was read on
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Rssi">
            <summary>
            RSSI units
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Epc">
            <summary>
            EPC of tag
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.EpcString">
            <summary>
            EPC of tag, as human-readable string
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Tag">
            <summary>
            Tag that was read
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Frequency">
            <summary>
            Frequency at which the tag was read.
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Time">
            <summary>
            Time when tag was read
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Phase">
            <summary>
            Phase when tag was read
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.GPIO">
            <summary>
            GPIO value when tag was read
            </summary>
        </member>
        <member name="P:ThingMagic.TagReadData.Reader">
            <summary>
            Reader when tag was read
            </summary>
        </member>
        <member name="T:ThingMagic.TagReadDataEventArgs">
            <summary>
            Tag Read Data Event Args class
            </summary>
        </member>
        <member name="M:ThingMagic.TagReadDataEventArgs.#ctor(ThingMagic.TagReadData)">
            <summary>
            TagReadData EventArgs Constructor
            </summary>
            <param name="tagReadData">the tag read data</param>
        </member>
        <member name="P:ThingMagic.TagReadDataEventArgs.TagReadData">
            <summary>
            Tag Read Data
            </summary>
        </member>
        <member name="T:ThingMagic.CollUtil">
            <summary>
            ICollection conversion routines
            </summary>
        </member>
        <member name="M:ThingMagic.CollUtil.ToArray``1(System.Collections.Generic.ICollection{``0})">
            <summary>
            Convert ICollection to Array
            </summary>
            <typeparam name="T">Type of the contents in the array</typeparam>
            <param name="collection">Collection of items</param>
            <returns>Array of items</returns>
        </member>
        <member name="M:ThingMagic.CollUtil.IntArrayToString(System.Int32[])">
            <summary>
            Convert integer array to string
            </summary>
            <param name="intArray">The input integer array</param>
            <returns>The converted string</returns>
        </member>
        <member name="T:ThingMagic.TransportListenerEventArgs">
            <summary>
            Listener gets notification of all messages going across the transport layer.
            </summary>
        </member>
        <member name="M:ThingMagic.TransportListenerEventArgs.#ctor(System.Boolean,System.Byte[],System.Int32)">
            <summary>
            TransportListenerEventArgs constructor
            </summary>
            <param name="tx">if the listener is for tx or rx(true for tx)</param>
            <param name="data">the event data</param>
            <param name="timeout">the listen timeout</param>
        </member>
        <member name="P:ThingMagic.TransportListenerEventArgs.Tx">
            <summary>
            Message direction: True=host to reader, False=reader to host
            </summary>    
        </member>
        <member name="P:ThingMagic.TransportListenerEventArgs.Data">
            <summary>
            Message contents, including framing and checksum bytes
            </summary>                
        </member>
        <member name="P:ThingMagic.TransportListenerEventArgs.Timeout">
            <summary>
            Transport timeout setting (milliseconds) when message was sent or received
            </summary>            
        </member>
        <member name="T:ThingMagic.VersionNumber">
            <summary>
            This class represents a version number for a component of the module.    
            </summary>
        </member>
        <member name="F:ThingMagic.VersionNumber.Part1">
            <summary>
            Part number for the version field
            </summary>
        </member>
        <member name="F:ThingMagic.VersionNumber.Part2">
            <summary>
            Part number for the version field
            </summary>
        </member>
        <member name="F:ThingMagic.VersionNumber.Part3">
            <summary>
            Part number for the version field
            </summary>
        </member>
        <member name="F:ThingMagic.VersionNumber.Part4">
            <summary>
            Part number for the version field
            </summary>
        </member>
        <member name="F:ThingMagic.VersionNumber.CompositeVersion">
            <summary>
            Composite Version Info number
            </summary>
        </member>
        <member name="M:ThingMagic.VersionNumber.#ctor(System.Byte,System.Byte,System.Byte,System.Byte)">
            <summary>
            Construct a new VersionNumber object given the individual components.
            Note that all version number components are discussed and
            presented in hexadecimal format, that is, in the version number
            "9.5.12.0", the 12 is 0x12 and should be passed to this
            constructor as such.
            </summary>
            <param name="part1">the first part of the version number</param>
            <param name="part2">the second part of the version number</param>
            <param name="part3">the third part of the version number</param>
            <param name="part4">the fourth part of the version number</param>
        </member>
        <member name="M:ThingMagic.VersionNumber.CompareTo(ThingMagic.VersionNumber)">
            <summary>
            Compares two versions of the Version Number
            </summary>
            <param name="v">Version Number to compare</param>
            <returns>Relative order of objects being compared</returns>
        </member>
        <member name="M:ThingMagic.VersionNumber.ToString">
            <summary>
            Return a string representation of the version number, as a
            sequence of four two-digit hexadecimal numbers separated by
            dots, for example "09.05.12.0".
            </summary>
            <returns>String representation of the VersionNumber</returns>
        </member>
        <member name="M:ThingMagic.VersionNumber.Equals(System.Object)">
            <summary>
            Returns true if the object Matches the CompositeVersion of VersionNumber
            </summary>
            <param name="obj">Object to perform the equal function</param>
            <returns>Bool value of the Equals function</returns>
        </member>
        <member name="M:ThingMagic.VersionNumber.GetHashCode">
            <summary>
            Returns int representation of VersionInfo
            </summary>
            <returns>int representation of VersionInfo</returns>
        </member>
    </members>
</doc>
